{"version":3,"sources":["webpack:///static/js/28.1039ff1ec8f39b3a1cff.js","webpack:///./~/emmet/emmet.js"],"names":["webpackJsonp","212","module","exports","__webpack_require__","process","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_","eq","a","b","stack","_chain","_wrapped","isEqual","isFunction","className","toString","call","String","source","global","multiline","ignoreCase","length","push","size","result","constructor","key","has","pop","root","this","previousUnderscore","breaker","ArrayProto","Array","prototype","ObjProto","Object","FuncProto","Function","slice","unshift","hasOwnProperty","nativeForEach","forEach","nativeMap","map","nativeReduce","reduce","nativeReduceRight","reduceRight","nativeFilter","filter","nativeEvery","every","nativeSome","some","nativeIndexOf","indexOf","nativeLastIndexOf","lastIndexOf","nativeIsArray","isArray","nativeKeys","keys","nativeBind","bind","obj","wrapper","VERSION","each","iterator","context","i","l","collect","results","value","index","list","foldl","inject","memo","initial","arguments","TypeError","foldr","reversed","toArray","reverse","find","detect","any","select","reject","all","identity","include","contains","target","found","invoke","method","args","apply","pluck","max","Math","isEmpty","Infinity","computed","min","shuffle","rand","shuffled","floor","random","sortBy","val","criteria","sort","left","right","groupBy","sortedIndex","array","low","high","mid","isArguments","values","first","head","take","n","guard","last","rest","tail","compact","flatten","shallow","concat","without","difference","uniq","unique","isSorted","union","intersection","intersect","item","other","zip","range","start","stop","step","len","ceil","idx","ctor","func","bound","self","bindAll","funcs","functions","f","memoize","hasher","delay","wait","setTimeout","defer","throttle","timeout","throttling","more","whenDone","debounce","later","immediate","clearTimeout","once","ran","wrap","compose","after","times","methods","names","extend","prop","pick","defaults","clone","isObject","tap","interceptor","isString","isElement","nodeType","isNumber","isFinite","isNaN","isBoolean","isDate","isRegExp","isNull","isUndefined","noConflict","escape","string","replace","object","property","mixin","name","addToWrapper","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","'","r","t","u2028","u2029","p","escaper","unescaper","unescape","code","match","template","text","data","settings","variable","render","chain","wrapped","emmet","inherits","parent","protoProps","staticProps","child","__super__","modules","moduleLoader","e","define","factory","exec","require","fn","classProps","expandAbbreviation","abbr","syntax","profile","contextNode","filters","parser","get","resetTabstopIndex","extractFromAbbreviation","outputTree","parse","filtersList","composeList","defaultSyntax","defaultProfile","log","console","setModuleLoader","undefined","AbbreviationNode","children","_attributes","abbreviation","counter","_name","_text","repeatCount","hasImplicitRepeat","_data","end","content","padding","stripped","str","substring","consumeQuotedValue","stream","quote","ch","next","parseAbbreviation","trim","multiplier","addChild","create","loopProtector","eol","peek","pos","skipToPair","inner","current","_setRepeat","eatWhile","c","pairs","backUp","isMarker","isAllowedChar","setAbbreviation","extractAttributes","attrSet","attrs","eatSpace","reWord","attrName","attrValue","parseAttributes","attrMap","#",".","nameEnd","element","attributes","optimizeAttributes","attr","lookup","la","toLowerCase","extractText","unroll","node","j","maxCount","isRepeating","updateProperty","squash","isGroup","remove","charCode","charCodeAt","reValidName","[","(","{","spliceFn","splice","preprocessors","postprocessors","outputProcessors","position","ix","items","findAll","elemName","is","insertChildContent","res","matchedResource","attributeList","attribute","count","parseInt","that","abbrText","abbrAttrs","test","utils","innerContent","join","keepVariable","padString","hasEmptyChildren","hasImplicitName","isTextNode","deepestChild","replaceCounter","options","tree","attrLookup","addPreprocessor","removeFilter","preprocessor","addPostprocessor","removePostprocessor","addOutputProcessor","removeOutputProcessor","matchResources","resources","elements","getMatchedResource","subtree","repeatedChildren","locateOutputPlaceholder","outputPlaceholder","replaceOutputPlaceholders","ranges","replaceSubstring","hasOutputPlaceholder","insertPastedContent","overwrite","nodesWithPlaceholders","deepest","pastedContent","lines","splitByLines","pastedContentObj","resolveNodeNames","tagName","resolve","isset","v","getConf","char","walker","chnum","line","linenum","tokener","type","conf","w","tokens","charstart","charend","linestart","lineend","error","m","config","message","white","token","nextChar","comment","cnext","pk","q","brace","depth","identifier","pre","isNameChar","isDigit","num","nondigit","point","op","isOp","tokenize","getNewline","charAt","total_lines","init","me","split","nextLine","opsa","opsmatcha","ops","opsmatch","matchattr","lex","toSource","toks","src","inText","state","eat","inBlock","doctype","inTag","ok","inAttribute","style","terminator","pass","curState","cc","cont","pushContext","startOfLine","noIndent","Kludges","doNotIndent","prev","indent","indented","popContext","endtag","err","implicitlyClosed","setStyle","endclosetag","autoSelfClosers","maybePopContext","callee","nextTagName","parentTagName","contextGrabbers","attvalue","allowMissing","attvaluemaybe","allowUnquoted","startState","sol","comb","offset","score","fuzziness","start_of_string_bonus","abbreviation_score","final_score","character_score","index_in_string","index_c_lowercase","index_c_uppercase","min_index","total_character_score","abbreviation_length","string_length","fuzzies","toUpperCase","StringBuilder","append","caretPlaceholder","valueOf","reTag","endsWithTag","isNumeric","nl","getVariable","setNewline","setVariable","removeEmpty","normalizeNewline","repeatString","howMany","getStringsPads","strings","lengths","s","pad","padStr","zeroPadString","il","unindentString","search","substr","replaceUnescapedSymbol","symbol","sl","matchCount","curSl","newValue","replaceData","replaceVariables","vars","resolver","p1","processText","total","matchNum","base","decrement","matchesTag","escapeText","unescapeText","getCaretPlaceholder","setCaretPlaceholder","getLinePadding","getLinePaddingFromPosition","lineRange","findNewlineBounds","escapeForRegexp","specials","RegExp","prettifyNumber","fraction","toFixed","stringBuilder","narrowToNonSpace","reSpace","from","deepMerge","copy","copyIsArray","cmp","Range","abs","equal","shift","delta","overlap","inside","loc","create2","HandlerList","_list","add","order","listFn","skipValue","h","TokenIterator","_position","reset","hasNext","_i","_il","itemNext","itemPrev","nextUntil","callback","StringStream","skipToEnd","skipTo","open","close","braceCount","pattern","consume","caseInsensitive","cased","normalizeCaretPlaceholder","parseItem","normalizeName","cache","systemSettings","userSettings","resolvers","setVocabulary","getVocabulary","findSnippet","getSection","voc","variables","hasSyntax","addResolver","removeResolver","subsections","findItem","topSection","subsection","matchedItem","sectionName","fuzzyFindSnippet","minScore","payload","getAllSnippets","sc","scores","nk","parsedValue","cacheKey","sectionKey","section","stackItem","k","zc","humanizeActionName","actions","label","run","action","getAll","getList","getMenu","skipActions","hidden","actionName","ctx","parts","menuName","submenu","getActionNameForMenuTitle","title","menu","OutputProfile","stringCase","caseValue","createProfile","profiles","createDefaultProfiles","self_closing_tag","tag_nl","place_cursor","extraFilters","tag_case","attr_case","attr_quotes","tag_nl_leaf","inline_break","attributeName","attributeQuote","selfClosing","param","cursor","plain","isInsideTag","html","caretPos","outputInfo","editor","getProfileName","getSyntax","getContent","unindent","getCurrentLinePadding","getCurrentLine","mimeTypes","gif","png","jpg","jpeg","svg","htm","extractAbbreviation","curOffset","startIndex","groupCount","textCount","getImageSize","nextByte","width","height","marker","captureContext","allowedSyntaxes","xml","xsl","tag","getCaretPos","startTag","tagTree","findExpressionBounds","exprStart","exprEnd","compoundUpdate","sel","getSelectionRange","replaceContent","createSelection","caret","detectSyntax","hint","isStyle","isInlineCSS","detectProfile","isXHTML","innerRange","parseFromPosition","itemFromPosition","valueRange","isSnippet","isUnary","is_empty","isInline","isInlineLevel","isBlock","hasTagsInContent","hasBlockChildren","childContent","appendIfNoChild","childVariableReplaced","output","chars","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","cdp1","cdp2","cdp3","b64","decode","o1","o2","o3","h1","h2","h3","h4","bits","ac","tmpArr","fromCharCode","openTag","selfClose","closeTag","createMatcher","matches","reOpenTag","reCloseTag","findClosingPair","matcher","jl","outerRange","_c","outerContent","startPlaceholderNum","tabstopIndex","defaultOptions","replaceCarets","tabstop","maxNum","tabstops","tsOptions","group","placeholder","variablesResolver","extract","placeholders","carets","marks","ret","buf","lastIx","tabStops","mark","ph","upgrade","placeholderMemo","varName","varValue","toBoolean","isValueObj","preferences","_dbgDefaults","_dbgPreferences","description","prefs","set","getArray","getDict","load","json","exportModified","_startTest","_stopTest","registeredFilters","additionalFilters","commonFactory","factories","reAttrs","elem","elementName","core","EditContainer","_children","_positions","initialize","EditElement","nameToken","valueToken","_value","_updateSource","update","indexes","fullRange","nameRange","isAbsolute","_pos","namePosition","valuePosition","createToken","trimWhitespaceTokens","mask","WHITESPACE_REMOVE_FROM_START","WHITESPACE_REMOVE_FROM_END","whitespace","findSelectorRange","it","findValueRange","skipTokens","tok","findParts","sep","isValidIdentifier","styleBefore","styleSeparator","CSSEditContainer","editTree","selectorRange","contentStart","propertyRange","CSSEditElement","_saveStyle","styles","donor","rule","_end","valueParts","isBackward","bounds","extractRule","stopChars","bracePos","selector","baseName","styleQuote","XMLEditContainer","attrToken","XMLEditElement","extractTag","maxLen","handlers","info","getSelection","selRange","replaceRange","findAbbreviation","addHandler","removeHandler","curLine","getCurrentLineRange","editorUtils","prompt","newContent","parsedTree","toggleHTMLComment","genericCommentToggle","toggleCSSComment","cssItemFromPosition","absPos","relPos","reSafeChar","searchComment","startToken","endToken","commentStart","commentEnd","hasMatch","contentLen","commentRange","setCaretPos","findNewEditPoint","inc","curPoint","nextPoint","reEmptyLine","curChar","prevChar","curPos","newPoint","extractFn","rangeFn","itemRange","rng","contentLength","prevRange","searchPos","loop","findNextHTMLItem","isFirst","findOpeningTagFromPosition","getOpeningTagFromPosition","getRangeForHTMLItem","findPrevHTMLItem","makePossibleRangesHTML","attrValueRange","attrStart","isQuote","classNameRanges","curRange","matchedRanges","makePossibleRangesCSS","stringStream","cssEditTree","fnBody","part","matchedRangeForCSSProperty","possibleRanges","searchFn","nearestItemFn","findNextCSSItem","getRangeForNextItemInCSS","findPrevCSSItem","getRangeForPrevItemInCSS","matchPair","direction","lastMatch","narrowed","tagContentRange","startLineBounds","startLinePad","tagContent","joinTag","slash","splitTag","profileName","doCSSReflection","cssRule","oldRule","caretDelta","getReflectedCSSName","vendorPrefix","reflectValue","receiver","getReflectedValue","curName","curValue","refName","refValue","parseFloat","reName","actionUtils","expr","incrementNumber","hasSign","hasDecimal","strNum","minus","$1","intLength","hasCloseBrace","insValue","curPadding","nextPadding","selection","pair","textLen","startsWith","encodeToBase64","imgPath","file","editorFile","getFilePath","realImgPath","locateFile","read","getExt","decodeFromBase64","filePath","absPath","createPath","save","updateImageSizeHTML","xmlElem","getImageSizeForSource","compoundData","updateImageSizeCSS","fileContent","au","isSingleProperty","snippet","normalizeValue","normalizeHexColor","getKeyword","hex","repeat","color","aliases","getUnit","isValidKeyword","keyword","hasPrefix","vendorPrefixes","supports","findPrefixes","noAutofill","obsolete","addPrefix","prefixObj","getSyntaxPreference","formatProperty","transformSnippet","isImportant","getProperties","transformName","properties","descTemplate","descAddonTemplate","props","webkit","moz","ms","o","vendor","cssSyntaxes","expandToSnippet","ea","replaceFrom","replaceTo","supportsPrefix","prefixed","listPrefixes","getPrefix","removePrefix","extractPrefixes","prefixes","findValuesInAbbreviation","keywords","lastPart","parseValues","extractValues","abbrValues","unitlessProps","unit","expand","autoInsertPrefixes","prefixData","valuesData","abbrData","snippetObj","splitSnippet","propName","pads","normalizeSpace","parseLinearGradient","gradient","defaultLinearDirections","colorStops","reDeg","reKeyword","parseColorStop","colorStop","resolvePropertyName","fillImpliedPositions","cs","cs2","textualDirection","angle","oldWebkitDirection","getPrefixedNames","getPropertiesForGradient","propertyName","css","oldWebkitLinearGradient","pasteGradient","alignVendor","before","propsToInsert","valuePads","namePads","findGradient","cssProp","matchedPart","expandGradientOutsideValue","findGradientFromPosition","g","ruleStart","ruleEnd","insertPos","newCss","resolvedName","definition","generators","addGenerator","regexp","elementTypes","empty","blockLevel","inlineLevel","elementMap","ul","ol","table","tr","tbody","thead","tfoot","colgroup","optgroup","audio","video","getMapping","isTypeOf","isBlockLevel","isEmptyElement","addMapping","removeMapping","addElementToCollection","collection","col","getCollection","removeElementFromCollection","getSeparators","modifier","bemParse","__bem","block","classNames","normalizeClassName","reBlockName","processClassName","shortSymbol","re","transformClassName","separators","blockElem","elemModifiers","blockModifiers","entityType","reSep","cleanName","abbrUtils","shouldRunHtmlFilter","addComments","templateBefore","templateAfter","trigger","nodeBefore","nodeAfter","escapeChars","charMap","<",">","&","getIndentation","hasBlockSibling","isVeryFirstChild","shouldAddLineBreak","shouldFormatInline","shouldBreakChild","nodeCount","isRoot","processSnippet","level","shouldBreakInsideInline","processTag","forceNl","makeAttributesString","otherAttrs","attrQuote","rePad","reNl","trimAttribute","tags","xsl:variable","xsl:with-param","randint","to","round","sample","arr","iterations","randIx","choice","sentence","words","insertCommas","totalCommas","paragraph","lang","wordCount","startWithCommon","langs","totalWords","common","en","ru","wordCound","addLang","snippets","locale","charset","indentation","newline","@i","@import","@m","@media","@f","@f+","@kf","anim","anim-","animdel","animdir","animdir:n","animdir:r","animdir:a","animdir:ar","animdur","animfm","animfm:f","animfm:b","animfm:bt","animfm:bh","animic","animic:i","animn","animps","animps:p","animps:r","animtf","animtf:e","animtf:ei","animtf:eo","animtf:eio","animtf:l","animtf:cb","ap","!","pos:s","pos:a","pos:r","pos:f","t:a","r:a","b:a","l:a","z","z:a","fl","fl:n","fl:l","fl:r","cl","cl:n","cl:l","cl:r","cl:b","colm","colmc","colmf","colmg","colmr","colmrc","colmrs","colmrw","colms","colmw","d","d:n","d:b","d:i","d:ib","d:ib+","d:li","d:ri","d:cp","d:tb","d:itb","d:tbcp","d:tbcl","d:tbclg","d:tbhg","d:tbfg","d:tbr","d:tbrg","d:tbc","d:rb","d:rbb","d:rbbg","d:rbt","d:rbtg","v:v","v:h","v:c","ov","ov:v","ov:h","ov:s","ov:a","ovx","ovx:v","ovx:h","ovx:s","ovx:a","ovy","ovy:v","ovy:h","ovy:s","ovy:a","ovs","ovs:a","ovs:s","ovs:p","ovs:m","ovs:mq","zoo","zm","cp","cp:a","cp:r","bxz","bxz:cb","bxz:bb","bxsh","bxsh:r","bxsh:ra","bxsh:n","m:a","mt","mt:a","mr","mr:a","mb","mb:a","ml","ml:a","pt","pr","pb","pl","w:a","h:a","maw","maw:n","mah","mah:n","miw","mih","mar","mir","ori","ori:l","ori:p","ol:n","olo","olw","olw:tn","olw:m","olw:tc","ols","ols:n","ols:dt","ols:ds","ols:s","ols:db","ols:g","ols:r","ols:i","ols:o","olc","olc:i","bd","bd+","bd:n","bdbk","bdbk:c","bdcl","bdcl:c","bdcl:s","bdc","bdc:t","bdi","bdi:n","bdti","bdti:n","bdri","bdri:n","bdbi","bdbi:n","bdli","bdli:n","bdci","bdci:n","bdci:c","bdtli","bdtli:n","bdtli:c","bdtri","bdtri:n","bdtri:c","bdbri","bdbri:n","bdbri:c","bdbli","bdbli:n","bdbli:c","bdf","bdf:c","bdf:r","bdf:sc","bdf:st","bdf:ow","bdf:of","bdf:sp","bdlen","bdlen:a","bdsp","bds","bds:n","bds:h","bds:dt","bds:ds","bds:s","bds:db","bds:dtds","bds:dtdtds","bds:w","bds:g","bds:r","bds:i","bds:o","bdw","bdtw","bdrw","bdbw","bdlw","bdt","bt","bdt+","bdt:n","bdts","bdts:n","bdtc","bdtc:t","bdr","br","bdr+","bdr:n","bdrst","bdrst:n","bdrc","bdrc:t","bdb","bb","bdb+","bdb:n","bdbs","bdbs:n","bdbc","bdbc:t","bdl","bl","bdl+","bdl:n","bdls","bdls:n","bdlc","bdlc:t","bdrs","bdtrrs","bdtlrs","bdbrrs","bdblrs","bg","bg+","bg:n","bg:ie","bgc","bgc:t","bgi","bgi:n","bgr","bgr:n","bgr:x","bgr:y","bgr:sp","bgr:rd","bga","bga:f","bga:s","bgp","bgpx","bgpy","bgbk","bgbk:bb","bgbk:eb","bgbk:c","bgcp","bgcp:bb","bgcp:pb","bgcp:cb","bgcp:nc","bgo","bgo:pb","bgo:bb","bgo:cb","bgsz","bgsz:a","bgsz:ct","bgsz:cv","c:r","c:ra","cm","cnt","cnt:n","cnt:oq","cnt:noq","cnt:cq","cnt:ncq","cnt:a","cnt:c","cnt:cs","tbl","tbl:a","tbl:f","cps","cps:t","cps:b","ec","ec:s","ec:h","lis","lis:n","lisp","lisp:i","lisp:o","list:n","list:d","list:c","list:s","list:dc","list:dclz","list:lr","list:ur","lisi","lisi:n","q:n","q:ru","q:en","ct","ct:n","ct:oq","ct:noq","ct:cq","ct:ncq","ct:a","ct:c","ct:cs","coi","cor","va","va:sup","va:t","va:tt","va:m","va:bl","va:b","va:tb","va:sub","ta","ta:l","ta:c","ta:r","ta:j","ta-lst","tal:a","tal:l","tal:c","tal:r","td","td:n","td:u","td:o","td:l","te","te:n","te:ac","te:dt","te:c","te:ds","te:b","te:a","th","th:a","th:f","th:t","th:m","ti","ti:-","tj","tj:a","tj:iw","tj:ii","tj:ic","tj:d","tj:k","tj:t","tov","tov:e","tov:c","to+","to:n","tr:n","tt","tt:n","tt:c","tt:u","tt:l","tw","tw:n","tw:no","tw:u","tw:s","tsh","tsh:r","tsh:ra","tsh+","tsh:n","trf","trf:skx","trf:sky","trf:sc","trf:scx","trf:scy","trf:r","trf:t","trf:tx","trf:ty","trfo","trfs","trs","trsde","trsdu","trsp","trstf","lh","whs","whs:n","whs:p","whs:nw","whs:pw","whs:pl","whsc","whsc:n","whsc:k","whsc:l","whsc:bs","whsc:ba","wob","wob:n","wob:k","wob:ba","wos","wow","wow:nm","wow:n","wow:u","wow:s","wow:b","wm","wm:lrt","wm:lrb","wm:rlt","wm:rlb","wm:tbr","wm:tbl","wm:btl","wm:btr","lts","lts-n","f+","fw","fw:n","fw:b","fw:br","fw:lr","fs","fs:n","fs:i","fs:o","fv","fv:n","fv:sc","fz","fza","fza:n","ff","ff:s","ff:ss","ff:c","ff:f","ff:m","ff:a","ff:t","ff:v","fef","fef:n","fef:eg","fef:eb","fef:o","fem","femp","femp:b","femp:a","fems","fems:n","fems:ac","fems:dt","fems:c","fems:ds","fsm","fsm:a","fsm:n","fsm:aw","fst","fst:n","fst:uc","fst:ec","fst:c","fst:sc","fst:se","fst:e","fst:ee","fst:ue","op+","op:ie","op:ms","rsz","rsz:n","rsz:b","rsz:h","rsz:v","cur","cur:a","cur:d","cur:c","cur:ha","cur:he","cur:m","cur:p","cur:t","pgbb","pgbb:au","pgbb:al","pgbb:l","pgbb:r","pgbi","pgbi:au","pgbi:av","pgba","pgba:au","pgba:al","pgba:l","pgba:r","orp","us","wid","wfsm","wfsm:a","wfsm:s","wfsm:sa","wfsm:n","!!!","!!!4t","!!!4s","!!!xt","!!!xs","!!!xxs","cc:ie6","cc:ie","cc:noie","abbreviations","a:link","a:mail","acronym","basefont","frame","hr","bdo","bdo:r","bdo:l","link","link:css","link:print","link:favicon","link:touch","link:rss","link:atom","meta","meta:utf","meta:win","meta:vp","meta:compat","script","script:src","img","iframe","embed","area","area:d","area:c","area:r","area:p","form","form:get","form:post","inp","input:hidden","input:h","input:text","input:t","input:search","input:email","input:url","input:password","input:p","input:datetime","input:date","input:datetime-local","input:month","input:week","input:time","input:number","input:color","input:checkbox","input:c","input:radio","input:r","input:range","input:file","input:f","input:submit","input:s","input:image","input:i","input:button","input:b","isindex","input:reset","select:disabled","select:d","option","textarea","marquee","menu:context","menu:c","menu:toolbar","menu:t","html:xml","keygen","command","button:submit","button:s","button:reset","button:r","button:disabled","button:d","fieldset:disabled","fieldset:d","bq","acr","fig","figc","ifr","emb","cap","colg","fst:d","btn","btn:b","btn:r","btn:s","btn:d","optg","opt","tarea","leg","sect","art","hdr","ftr","adr","dlg","prog","fset","fset:d","datag","datal","kg","out","det","cmd","doc","doc4","html:4t","html:4s","html:xt","html:xs","html:xxs","html:5","ol+","ul+","dl+","map+","table+","colgroup+","colg+","tr+","select+","optgroup+","optg+","extends","tm","tmatch","tn","tname","api","imp","xsl:when","wh","ot","if","par","pare","var","vare","wp","co","for","tex","com","msg","fall","nam","pres","strip","proc","choose+","haml","scss","sass","less","stylus","styl","userData"],"mappings":"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","file":"static/js/28.1039ff1ec8f39b3a1cff.js","sourcesContent":["webpackJsonp([28],{\n\n/***/ 212:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.3.3\n//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\nvar _ = (function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root['_'] = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.3.3';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (_.has(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    if (obj.length === +obj.length) results.length = obj.length;\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError('Reduce of empty array with no initial value');\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = _.toArray(obj).reverse();\n    if (context && !initial) iterator = _.bind(iterator, context);\n    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    found = any(obj, function(value) {\n      return value === target;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array.\n  _.shuffle = function(obj) {\n    var shuffled = [], rand;\n    each(obj, function(value, index, list) {\n      rand = Math.floor(Math.random() * (index + 1));\n      shuffled[index] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, val, context) {\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      if (a === void 0) return 1;\n      if (b === void 0) return -1;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = function(obj, val) {\n    var result = {};\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    each(obj, function(value, index) {\n      var key = iterator(value, index);\n      (result[key] || (result[key] = [])).push(value);\n    });\n    return result;\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(obj) {\n    if (!obj)                                     return [];\n    if (_.isArray(obj))                           return slice.call(obj);\n    if (_.isArguments(obj))                       return slice.call(obj);\n    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the last entry of the array. Especcialy useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if ((n != null) && !guard) {\n      return slice.call(array, Math.max(array.length - n, 0));\n    } else {\n      return array[array.length - 1];\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array, shallow) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator) {\n    var initial = iterator ? _.map(array, iterator) : array;\n    var results = [];\n    // The `isSorted` flag is irrelevant if the array only contains two elements.\n    if (array.length < 3) isSorted = true;\n    _.reduce(initial, function (memo, value, index) {\n      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {\n        memo.push(value);\n        results.push(array[index]);\n      }\n      return memo;\n    }, []);\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\n  _.intersection = _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = _.flatten(slice.call(arguments, 1), true);\n    return _.filter(array, function(value){ return !_.include(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n  _.bind = function bind(func, context) {\n    var bound, args;\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    var context, args, timeout, throttling, more, result;\n    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);\n    return function() {\n      context = this; args = arguments;\n      var later = function() {\n        timeout = null;\n        if (more) func.apply(context, args);\n        whenDone();\n      };\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (throttling) {\n        more = true;\n      } else {\n        result = func.apply(context, args);\n      }\n      whenDone();\n      throttling = true;\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      if (immediate && !timeout) func.apply(context, args);\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments, 0));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    if (times <= 0) return func();\n    return function() {\n      if (--times < 1) { return func.apply(this, arguments); }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var result = {};\n    each(_.flatten(slice.call(arguments, 1)), function(key) {\n      if (key in obj) result[key] = obj[key];\n    });\n    return result;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function.\n  function eq(a, b, stack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // Invoke a custom `isEqual` method if one is provided.\n    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);\n    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = stack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (stack[length] == a) return true;\n    }\n    // Add the first object to the stack of traversed objects.\n    stack.push(a);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          // Ensure commutative equality for sparse arrays.\n          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;\n        }\n      }\n    } else {\n      // Objects with different constructors are not equivalent.\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    stack.pop();\n    return result;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return toString.call(obj) == '[object Arguments]';\n  };\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return toString.call(obj) == '[object Function]';\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return toString.call(obj) == '[object String]';\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return toString.call(obj) == '[object Number]';\n  };\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return _.isNumber(obj) && isFinite(obj);\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    // `NaN` is the only value for which `===` is not reflexive.\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Has own property?\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Escape a string for HTML interpolation.\n  _.escape = function(string) {\n    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g,'&#x2F;');\n  };\n\n  // If the value of the named property is a function then invoke it;\n  // otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return null;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /.^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    'r': '\\r',\n    'n': '\\n',\n    't': '\\t',\n    'u2028': '\\u2028',\n    'u2029': '\\u2029'\n  };\n\n  for (var p in escapes) escapes[escapes[p]] = p;\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n  var unescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\n\n  // Within an interpolation, evaluation, or escaping, remove HTML escaping\n  // that had been previously added.\n  var unescape = function(code) {\n    return code.replace(unescaper, function(match, escape) {\n      return escapes[escape];\n    });\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    settings = _.defaults(settings || {}, _.templateSettings);\n\n    // Compile the template source, taking care to escape characters that\n    // cannot be included in a string literal and then unescape them in code\n    // blocks.\n    var source = \"__p+='\" + text\n      .replace(escaper, function(match) {\n        return '\\\\' + escapes[match];\n      })\n      .replace(settings.escape || noMatch, function(match, code) {\n        return \"'+\\n_.escape(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.interpolate || noMatch, function(match, code) {\n        return \"'+\\n(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.evaluate || noMatch, function(match, code) {\n        return \"';\\n\" + unescape(code) + \"\\n;__p+='\";\n      }) + \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __p='';\" +\n      \"var print=function(){__p+=Array.prototype.join.call(arguments, '')};\\n\" +\n      source + \"return __p;\\n\";\n\n    var render = new Function(settings.variable || 'obj', '_', source);\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for build time\n    // precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' +\n      source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      var wrapped = this._wrapped;\n      method.apply(wrapped, arguments);\n      var length = wrapped.length;\n      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];\n      return result(wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n  return _;\n}).call({});\n/**\n * Core Emmet object, available in global scope\n */\nvar emmet = (function(global) {\n\tvar defaultSyntax = 'html';\n\tvar defaultProfile = 'plain';\n\t\n\tif (typeof _ == 'undefined') {\n\t\ttry {\n\t\t\t// avoid collisions with RequireJS loader\n\t\t\t// also, JS obfuscators tends to translate\n\t\t\t// a[\"name\"] to a.name, which also breaks RequireJS\n\t\t\t_ = global[['require'][0]]('underscore'); // node.js\n\t\t} catch (e) {}\n\t}\n\n\tif (typeof _ == 'undefined') {\n\t\tthrow 'Cannot access to Underscore.js lib';\n\t}\n\n\t/** List of registered modules */\n\tvar modules = {\n\t\t_ : _\n\t};\n\t\n\t/**\n\t * Shared empty constructor function to aid in prototype-chain creation.\n\t */\n\tvar ctor = function(){};\n\t\n\t/**\n\t * Helper function to correctly set up the prototype chain, for subclasses.\n\t * Similar to `goog.inherits`, but uses a hash of prototype properties and\n\t * class properties to be extended.\n\t * Took it from Backbone.\n\t * @param {Object} parent\n\t * @param {Object} protoProps\n\t * @param {Object} staticProps\n\t * @returns {Object}\n\t */\n\tfunction inherits(parent, protoProps, staticProps) {\n\t\tvar child;\n\n\t\t// The constructor function for the new subclass is either defined by\n\t\t// you (the \"constructor\" property in your `extend` definition), or\n\t\t// defaulted by us to simply call the parent's constructor.\n\t\tif (protoProps && protoProps.hasOwnProperty('constructor')) {\n\t\t\tchild = protoProps.constructor;\n\t\t} else {\n\t\t\tchild = function() {\n\t\t\t\tparent.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\t// Inherit class (static) properties from parent.\n\t\t_.extend(child, parent);\n\n\t\t// Set the prototype chain to inherit from `parent`, without calling\n\t\t// `parent`'s constructor function.\n\t\tctor.prototype = parent.prototype;\n\t\tchild.prototype = new ctor();\n\n\t\t// Add prototype properties (instance properties) to the subclass,\n\t\t// if supplied.\n\t\tif (protoProps)\n\t\t\t_.extend(child.prototype, protoProps);\n\n\t\t// Add static properties to the constructor function, if supplied.\n\t\tif (staticProps)\n\t\t\t_.extend(child, staticProps);\n\n\t\t// Correctly set child's `prototype.constructor`.\n\t\tchild.prototype.constructor = child;\n\n\t\t// Set a convenience property in case the parent's prototype is needed\n\t\t// later.\n\t\tchild.__super__ = parent.prototype;\n\n\t\treturn child;\n\t};\n\t\n\t/**\n\t * @type Function Function that loads module definition if it's not defined\n\t */\n\tvar moduleLoader = null;\n\t\n\t/**\n\t * Generic Emmet module loader (actually, it doesn’t load anything, just \n\t * returns module reference). Not using `require` name to avoid conflicts\n\t * with Node.js and RequireJS\n\t */\n\tfunction r(name) {\n\t\tif (!(name in modules) && moduleLoader)\n\t\t\tmoduleLoader(name);\n\t\t\n\t\treturn modules[name];\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Simple, AMD-like module definition. The module will be added into\n\t\t * <code>emmet</code> object and will be available via\n\t\t * <code>emmet.require(name)</code> or <code>emmet[name]</code>\n\t\t * @param {String} name\n\t\t * @param {Function} factory\n\t\t * @memberOf emmet\n\t\t */\n\t\tdefine: function(name, factory) {\n\t\t\t// do not let redefine existing properties\n\t\t\tif (!(name in modules)) {\n\t\t\t\tmodules[name] = _.isFunction(factory) \n\t\t\t\t\t? this.exec(factory)\n\t\t\t\t\t: factory;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to Emmet module\n\t\t * @param {String} name Module name\n\t\t */\n\t\trequire: r,\n\t\t\n\t\t/**\n\t\t * Helper method that just executes passed function but with all \n\t\t * important arguments like 'require' and '_'\n\t\t * @param {Function} fn\n\t\t * @param {Object} context Execution context\n\t\t */\n\t\texec: function(fn, context) {\n\t\t\treturn fn.call(context || global, _.bind(r, this), _, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * The self-propagating extend function for classes.\n\t\t * Took it from Backbone \n\t\t * @param {Object} protoProps\n\t\t * @param {Object} classProps\n\t\t * @returns {Object}\n\t\t */\n\t\textend: function(protoProps, classProps) {\n\t\t\tvar child = inherits(this, protoProps, classProps);\n\t\t\tchild.extend = this.extend;\n\t\t\t// a hack required to WSH inherit `toString` method\n\t\t\tif (protoProps.hasOwnProperty('toString'))\n\t\t\t\tchild.prototype.toString = protoProps.toString;\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * The essential function that expands Emmet abbreviation\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {String} syntax Abbreviation's context syntax\n\t\t * @param {String} profile Output profile (or its name)\n\t\t * @param {Object} contextNode Contextual node where abbreviation is\n\t\t * written\n\t\t * @return {String}\n\t\t */\n\t\texpandAbbreviation: function(abbr, syntax, profile, contextNode) {\n\t\t\tif (!abbr) return '';\n\t\t\t\n\t\t\tsyntax = syntax || defaultSyntax;\n//\t\t\tprofile = profile || defaultProfile;\n\t\t\t\n\t\t\tvar filters = r('filters');\n\t\t\tvar parser = r('abbreviationParser');\n\t\t\t\n\t\t\tprofile = r('profile').get(profile, syntax);\n\t\t\tr('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar outputTree = parser.parse(data[0], {\n\t\t\t\tsyntax: syntax, \n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\t\n\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\tfilters.apply(outputTree, filtersList, profile);\n\t\t\treturn outputTree.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default syntax name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultSyntax: function() {\n\t\t\treturn defaultSyntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default profile name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultProfile: function() {\n\t\t\treturn defaultProfile;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Log message into console if it exists\n\t\t */\n\t\tlog: function() {\n\t\t\tif (global.console && global.console.log)\n\t\t\t\tglobal.console.log.apply(global.console, arguments);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Setups function that should synchronously load undefined modules\n\t\t * @param {Function} fn\n\t\t */\n\t\tsetModuleLoader: function(fn) {\n\t\t\tmoduleLoader = fn;\n\t\t}\n\t};\n})(this);\n\n// export core for Node.JS\nif (true) {\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\texports = module.exports = emmet;\n\t}\n\texports.emmet = emmet;\n}\n\n// export as Require.js module\nif (true) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (emmet),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}/**\n * Emmet abbreviation parser.\n * Takes string abbreviation and recursively parses it into a tree. The parsed \n * tree can be transformed into a string representation with \n * <code>toString()</code> method. Note that string representation is defined\n * by custom processors (called <i>filters</i>), not by abbreviation parser \n * itself.\n * \n * This module can be extended with custom pre-/post-processors to shape-up\n * final tree or its representation. Actually, many features of abbreviation \n * engine are defined in other modules as tree processors\n * \n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @memberOf __abbreviationParser\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationParser', function(require, _) {\n\tvar reValidName = /^[\\w\\-\\$\\:@\\!%]+\\+?$/i;\n\tvar reWord = /[\\w\\-:\\$@]/;\n\t\n\tvar pairs = {\n\t\t'[': ']',\n\t\t'(': ')',\n\t\t'{': '}'\n\t};\n\t\n\tvar spliceFn = Array.prototype.splice;\n\t\n\tvar preprocessors = [];\n\tvar postprocessors = [];\n\tvar outputProcessors = [];\n\t\n\t/**\n\t * @type AbbreviationNode\n\t */\n\tfunction AbbreviationNode(parent) {\n\t\t/** @type AbbreviationNode */\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis._attributes = [];\n\t\t\n\t\t/** @type String Raw abbreviation for current node */\n\t\tthis.abbreviation = '';\n\t\tthis.counter = 1;\n\t\tthis._name = null;\n\t\tthis._text = '';\n\t\tthis.repeatCount = 1;\n\t\tthis.hasImplicitRepeat = false;\n\t\t\n\t\t/** Custom data dictionary */\n\t\tthis._data = {};\n\t\t\n\t\t// output properties\n\t\tthis.start = '';\n\t\tthis.end = '';\n\t\tthis.content = '';\n\t\tthis.padding = '';\n\t}\n\t\n\tAbbreviationNode.prototype = {\n\t\t/**\n\t\t * Adds passed node as child or creates new child\n\t\t * @param {AbbreviationNode} child\n\t\t * @param {Number} position Index in children array where child should \n\t\t * be inserted\n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\taddChild: function(child, position) {\n\t\t\tchild = child || new AbbreviationNode;\n\t\t\tchild.parent = this;\n\t\t\t\n\t\t\tif (_.isUndefined(position)) {\n\t\t\t\tthis.children.push(child);\n\t\t\t} else {\n\t\t\t\tthis.children.splice(position, 0, child);\n\t\t\t}\n\t\t\t\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a deep copy of current node\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tclone: function() {\n\t\t\tvar node = new AbbreviationNode();\n\t\t\tvar attrs = ['abbreviation', 'counter', '_name', '_text', 'repeatCount', 'hasImplicitRepeat', 'start', 'end', 'content', 'padding'];\n\t\t\t_.each(attrs, function(a) {\n\t\t\t\tnode[a] = this[a];\n\t\t\t}, this);\n\t\t\t\n\t\t\t// clone attributes\n\t\t\tnode._attributes = _.map(this._attributes, function(attr) {\n\t\t\t\treturn _.clone(attr);\n\t\t\t});\n\t\t\t\n\t\t\tnode._data = _.clone(this._data);\n\t\t\t\n\t\t\t// clone children\n\t\t\tnode.children = _.map(this.children, function(child) {\n\t\t\t\tchild = child.clone();\n\t\t\t\tchild.parent = node;\n\t\t\t\treturn child;\n\t\t\t});\n\t\t\t\n\t\t\treturn node;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes current node from parent‘s child list\n\t\t * @returns {AbbreviationNode} Current node itself\n\t\t */\n\t\tremove: function() {\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.children = _.without(this.parent.children, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces current node in parent‘s children list with passed nodes\n\t\t * @param {AbbreviationNode} node Replacement node or array of nodes\n\t\t */\n\t\treplace: function() {\n\t\t\tvar parent = this.parent;\n\t\t\tvar ix = _.indexOf(parent.children, this);\n\t\t\tvar items = _.flatten(arguments);\n\t\t\tspliceFn.apply(parent.children, [ix, 1].concat(items));\n\t\t\t\n\t\t\t// update parent\n\t\t\t_.each(items, function(item) {\n\t\t\t\titem.parent = parent;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively sets <code>property</code> to <code>value</code> of current\n\t\t * node and its children \n\t\t * @param {String} name Property to update\n\t\t * @param {Object} value New property value\n\t\t */\n\t\tupdateProperty: function(name, value) {\n\t\t\tthis[name] = value;\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tchild.updateProperty(name, value);\n\t\t\t});\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds first child node that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tfind: function(fn) {\n\t\t\treturn this.findAll(fn)[0];\n//\t\t\tif (!_.isFunction(fn)) {\n//\t\t\t\tvar elemName = fn.toLowerCase();\n//\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n//\t\t\t}\n//\t\t\t\n//\t\t\tvar result = null;\n//\t\t\t_.find(this.children, function(child) {\n//\t\t\t\tif (fn(child)) {\n//\t\t\t\t\treturn result = child;\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t\treturn result = child.find(fn);\n//\t\t\t});\n//\t\t\t\n//\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds all child nodes that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {Array}\n\t\t */\n\t\tfindAll: function(fn) {\n\t\t\tif (!_.isFunction(fn)) {\n\t\t\t\tvar elemName = fn.toLowerCase();\n\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n\t\t\t}\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tif (fn(child))\n\t\t\t\t\tresult.push(child);\n\t\t\t\t\n\t\t\t\tresult = result.concat(child.findAll(fn));\n\t\t\t});\n\t\t\t\n\t\t\treturn _.compact(result);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets/gets custom data\n\t\t * @param {String} name\n\t\t * @param {Object} value\n\t\t * @returns {Object}\n\t\t */\n\t\tdata: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tthis._data[name] = value;\n\t\t\t\t\n\t\t\t\tif (name == 'resource' && require('elements').is(value, 'snippet')) {\n\t\t\t\t\t// setting snippet as matched resource: update `content`\n\t\t\t\t\t// property with snippet value\n\t\t\t\t\tthis.content = value.data;\n\t\t\t\t\tif (this._text) {\n\t\t\t\t\t\tthis.content = require('abbreviationUtils')\n\t\t\t\t\t\t\t.insertChildContent(value.data, this._text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this._data[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name of current node\n\t\t * @returns {String}\n\t\t */\n\t\tname: function() {\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element')) {\n\t\t\t\treturn res.name;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of attributes for current node\n\t\t * @returns {Array}\n\t\t */\n\t\tattributeList: function() {\n\t\t\tvar attrs = [];\n\t\t\t\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element') && _.isArray(res.attributes)) {\n\t\t\t\tattrs = attrs.concat(res.attributes);\n\t\t\t}\n\t\t\t\n\t\t\treturn optimizeAttributes(attrs.concat(this._attributes));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or sets attribute value\n\t\t * @param {String} name Attribute name\n\t\t * @param {String} value New attribute value\n\t\t * @returns {String}\n\t\t */\n\t\tattribute: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\t// modifying attribute\n\t\t\t\tvar ix = _.indexOf(_.pluck(this._attributes, 'name'), name.toLowerCase());\n\t\t\t\tif (~ix) {\n\t\t\t\t\tthis._attributes[ix].value = value;\n\t\t\t\t} else {\n\t\t\t\t\tthis._attributes.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn (_.find(this.attributeList(), function(attr) {\n\t\t\t\treturn attr.name == name;\n\t\t\t}) || {}).value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to the matched <code>element</code>, if any.\n\t\t * See {@link elements} module for a list of available elements\n\t\t * @returns {Object}\n\t\t */\n\t\tmatchedResource: function() {\n\t\t\treturn this.data('resource');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of current node in parent‘s children list\n\t\t * @returns {Number}\n\t\t */\n\t\tindex: function() {\n\t\t\treturn this.parent ? _.indexOf(this.parent.children, this) : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets how many times current element should be repeated\n\t\t * @private\n\t\t */\n\t\t_setRepeat: function(count) {\n\t\t\tif (count) {\n\t\t\t\tthis.repeatCount = parseInt(count, 10) || 1;\n\t\t\t} else {\n\t\t\t\tthis.hasImplicitRepeat = true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets abbreviation that belongs to current node\n\t\t * @param {String} abbr\n\t\t */\n\t\tsetAbbreviation: function(abbr) {\n\t\t\tabbr = abbr || '';\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\t// find multiplier\n\t\t\tabbr = abbr.replace(/\\*(\\d+)?$/, function(str, repeatCount) {\n\t\t\t\tthat._setRepeat(repeatCount);\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\tthis.abbreviation = abbr;\n\t\t\t\n\t\t\tvar abbrText = extractText(abbr);\n\t\t\tif (abbrText) {\n\t\t\t\tabbr = abbrText.element;\n\t\t\t\tthis.content = this._text = abbrText.text;\n\t\t\t}\n\t\t\t\n\t\t\tvar abbrAttrs = parseAttributes(abbr);\n\t\t\tif (abbrAttrs) {\n\t\t\t\tabbr = abbrAttrs.element;\n\t\t\t\tthis._attributes = abbrAttrs.attributes;\n\t\t\t}\n\t\t\t\n\t\t\tthis._name = abbr;\n\t\t\t\n\t\t\t// validate name\n\t\t\tif (this._name && !reValidName.test(this._name)) {\n\t\t\t\tthrow 'Invalid abbreviation';\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of current node\n\t\t * @return {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar start = this.start;\n\t\t\tvar end = this.end;\n\t\t\tvar content = this.content;\n\t\t\t\n\t\t\t// apply output processors\n\t\t\tvar node = this;\n\t\t\t_.each(outputProcessors, function(fn) {\n\t\t\t\tstart = fn(start, node, 'start');\n\t\t\t\tcontent = fn(content, node, 'content');\n\t\t\t\tend = fn(end, node, 'end');\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\tvar innerContent = _.map(this.children, function(child) {\n\t\t\t\treturn child.toString();\n\t\t\t}).join('');\n\t\t\t\n\t\t\tcontent = require('abbreviationUtils').insertChildContent(content, innerContent, {\n\t\t\t\tkeepVariable: false\n\t\t\t});\n\t\t\t\n\t\t\treturn start + utils.padString(content, this.padding) + end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node contains children with empty <code>expr</code>\n\t\t * property\n\t\t * @return {Boolean}\n\t\t */\n\t\thasEmptyChildren: function() {\n\t\t\treturn !!_.find(this.children, function(child) {\n\t\t\t\treturn child.isEmpty();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node has implied name that should be resolved\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasImplicitName: function() {\n\t\t\treturn !this._name && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current element is a grouping one, e.g. has no \n\t\t * representation but serves as a container for other nodes\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisGroup: function() {\n\t\t\treturn !this.abbreviation;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates empty node (i.e. without abbreviation). It may be a \n\t\t * grouping node and should not be outputted\n\t\t * @return {Boolean}\n\t\t */\n\t\tisEmpty: function() {\n\t\t\treturn !this.abbreviation && !this.children.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current node should be repeated\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisRepeating: function() {\n\t\t\treturn this.repeatCount > 1 || this.hasImplicitRepeat;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node is a text-only node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisTextNode: function() {\n\t\t\treturn !this.name() && !this.attributeList().length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates whether this node may be used to build elements or snippets\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisElement: function() {\n\t\t\treturn !this.isEmpty() && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns latest and deepest child of current tree\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tdeepestChild: function() {\n\t\t\tif (!this.children.length)\n\t\t\t\treturn null;\n\t\t\t\t\n\t\t\tvar deepestChild = this;\n\t\t\twhile (deepestChild.children.length) {\n\t\t\t\tdeepestChild = _.last(deepestChild.children);\n\t\t\t}\n\t\t\t\n\t\t\treturn deepestChild;\n\t\t}\n\t};\n\t\n\t/**\n\t * Returns stripped string: a string without first and last character.\n\t * Used for “unquoting” strings\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction stripped(str) {\n\t\treturn str.substring(1, str.length - 1);\n\t}\n\t\n\tfunction consumeQuotedValue(stream, quote) {\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch === quote)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (ch == '\\\\')\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Parses abbreviation into a tree\n\t * @param {String} abbr\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction parseAbbreviation(abbr) {\n\t\tabbr = require('utils').trim(abbr);\n\t\t\n\t\tvar root = new AbbreviationNode;\n\t\tvar context = root.addChild(), ch;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\tvar loopProtector = 1000, multiplier;\n\t\t\n\t\twhile (!stream.eol() && --loopProtector > 0) {\n\t\t\tch = stream.peek();\n\t\t\t\n\t\t\tswitch (ch) {\n\t\t\t\tcase '(': // abbreviation group\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (stream.skipToPair('(', ')')) {\n\t\t\t\t\t\tvar inner = parseAbbreviation(stripped(stream.current()));\n\t\t\t\t\t\tif (multiplier = stream.match(/^\\*(\\d+)?/, true)) {\n\t\t\t\t\t\t\tcontext._setRepeat(multiplier[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t_.each(inner.children, function(child) {\n\t\t\t\t\t\t\tcontext.addChild(child);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \")\" found for character at ' + stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '>': // child operator\n\t\t\t\t\tcontext = context.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '+': // sibling operator\n\t\t\t\t\tcontext = context.parent.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '^': // climb up operator\n\t\t\t\t\tvar parent = context.parent || context;\n\t\t\t\t\tcontext = (parent.parent || parent).addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tdefault: // consume abbreviation\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(function(c) {\n\t\t\t\t\t\tif (c == '[' || c == '{') {\n\t\t\t\t\t\t\tif (stream.skipToPair(c, pairs[c])) {\n\t\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \"' + pairs[c] + '\" found for character at ' + stream.pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (c == '+') {\n\t\t\t\t\t\t\t// let's see if this is an expando marker\n\t\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\t\tvar isMarker = stream.eol() ||  ~'+>^*'.indexOf(stream.peek());\n\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\treturn isMarker;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn c != '(' && isAllowedChar(c);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcontext.setAbbreviation(stream.current());\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (loopProtector < 1)\n\t\t\tthrow 'Endless loop detected';\n\t\t\n\t\treturn root;\n\t}\n\t\n\t/**\n\t * Extract attributes and their values from attribute set: \n\t * <code>[attr col=3 title=\"Quoted string\"]</code>\n\t * @param {String} attrSet\n\t * @returns {Array}\n\t */\n\tfunction extractAttributes(attrSet, attrs) {\n\t\tattrSet = require('utils').trim(attrSet);\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(attrSet);\n\t\tstream.eatSpace();\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tstream.start = stream.pos;\n\t\t\tif (stream.eatWhile(reWord)) {\n\t\t\t\tvar attrName = stream.current();\n\t\t\t\tvar attrValue = '';\n\t\t\t\tif (stream.peek() == '=') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tvar quote = stream.peek();\n\t\t\t\t\t\n\t\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\tif (consumeQuotedValue(stream, quote)) {\n\t\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t\t\t// strip quotes\n\t\t\t\t\t\t\tattrValue = attrValue.substring(1, attrValue.length - 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (stream.eatWhile(/[^\\s\\]]/)) {\n\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult.push({\n\t\t\t\t\tname: attrName, \n\t\t\t\t\tvalue: attrValue\n\t\t\t\t});\n\t\t\t\tstream.eatSpace();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Parses tag attributes extracted from abbreviation. If attributes found, \n\t * returns object with <code>element</code> and <code>attributes</code>\n\t * properties\n\t * @param {String} abbr\n\t * @returns {Object} Returns <code>null</code> if no attributes found in \n\t * abbreviation\n\t */\n\tfunction parseAttributes(abbr) {\n\t\t/*\n\t\t * Example of incoming data:\n\t\t * #header\n\t\t * .some.data\n\t\t * .some.data#header\n\t\t * [attr]\n\t\t * #item[attr=Hello other=\"World\"].class\n\t\t */\n\t\tvar result = [];\n\t\tvar attrMap = {'#': 'id', '.': 'class'};\n\t\tvar nameEnd = null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '#': // id\n\t\t\t\tcase '.': // class\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tvar attrName = attrMap[stream.peek()];\n\t\t\t\t\t\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(reWord);\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tname: attrName, \n\t\t\t\t\t\tvalue: stream.current()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase '[': //begin attribute set\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (!stream.skipToPair('[', ']')) \n\t\t\t\t\t\tthrow 'Invalid attribute set definition';\n\t\t\t\t\t\n\t\t\t\t\tresult = result.concat(\n\t\t\t\t\t\textractAttributes(stripped(stream.current()))\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!result.length)\n\t\t\treturn null;\n\t\t\n\t\treturn {\n\t\t\telement: abbr.substring(0, nameEnd),\n\t\t\tattributes: optimizeAttributes(result)\n\t\t};\n\t}\n\t\n\t/**\n\t * Optimize attribute set: remove duplicates and merge class attributes\n\t * @param attrs\n\t */\n\tfunction optimizeAttributes(attrs) {\n\t\t// clone all attributes to make sure that original objects are \n\t\t// not modified\n\t\tattrs  = _.map(attrs, function(attr) {\n\t\t\treturn _.clone(attr);\n\t\t});\n\t\t\n\t\tvar lookup = {};\n\t\treturn _.filter(attrs, function(attr) {\n\t\t\tif (!(attr.name in lookup)) {\n\t\t\t\treturn lookup[attr.name] = attr;\n\t\t\t}\n\t\t\t\n\t\t\tvar la = lookup[attr.name];\n\t\t\t\n\t\t\tif (attr.name.toLowerCase() == 'class') {\n\t\t\t\tla.value += (la.value.length ? ' ' : '') + attr.value;\n\t\t\t} else {\n\t\t\t\tla.value = attr.value;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\t/**\n\t * Extract text data from abbreviation: if <code>a{hello}</code> abbreviation\n\t * is passed, returns object <code>{element: 'a', text: 'hello'}</code>.\n\t * If nothing found, returns <code>null</code>\n\t * @param {String} abbr\n\t * \n\t */\n\tfunction extractText(abbr) {\n\t\tif (!~abbr.indexOf('{'))\n\t\t\treturn null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '[':\n\t\t\t\tcase '(':\n\t\t\t\t\tstream.skipToPair(stream.peek(), pairs[stream.peek()]); break;\n\t\t\t\t\t\n\t\t\t\tcase '{':\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: abbr.substring(0, stream.start),\n\t\t\t\t\t\ttext: stripped(stream.current())\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * “Un-rolls“ contents of current node: recursively replaces all repeating \n\t * children with their repeated clones\n\t * @param {AbbreviationNode} node\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction unroll(node) {\n\t\tfor (var i = node.children.length - 1, j, child, maxCount; i >= 0; i--) {\n\t\t\tchild = node.children[i];\n\t\t\t\n\t\t\tif (child.isRepeating()) {\n\t\t\t\tmaxCount = j = child.repeatCount;\n\t\t\t\tchild.repeatCount = 1;\n\t\t\t\tchild.updateProperty('counter', 1);\n\t\t\t\tchild.updateProperty('maxCount', maxCount);\n\t\t\t\twhile (--j > 0) {\n\t\t\t\t\tchild.parent.addChild(child.clone(), i + 1)\n\t\t\t\t\t\t.updateProperty('counter', j + 1)\n\t\t\t\t\t\t.updateProperty('maxCount', maxCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// to keep proper 'counter' property, we need to walk\n\t\t// on children once again\n\t\t_.each(node.children, unroll);\n\t\t\n\t\treturn node;\n\t}\n\t\n\t/**\n\t * Optimizes tree node: replaces empty nodes with their children\n\t * @param {AbbreviationNode} node\n\t * @return {AbbreviationNode}\n\t */\n\tfunction squash(node) {\n\t\tfor (var i = node.children.length - 1; i >= 0; i--) {\n\t\t\t/** @type AbbreviationNode */\n\t\t\tvar n = node.children[i];\n\t\t\tif (n.isGroup()) {\n\t\t\t\tn.replace(squash(n).children);\n\t\t\t} else if (n.isEmpty()) {\n\t\t\t\tn.remove();\n\t\t\t}\n\t\t}\n\t\t\n\t\t_.each(node.children, squash);\n\t\t\n\t\treturn node;\n\t}\n\t\n\tfunction isAllowedChar(ch) {\n\t\tvar charCode = ch.charCodeAt(0);\n\t\tvar specialChars = '#.*:$-_!@|%';\n\t\t\n\t\treturn (charCode > 64 && charCode < 91)       // uppercase letter\n\t\t\t\t|| (charCode > 96 && charCode < 123)  // lowercase letter\n\t\t\t\t|| (charCode > 47 && charCode < 58)   // number\n\t\t\t\t|| specialChars.indexOf(ch) != -1;    // special character\n\t}\n\t\n\t// XXX add counter replacer function as output processor\n\toutputProcessors.push(function(text, node) {\n\t\treturn require('utils').replaceCounter(text, node.counter, node.maxCount);\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses abbreviation into tree with respect of groups, \n\t\t * text nodes and attributes. Each node of the tree is a single \n\t\t * abbreviation. Tree represents actual structure of the outputted \n\t\t * result\n\t\t * @memberOf abbreviationParser\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {Object} options Additional options for parser and processors\n\t\t * \n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\tparse: function(abbr, options) {\n\t\t\toptions = options || {};\n\t\t\t\n\t\t\tvar tree = parseAbbreviation(abbr);\n\t\t\t\n\t\t\tif (options.contextNode) {\n\t\t\t\t// add info about context node –\n\t\t\t\t// a parent XHTML node in editor inside which abbreviation is \n\t\t\t\t// expanded\n\t\t\t\ttree._name = options.contextNode.name;\n\t\t\t\tvar attrLookup = {};\n\t\t\t\t_.each(tree._attributes, function(attr) {\n\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t_.each(options.contextNode.attributes, function(attr) {\n\t\t\t\t\tif (attr.name in attrLookup) {\n\t\t\t\t\t\tattrLookup[attr.name].value = attr.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tattr = _.clone(attr);\n\t\t\t\t\t\ttree._attributes.push(attr);\n\t\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// apply preprocessors\n\t\t\t_.each(preprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\ttree = squash(unroll(tree));\n\t\t\t\n\t\t\t// apply postprocessors\n\t\t\t_.each(postprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\tAbbreviationNode: AbbreviationNode,\n\t\t\n\t\t/**\n\t\t * Add new abbreviation preprocessor. <i>Preprocessor</i> is a function\n\t\t * that applies to a parsed abbreviation tree right after it get parsed.\n\t\t * The passed tree is in unoptimized state.\n\t\t * @param {Function} fn Preprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPreprocessor: function(fn) {\n\t\t\tif (!_.include(preprocessors, fn))\n\t\t\t\tpreprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered preprocessor\n\t\t */\n\t\tremoveFilter: function(fn) {\n\t\t\tpreprocessor = _.without(preprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new abbreviation postprocessor. <i>Postprocessor</i> is a \n\t\t * functinon that applies to <i>optimized</i> parsed abbreviation tree\n\t\t * right before it returns from <code>parse()</code> method\n\t\t * @param {Function} fn Postprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPostprocessor: function(fn) {\n\t\t\tif (!_.include(postprocessors, fn))\n\t\t\t\tpostprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered postprocessor function\n\t\t */\n\t\tremovePostprocessor: function(fn) {\n\t\t\tpostprocessors = _.without(postprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers output postprocessor. <i>Output processor</i> is a \n\t\t * function that applies to output part (<code>start</code>, \n\t\t * <code>end</code> and <code>content</code>) when \n\t\t * <code>AbbreviationNode.toString()</code> method is called\n\t\t */\n\t\taddOutputProcessor: function(fn) {\n\t\t\tif (!_.include(outputProcessors, fn))\n\t\t\t\toutputProcessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered output processor\n\t\t */\n\t\tremoveOutputProcessor: function(fn) {\n\t\t\toutputProcessors = _.without(outputProcessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is valid symbol for abbreviation expression\n\t\t * @param {String} ch\n\t\t * @return {Boolean}\n\t\t */\n\t\tisAllowedChar: function(ch) {\n\t\t\tch = String(ch); // convert Java object to JS\n\t\t\treturn isAllowedChar(ch) || ~'>+^[](){}'.indexOf(ch);\n\t\t}\n\t};\n});/**\n * Processor function that matches parsed <code>AbbreviationNode</code>\n * against resources defined in <code>resource</code> module\n * @param {Function} require\n * @param {Underscore} _\n */ \nemmet.exec(function(require, _) {\n\t/**\n\t * Finds matched resources for child nodes of passed <code>node</code> \n\t * element. A matched resource is a reference to <i>snippets.json</i> entry\n\t * that describes output of parsed node \n\t * @param {AbbreviationNode} node\n\t * @param {String} syntax\n\t */\n\tfunction matchResources(node, syntax) {\n\t\tvar resources = require('resources');\n\t\tvar elements = require('elements');\n\t\tvar parser = require('abbreviationParser');\n\t\t\n\t\t// do a shallow copy because the children list can be modified during\n\t\t// resource matching\n\t\t_.each(_.clone(node.children), /** @param {AbbreviationNode} child */ function(child) {\n\t\t\tvar r = resources.getMatchedResource(child, syntax);\n\t\t\tif (_.isString(r)) {\n\t\t\t\tchild.data('resource', elements.create('snippet', r));\n\t\t\t} else if (elements.is(r, 'reference')) {\n\t\t\t\t// it’s a reference to another abbreviation:\n\t\t\t\t// parse it and insert instead of current child\n\t\t\t\t/** @type AbbreviationNode */\n\t\t\t\tvar subtree = parser.parse(r.data, {\n\t\t\t\t\tsyntax: syntax\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// if context element should be repeated, check if we need to \n\t\t\t\t// transfer repeated element to specific child node\n\t\t\t\tif (child.repeatCount > 1) {\n\t\t\t\t\tvar repeatedChildren = subtree.findAll(function(node) {\n\t\t\t\t\t\treturn node.hasImplicitRepeat;\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t_.each(repeatedChildren, function(node) {\n\t\t\t\t\t\tnode.repeatCount = child.repeatCount;\n\t\t\t\t\t\tnode.hasImplicitRepeat = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// move child‘s children into the deepest child of new subtree\n\t\t\t\tvar deepestChild = subtree.deepestChild();\n\t\t\t\tif (deepestChild) {\n\t\t\t\t\t_.each(child.children, function(c) {\n\t\t\t\t\t\tdeepestChild.addChild(c);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// copy current attributes to children\n\t\t\t\t_.each(subtree.children, function(node) {\n\t\t\t\t\t_.each(child.attributeList(), function(attr) {\n\t\t\t\t\t\tnode.attribute(attr.name, attr.value);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tchild.replace(subtree.children);\n\t\t\t} else {\n\t\t\t\tchild.data('resource', r);\n\t\t\t}\n\t\t\t\n\t\t\tmatchResources(child, syntax);\n\t\t});\n\t}\n\t\n\t// XXX register abbreviation filter that creates references to resources\n\t// on abbreviation nodes\n\t/**\n\t * @param {AbbreviationNode} tree\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar syntax = options.syntax || emmet.defaultSyntax();\n\t\tmatchResources(tree, syntax);\n\t});\n\t\n});/**\n * Pasted content abbreviation processor. A pasted content is a content that\n * should be inserted into implicitly repeated abbreviation nodes.\n * This processor powers “Wrap With Abbreviation” action\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar parser = require('abbreviationParser');\n\tvar outputPlaceholder = '$#';\n\t\n\t/**\n\t * Locates output placeholders inside text\n\t * @param {String} text\n\t * @returns {Array} Array of ranges of output placeholder in text\n\t */\n\tfunction locateOutputPlaceholder(text) {\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(text);\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tif (stream.peek() == '\\\\') {\n\t\t\t\tstream.next();\n\t\t\t} else {\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tif (stream.match(outputPlaceholder, true)) {\n\t\t\t\t\tresult.push(range.create(stream.start, outputPlaceholder));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Replaces output placeholders inside <code>source</code> with \n\t * <code>value</code>\n\t * @param {String} source\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction replaceOutputPlaceholders(source, value) {\n\t\tvar utils = require('utils');\n\t\tvar ranges = locateOutputPlaceholder(source);\n\t\t\n\t\tranges.reverse();\n\t\t_.each(ranges, function(r) {\n\t\t\tsource = utils.replaceSubstring(source, value, r);\n\t\t});\n\t\t\n\t\treturn source;\n\t}\n\t\n\t/**\n\t * Check if parsed node contains output placeholder – a target where\n\t * pasted content should be inserted\n\t * @param {AbbreviationNode} node\n\t * @returns {Boolean}\n\t */\n\tfunction hasOutputPlaceholder(node) {\n\t\tif (locateOutputPlaceholder(node.content).length)\n\t\t\treturn true;\n\t\t\n\t\t// check if attributes contains placeholder\n\t\treturn !!_.find(node.attributeList(), function(attr) {\n\t\t\treturn !!locateOutputPlaceholder(attr.value).length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Insert pasted content into correct positions of parsed node\n\t * @param {AbbreviationNode} node\n\t * @param {String} content\n\t * @param {Boolean} overwrite Overwrite node content if no value placeholders\n\t * found instead of appending to existing content\n\t */\n\tfunction insertPastedContent(node, content, overwrite) {\n\t\tvar nodesWithPlaceholders = node.findAll(function(item) {\n\t\t\treturn hasOutputPlaceholder(item);\n\t\t});\n\t\t\n\t\tif (hasOutputPlaceholder(node))\n\t\t\tnodesWithPlaceholders.unshift(node);\n\t\t\n\t\tif (nodesWithPlaceholders.length) {\n\t\t\t_.each(nodesWithPlaceholders, function(item) {\n\t\t\t\titem.content = replaceOutputPlaceholders(item.content, content);\n\t\t\t\t_.each(item._attributes, function(attr) {\n\t\t\t\t\tattr.value = replaceOutputPlaceholders(attr.value, content);\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// on output placeholders in subtree, insert content in the deepest\n\t\t\t// child node\n\t\t\tvar deepest = node.deepestChild() || node;\n\t\t\tif (overwrite) {\n\t\t\t\tdeepest.content = content;\n\t\t\t} else {\n\t\t\t\tdeepest.content = require('abbreviationUtils').insertChildContent(deepest.content, content);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPreprocessor(function(tree, options) {\n\t\tif (options.pastedContent) {\n\t\t\tvar utils = require('utils');\n\t\t\tvar lines = _.map(utils.splitByLines(options.pastedContent, true), utils.trim);\n\t\t\t\n\t\t\t// set repeat count for implicitly repeated elements before\n\t\t\t// tree is unrolled\n\t\t\ttree.findAll(function(item) {\n\t\t\t\tif (item.hasImplicitRepeat) {\n\t\t\t\t\titem.data('paste', lines);\n\t\t\t\t\treturn item.repeatCount = lines.length;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPostprocessor(function(tree, options) {\n\t\t// for each node with pasted content, update text data\n\t\tvar targets = tree.findAll(function(item) {\n\t\t\tvar pastedContentObj = item.data('paste');\n\t\t\tvar pastedContent = '';\n\t\t\tif (_.isArray(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj[item.counter - 1];\n\t\t\t} else if (_.isFunction(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj(item.counter - 1, item.content);\n\t\t\t} else if (pastedContentObj) {\n\t\t\t\tpastedContent = pastedContentObj;\n\t\t\t}\n\t\t\t\n\t\t\tif (pastedContent) {\n\t\t\t\tinsertPastedContent(item, pastedContent, !!item.data('pasteOverwrites'));\n\t\t\t}\n\t\t\t\n\t\t\titem.data('paste', null);\n\t\t\treturn !!pastedContentObj;\n\t\t});\n\t\t\n\t\tif (!targets.length && options.pastedContent) {\n\t\t\t// no implicitly repeated elements, put pasted content in\n\t\t\t// the deepest child\n\t\t\tinsertPastedContent(tree, options.pastedContent);\n\t\t}\n\t});\n});/**\n * Resolves tag names in abbreviations with implied name\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Resolves implicit node names in parsed tree\n\t * @param {AbbreviationNode} tree\n\t */\n\tfunction resolveNodeNames(tree) {\n\t\tvar tagName = require('tagName');\n\t\t_.each(tree.children, function(node) {\n\t\t\tif (node.hasImplicitName() || node.data('forceNameResolving')) {\n\t\t\t\tnode._name = tagName.resolve(node.parent.name());\n\t\t\t}\n\t\t\tresolveNodeNames(node);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('abbreviationParser').addPostprocessor(resolveNodeNames);\n});/**\n * @author Stoyan Stefanov\n * @link https://github.com/stoyan/etc/tree/master/cssex\n */\n\nemmet.define('cssParser', function(require, _) {\nvar walker, tokens = [], isOp, isNameChar, isDigit;\n    \n    // walks around the source\n    walker = {\n        lines: null,\n        total_lines: 0,\n        linenum: -1,\n        line: '',\n        ch: '',\n        chnum: -1,\n        init: function (source) {\n            var me = walker;\n        \n            // source, yumm\n            me.lines = source\n                .replace(/\\r\\n/g, '\\n')\n                .replace(/\\r/g, '\\n')\n                .split('\\n');\n            me.total_lines = me.lines.length;\n        \n            // reset\n            me.chnum = -1;\n            me.linenum = -1;\n            me.ch = '';\n            me.line = '';\n        \n            // advance\n            me.nextLine();\n            me.nextChar();\n        },\n        nextLine: function () {\n            var me = this;\n            me.linenum += 1;\n            if (me.total_lines <= me.linenum) {\n                me.line = false;\n            } else {\n                me.line = me.lines[me.linenum];\n            }\n            if (me.chnum !== -1) {\n                me.chnum = 0;\n            }\n            return me.line;\n        }, \n        nextChar: function () {\n            var me = this;\n            me.chnum += 1;\n            while (me.line.charAt(me.chnum) === '') {\n                if (this.nextLine() === false) {\n                    me.ch = false;\n                    return false; // end of source\n                }\n                me.chnum = -1;\n                me.ch = '\\n';\n                return '\\n';\n            }\n            me.ch = me.line.charAt(me.chnum);\n            return me.ch;\n        },\n        peek: function() {\n            return this.line.charAt(this.chnum + 1);\n        }\n    };\n\n    // utility helpers\n    isNameChar = function (c) {\n    \t// be more tolerate for name tokens: allow & character for LESS syntax\n        return (c == '&' || c === '_' || c === '-' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));\n    };\n\n    isDigit = function (ch) {\n        return (ch !== false && ch >= '0' && ch <= '9');\n    };  \n\n    isOp = (function () {\n        var opsa = \"{}[]()+*=.,;:>~|\\\\%$#@^!\".split(''),\n            opsmatcha = \"*^|$~\".split(''),\n            ops = {},\n            opsmatch = {},\n            i = 0;\n        for (; i < opsa.length; i += 1) {\n            ops[opsa[i]] = true;\n        }\n        for (i = 0; i < opsmatcha.length; i += 1) {\n            opsmatch[opsmatcha[i]] = true;\n        }\n        return function (ch, matchattr) {\n            if (matchattr) {\n                return !!opsmatch[ch];\n            }\n            return !!ops[ch];\n        };\n    }());\n    \n    // shorthands\n    function isset(v) {\n        return typeof v !== 'undefined';\n    }\n    function getConf() {\n        return {\n            'char': walker.chnum,\n            line: walker.linenum\n        };\n    }\n\n\n    // creates token objects and pushes them to a list\n    function tokener(value, type, conf) {\n        var w = walker, c = conf || {};\n        tokens.push({\n            charstart: isset(c['char']) ? c['char'] : w.chnum,\n            charend:   isset(c.charend) ? c.charend : w.chnum,\n            linestart: isset(c.line)    ? c.line    : w.linenum,\n            lineend:   isset(c.lineend) ? c.lineend : w.linenum,\n            value:     value,\n            type:      type || value\n        });\n    }\n    \n    // oops\n    function error(m, config) { \n        var w = walker,\n            conf = config || {},\n            c = isset(conf['char']) ? conf['char'] : w.chnum,\n            l = isset(conf.line) ? conf.line : w.linenum;\n        return {\n            name: \"ParseError\",\n            message: m + \" at line \" + (l + 1) + ' char ' + (c + 1),\n            walker: w,\n            tokens: tokens\n        };\n    }\n\n\n    // token handlers follow for:\n    // white space, comment, string, identifier, number, operator\n    function white() {\n    \n        var c = walker.ch,\n            token = '',\n            conf = getConf();\n    \n        while (c === \" \" || c === \"\\t\") {\n            token += c;\n            c = walker.nextChar();\n        }\n    \n        tokener(token, 'white', conf);\n    \n    }\n\n    function comment() {\n    \n        var w = walker,\n            c = w.ch,\n            token = c,\n            cnext,\n            conf = getConf();    \n     \n        cnext = w.nextChar();\n\n        if (cnext === '/') {\n            // inline comment in SCSS and such\n            token += cnext;\n            var pk = w.peek();\n            while (pk && pk !== '\\n') {\n                token += cnext;\n                cnext = w.nextChar();\n                pk = w.peek();\n            }\n        } else if (cnext === '*') {\n            // multiline CSS commment\n            while (!(c === \"*\" && cnext === \"/\")) {\n                token += cnext;\n                c = cnext;\n                cnext = w.nextChar();        \n            }            \n        } else {\n            // oops, not a comment, just a /\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, token, conf);\n        }\n        \n        token += cnext;\n        w.nextChar();\n        tokener(token, 'comment', conf);\n    }\n\n    function str() {\n        var w = walker,\n            c = w.ch,\n            q = c,\n            token = c,\n            cnext,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== q) {\n            \n            if (c === '\\n') {\n                cnext = w.nextChar();\n                if (cnext === \"\\\\\") {\n                    token += c + cnext;\n                } else {\n                    // end of line with no \\ escape = bad\n                    throw error(\"Unterminated string\", conf);\n                }\n            } else {\n                if (c === \"\\\\\") {\n                    token += c + w.nextChar();\n                } else {\n                    token += c;\n                }\n            }\n        \n            c = w.nextChar();\n        \n        }\n        token += c;\n        w.nextChar();\n        tokener(token, 'string', conf);\n    }\n    \n    function brace() {\n        var w = walker,\n            c = w.ch,\n            depth = 0,\n            token = c,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== ')' && !depth) {\n        \tif (c === '(') {\n        \t\tdepth++;\n        \t} else if (c === ')') {\n        \t\tdepth--;\n        \t} else if (c === false) {\n        \t\tthrow error(\"Unterminated brace\", conf);\n        \t}\n        \t\n        \ttoken += c;\n            c = w.nextChar();\n        }\n        \n        token += c;\n        w.nextChar();\n        tokener(token, 'brace', conf);\n    }\n\n    function identifier(pre) {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = (pre) ? pre + c : c;\n            \n        c = w.nextChar();\n    \n        if (pre) { // adjust token position\n        \tconf['char'] -= pre.length;\n        }\n        \n        while (isNameChar(c) || isDigit(c)) {\n            token += c;\n            c = w.nextChar();\n        }\n    \n        tokener(token, 'identifier', conf);    \n    }\n\n    function num() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            point = token === '.',\n            nondigit;\n        \n        c = w.nextChar();\n        nondigit = !isDigit(c);\n    \n        // .2px or .classname?\n        if (point && nondigit) {\n            // meh, NaN, could be a class name, so it's an operator for now\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, '.', conf);    \n        }\n        \n        // -2px or -moz-something\n        if (token === '-' && nondigit) {\n            return identifier('-');\n        }\n    \n        while (c !== false && (isDigit(c) || (!point && c === '.'))) { // not end of source && digit or first instance of .\n            if (c === '.') {\n                point = true;\n            }\n            token += c;\n            c = w.nextChar();\n        }\n\n        tokener(token, 'number', conf);    \n    \n    }\n\n    function op() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            next = w.nextChar();\n            \n        if (next === \"=\" && isOp(token, true)) {\n            token += next;\n            tokener(token, 'match', conf);\n            w.nextChar();\n            return;\n        } \n        \n        conf.charend = conf['char'] + 1;\n        conf.lineend = conf.line;    \n        tokener(token, token, conf);\n    }\n\n\n    // call the appropriate handler based on the first character in a token suspect\n    function tokenize() {\n\n        var ch = walker.ch;\n    \n        if (ch === \" \" || ch === \"\\t\") {\n            return white();\n        }\n\n        if (ch === '/') {\n            return comment();\n        } \n\n        if (ch === '\"' || ch === \"'\") {\n            return str();\n        }\n        \n        if (ch === '(') {\n            return brace();\n        }\n    \n        if (ch === '-' || ch === '.' || isDigit(ch)) { // tricky - char: minus (-1px) or dash (-moz-stuff)\n            return num();\n        }\n    \n        if (isNameChar(ch)) {\n            return identifier();\n        }\n\n        if (isOp(ch)) {\n            return op();\n        }\n        \n        if (ch === \"\\n\") {\n            tokener(\"line\");\n            walker.nextChar();\n            return;\n        }\n        \n        throw error(\"Unrecognized character\");\n    }\n    \n    /**\n\t * Returns newline character at specified position in content\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @return {String}\n\t */\n\tfunction getNewline(content, pos) {\n\t\treturn content.charAt(pos) == '\\r' && content.charAt(pos + 1) == '\\n' \n\t\t\t? '\\r\\n' \n\t\t\t: content.charAt(pos);\n\t}\n\n    return {\n    \t/**\n    \t * @param source\n    \t * @returns\n    \t * @memberOf emmet.cssParser\n    \t */\n        lex: function (source) {\n            walker.init(source);\n            tokens = [];\n            while (walker.ch !== false) {\n                tokenize();            \n            }\n            return tokens;\n        },\n        \n        /**\n         * Tokenizes CSS source\n         * @param {String} source\n         * @returns {Array}\n         */\n        parse: function(source) {\n        \t// transform tokens\n\t \t\tvar pos = 0;\n\t \t\treturn _.map(this.lex(source), function(token) {\n\t \t\t\tif (token.type == 'line') {\n\t \t\t\t\ttoken.value = getNewline(source, pos);\n\t \t\t\t}\n\t \t\t\t\n\t \t\t\treturn {\n\t \t\t\t\ttype: token.type,\n\t \t\t\t\tstart: pos,\n\t \t\t\t\tend: (pos += token.value.length)\n\t \t\t\t};\n\t\t\t});\n\t\t},\n        \n        toSource: function (toks) {\n            var i = 0, max = toks.length, t, src = '';\n            for (; i < max; i += 1) {\n                t = toks[i];\n                if (t.type === 'line') {\n                    src += '\\n';\n                } else {\n                    src += t.value;\n                }\n            }\n            return src;\n        }\n    };\n});/**\n * HTML tokenizer by Marijn Haverbeke\n * http://codemirror.net/\n * @constructor\n * @memberOf __xmlParseDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('xmlParser', function(require, _) {\n\tvar Kludges = {\n\t\tautoSelfClosers : {},\n\t\timplicitlyClosed : {},\n\t\tcontextGrabbers : {},\n\t\tdoNotIndent : {},\n\t\tallowUnquoted : true,\n\t\tallowMissing : true\n\t};\n\n\t// Return variables for tokenizers\n\tvar tagName = null, type = null;\n\n\tfunction inText(stream, state) {\n\t\tfunction chain(parser) {\n\t\t\tstate.tokenize = parser;\n\t\t\treturn parser(stream, state);\n\t\t}\n\n\t\tvar ch = stream.next();\n\t\tif (ch == \"<\") {\n\t\t\tif (stream.eat(\"!\")) {\n\t\t\t\tif (stream.eat(\"[\")) {\n\t\t\t\t\tif (stream.match(\"CDATA[\"))\n\t\t\t\t\t\treturn chain(inBlock(\"atom\", \"]]>\"));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn null;\n\t\t\t\t} else if (stream.match(\"--\"))\n\t\t\t\t\treturn chain(inBlock(\"comment\", \"-->\"));\n\t\t\t\telse if (stream.match(\"DOCTYPE\", true, true)) {\n\t\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\t\treturn chain(doctype(1));\n\t\t\t\t} else\n\t\t\t\t\treturn null;\n\t\t\t} else if (stream.eat(\"?\")) {\n\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\tstate.tokenize = inBlock(\"meta\", \"?>\");\n\t\t\t\treturn \"meta\";\n\t\t\t} else {\n\t\t\t\ttype = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n\t\t\t\tstream.eatSpace();\n\t\t\t\ttagName = \"\";\n\t\t\t\tvar c;\n\t\t\t\twhile ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)))\n\t\t\t\t\ttagName += c;\n\t\t\t\tstate.tokenize = inTag;\n\t\t\t\treturn \"tag\";\n\t\t\t}\n\t\t} else if (ch == \"&\") {\n\t\t\tvar ok;\n\t\t\tif (stream.eat(\"#\")) {\n\t\t\t\tif (stream.eat(\"x\")) {\n\t\t\t\t\tok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n\t\t\t\t} else {\n\t\t\t\t\tok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n\t\t\t}\n\t\t\treturn ok ? \"atom\" : \"error\";\n\t\t} else {\n\t\t\tstream.eatWhile(/[^&<]/);\n\t\t\treturn \"text\";\n\t\t}\n\t}\n\n\tfunction inTag(stream, state) {\n\t\tvar ch = stream.next();\n\t\tif (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n\t\t\tstate.tokenize = inText;\n\t\t\ttype = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n\t\t\treturn \"tag\";\n\t\t} else if (ch == \"=\") {\n\t\t\ttype = \"equals\";\n\t\t\treturn null;\n\t\t} else if (/[\\'\\\"]/.test(ch)) {\n\t\t\tstate.tokenize = inAttribute(ch);\n\t\t\treturn state.tokenize(stream, state);\n\t\t} else {\n\t\t\tstream.eatWhile(/[^\\s\\u00a0=<>\\\"\\'\\/?]/);\n\t\t\treturn \"word\";\n\t\t}\n\t}\n\n\tfunction inAttribute(quote) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.next() == quote) {\n\t\t\t\t\tstate.tokenize = inTag;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"string\";\n\t\t};\n\t}\n\n\tfunction inBlock(style, terminator) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.match(terminator)) {\n\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstream.next();\n\t\t\t}\n\t\t\treturn style;\n\t\t};\n\t}\n\t\n\tfunction doctype(depth) {\n\t\treturn function(stream, state) {\n\t\t\tvar ch;\n\t\t\twhile ((ch = stream.next()) != null) {\n\t\t\t\tif (ch == \"<\") {\n\t\t\t\t\tstate.tokenize = doctype(depth + 1);\n\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t} else if (ch == \">\") {\n\t\t\t\t\tif (depth == 1) {\n\t\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.tokenize = doctype(depth - 1);\n\t\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"meta\";\n\t\t};\n\t}\n\n\tvar curState = null, setStyle;\n\tfunction pass() {\n\t\tfor (var i = arguments.length - 1; i >= 0; i--)\n\t\t\tcurState.cc.push(arguments[i]);\n\t}\n\t\n\tfunction cont() {\n\t\tpass.apply(null, arguments);\n\t\treturn true;\n\t}\n\n\tfunction pushContext(tagName, startOfLine) {\n\t\tvar noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) \n\t\t\t|| (curState.context && curState.context.noIndent);\n\t\tcurState.context = {\n\t\t\tprev : curState.context,\n\t\t\ttagName : tagName,\n\t\t\tindent : curState.indented,\n\t\t\tstartOfLine : startOfLine,\n\t\t\tnoIndent : noIndent\n\t\t};\n\t}\n\t\n\tfunction popContext() {\n\t\tif (curState.context)\n\t\t\tcurState.context = curState.context.prev;\n\t}\n\n\tfunction element(type) {\n\t\tif (type == \"openTag\") {\n\t\t\tcurState.tagName = tagName;\n\t\t\treturn cont(attributes, endtag(curState.startOfLine));\n\t\t} else if (type == \"closeTag\") {\n\t\t\tvar err = false;\n\t\t\tif (curState.context) {\n\t\t\t\tif (curState.context.tagName != tagName) {\n\t\t\t\t\tif (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {\n\t\t\t\t\t\tpopContext();\n\t\t\t\t\t}\n\t\t\t\t\terr = !curState.context || curState.context.tagName != tagName;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(endclosetag(err));\n\t\t}\n\t\treturn cont();\n\t}\n\t\n\tfunction endtag(startOfLine) {\n\t\treturn function(type) {\n\t\t\tif (type == \"selfcloseTag\"\n\t\t\t\t\t|| (type == \"endTag\" && Kludges.autoSelfClosers\n\t\t\t\t\t\t\t.hasOwnProperty(curState.tagName\n\t\t\t\t\t\t\t\t\t.toLowerCase()))) {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\tpushContext(curState.tagName, startOfLine);\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\treturn cont();\n\t\t};\n\t}\n\t\n\tfunction endclosetag(err) {\n\t\treturn function(type) {\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tpopContext();\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(arguments.callee);\n\t\t};\n\t}\n\t\n\tfunction maybePopContext(nextTagName) {\n\t\tvar parentTagName;\n\t\twhile (true) {\n\t\t\tif (!curState.context) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparentTagName = curState.context.tagName.toLowerCase();\n\t\t\tif (!Kludges.contextGrabbers.hasOwnProperty(parentTagName)\n\t\t\t\t\t|| !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpopContext();\n\t\t}\n\t}\n\n\tfunction attributes(type) {\n\t\tif (type == \"word\") {\n\t\t\tsetStyle = \"attribute\";\n\t\t\treturn cont(attribute, attributes);\n\t\t}\n\t\tif (type == \"endTag\" || type == \"selfcloseTag\")\n\t\t\treturn pass();\n\t\tsetStyle = \"error\";\n\t\treturn cont(attributes);\n\t}\n\t\n\tfunction attribute(type) {\n\t\tif (type == \"equals\")\n\t\t\treturn cont(attvalue, attributes);\n\t\tif (!Kludges.allowMissing)\n\t\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfcloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvalue(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\tif (type == \"word\" && Kludges.allowUnquoted) {\n\t\t\tsetStyle = \"string\";\n\t\t\treturn cont();\n\t\t}\n\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfCloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvaluemaybe(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\telse\n\t\t\treturn pass();\n\t}\n\t\n\tfunction startState() {\n\t\treturn {\n\t\t\ttokenize : inText,\n\t\t\tcc : [],\n\t\t\tindented : 0,\n\t\t\tstartOfLine : true,\n\t\t\ttagName : null,\n\t\t\tcontext : null\n\t\t};\n\t}\n\t\n\tfunction token(stream, state) {\n\t\tif (stream.sol()) {\n\t\t\tstate.startOfLine = true;\n\t\t\tstate.indented = 0;\n\t\t}\n\t\t\n\t\tif (stream.eatSpace())\n\t\t\treturn null;\n\n\t\tsetStyle = type = tagName = null;\n\t\tvar style = state.tokenize(stream, state);\n\t\tstate.type = type;\n\t\tif ((style || type) && style != \"comment\") {\n\t\t\tcurState = state;\n\t\t\twhile (true) {\n\t\t\t\tvar comb = state.cc.pop() || element;\n\t\t\t\tif (comb(type || style))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstate.startOfLine = false;\n\t\treturn setStyle || style;\n\t}\n\n\treturn {\n\t\t/**\n\t\t * @memberOf emmet.xmlParser\n\t\t * @returns\n\t\t */\n\t\tparse: function(data, offset) {\n\t\t\toffset = offset || 0;\n\t\t\tvar state = startState();\n\t\t\tvar stream = require('stringStream').create(data);\n\t\t\tvar tokens = [];\n\t\t\twhile (!stream.eol()) {\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: token(stream, state),\n\t\t\t\t\tstart: stream.start + offset,\n\t\t\t\t\tend: stream.pos + offset\n\t\t\t\t});\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn tokens;\n\t\t}\t\t\n\t};\n});\n/*!\n * string_score.js: String Scoring Algorithm 0.1.10 \n *\n * http://joshaven.com/string_score\n * https://github.com/joshaven/string_score\n *\n * Copyright (C) 2009-2011 Joshaven Potter <yourtech@gmail.com>\n * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\n * MIT license: http://www.opensource.org/licenses/mit-license.php\n *\n * Date: Tue Mar 1 2011\n*/\n\n/**\n * Scores a string against another string.\n *  'Hello World'.score('he');     //=> 0.5931818181818181\n *  'Hello World'.score('Hello');  //=> 0.7318181818181818\n */\nemmet.define('string-score', function(require, _) {\n\treturn {\n\t\tscore: function(string, abbreviation, fuzziness) {\n\t\t\t// If the string is equal to the abbreviation, perfect match.\n\t\t\t  if (string == abbreviation) {return 1;}\n\t\t\t  //if it's not a perfect match and is empty return 0\n\t\t\t  if(abbreviation == \"\") {return 0;}\n\n\t\t\t  var total_character_score = 0,\n\t\t\t      abbreviation_length = abbreviation.length,\n\t\t\t      string_length = string.length,\n\t\t\t      start_of_string_bonus,\n\t\t\t      abbreviation_score,\n\t\t\t      fuzzies=1,\n\t\t\t      final_score;\n\t\t\t  \n\t\t\t  // Walk through abbreviation and add up scores.\n\t\t\t  for (var i = 0,\n\t\t\t         character_score/* = 0*/,\n\t\t\t         index_in_string/* = 0*/,\n\t\t\t         c/* = ''*/,\n\t\t\t         index_c_lowercase/* = 0*/,\n\t\t\t         index_c_uppercase/* = 0*/,\n\t\t\t         min_index/* = 0*/;\n\t\t\t     i < abbreviation_length;\n\t\t\t     ++i) {\n\t\t\t    \n\t\t\t    // Find the first case-insensitive match of a character.\n\t\t\t    c = abbreviation.charAt(i);\n\t\t\t    \n\t\t\t    index_c_lowercase = string.indexOf(c.toLowerCase());\n\t\t\t    index_c_uppercase = string.indexOf(c.toUpperCase());\n\t\t\t    min_index = Math.min(index_c_lowercase, index_c_uppercase);\n\t\t\t    index_in_string = (min_index > -1) ? min_index : Math.max(index_c_lowercase, index_c_uppercase);\n\t\t\t    \n\t\t\t    if (index_in_string === -1) { \n\t\t\t      if (fuzziness) {\n\t\t\t        fuzzies += 1-fuzziness;\n\t\t\t        continue;\n\t\t\t      } else {\n\t\t\t        return 0;\n\t\t\t      }\n\t\t\t    } else {\n\t\t\t      character_score = 0.1;\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Set base score for matching 'c'.\n\t\t\t    \n\t\t\t    // Same case bonus.\n\t\t\t    if (string[index_in_string] === c) { \n\t\t\t      character_score += 0.1; \n\t\t\t    }\n\t\t\t    \n\t\t\t    // Consecutive letter & start-of-string Bonus\n\t\t\t    if (index_in_string === 0) {\n\t\t\t      // Increase the score when matching first character of the remainder of the string\n\t\t\t      character_score += 0.6;\n\t\t\t      if (i === 0) {\n\t\t\t        // If match is the first character of the string\n\t\t\t        // & the first character of abbreviation, add a\n\t\t\t        // start-of-string match bonus.\n\t\t\t        start_of_string_bonus = 1; //true;\n\t\t\t      }\n\t\t\t    }\n\t\t\t    else {\n\t\t\t  // Acronym Bonus\n\t\t\t  // Weighing Logic: Typing the first character of an acronym is as if you\n\t\t\t  // preceded it with two perfect character matches.\n\t\t\t  if (string.charAt(index_in_string - 1) === ' ') {\n\t\t\t    character_score += 0.8; // * Math.min(index_in_string, 5); // Cap bonus at 0.4 * 5\n\t\t\t  }\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Left trim the already matched part of the string\n\t\t\t    // (forces sequential matching).\n\t\t\t    string = string.substring(index_in_string + 1, string_length);\n\t\t\t    \n\t\t\t    total_character_score += character_score;\n\t\t\t  } // end of for loop\n\t\t\t  \n\t\t\t  // Uncomment to weigh smaller words higher.\n\t\t\t  // return total_character_score / string_length;\n\t\t\t  \n\t\t\t  abbreviation_score = total_character_score / abbreviation_length;\n\t\t\t  //percentage_of_matched_string = abbreviation_length / string_length;\n\t\t\t  //word_score = abbreviation_score * percentage_of_matched_string;\n\t\t\t  \n\t\t\t  // Reduce penalty for longer strings.\n\t\t\t  //final_score = (word_score + abbreviation_score) / 2;\n\t\t\t  final_score = ((abbreviation_score * (abbreviation_length / string_length)) + abbreviation_score) / 2;\n\t\t\t  \n\t\t\t  final_score = final_score / fuzzies;\n\t\t\t  \n\t\t\t  if (start_of_string_bonus && (final_score + 0.15 < 1)) {\n\t\t\t    final_score += 0.15;\n\t\t\t  }\n\t\t\t  \n\t\t\t  return final_score;\n\t\t}\n\t};\n});/**\n * Utility module for Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('utils', function(require, _) {\n\t/** \n\t * Special token used as a placeholder for caret positions inside \n\t * generated output \n\t */\n\tvar caretPlaceholder = '${0}';\n\t\n\t/**\n\t * A simple string builder, optimized for faster text concatenation\n\t * @param {String} value Initial value\n\t */\n\tfunction StringBuilder(value) {\n\t\tthis._data = [];\n\t\tthis.length = 0;\n\t\t\n\t\tif (value)\n\t\t\tthis.append(value);\n\t}\n\t\n\tStringBuilder.prototype = {\n\t\t/**\n\t\t * Append string\n\t\t * @param {String} text\n\t\t */\n\t\tappend: function(text) {\n\t\t\tthis._data.push(text);\n\t\t\tthis.length += text.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this._data.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/** @memberOf utils */\n\t\treTag: /<\\/?[\\w:\\-]+(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*\\s*(\\/?)>$/,\n\t\t\n\t\t/**\n\t\t * Test if passed string ends with XHTML tag. This method is used for testing\n\t\t * '>' character: it belongs to tag or it's a part of abbreviation? \n\t\t * @param {String} str\n\t\t * @return {Boolean}\n\t\t */\n\t\tendsWithTag: function(str) {\n\t\t\treturn this.reTag.test(str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is a number\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisNumeric: function(ch) {\n\t\t\tif (typeof(ch) == 'string')\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t\n\t\t\treturn (ch && ch > 47 && ch < 58);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Trim whitespace from string\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrim: function(text) {\n\t\t\treturn (text || \"\").replace(/^\\s+|\\s+$/g, \"\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns newline character\n\t\t * @returns {String}\n\t\t */\n\t\tgetNewline: function() {\n\t\t\tvar res = require('resources');\n\t\t\tif (!res) {\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t\t\n\t\t\tvar nl = res.getVariable('newline');\n\t\t\treturn _.isString(nl) ? nl : '\\n';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new newline character that will be used in output\n\t\t * @param {String} str\n\t\t */\n\t\tsetNewline: function(str) {\n\t\t\tvar res = require('resources');\n\t\t\tres.setVariable('newline', str);\n\t\t\tres.setVariable('nl', str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split text into lines. Set <code>remove_empty</code> to true to filter\n\t\t * empty lines\n\t\t * @param {String} text Text to split\n\t\t * @param {Boolean} removeEmpty Remove empty lines from result\n\t\t * @return {Array}\n\t\t */\n\t\tsplitByLines: function(text, removeEmpty) {\n\t\t\t// IE fails to split string by regexp, \n\t\t\t// need to normalize newlines first\n\t\t\t// Also, Mozilla's Rhiho JS engine has a weird newline bug\n\t\t\tvar nl = this.getNewline();\n\t\t\tvar lines = (text || '')\n\t\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t\t.replace(/\\n\\r/g, '\\n')\n\t\t\t\t.replace(/\\r/g, '\\n')\n\t\t\t\t.replace(/\\n/g, nl)\n\t\t\t\t.split(nl);\n\t\t\t\n\t\t\tif (removeEmpty) {\n\t\t\t\tlines = _.filter(lines, function(line) {\n\t\t\t\t\treturn line.length && !!this.trim(line);\n\t\t\t\t}, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes newline character: replaces newlines in <code>text</code> \n\t\t * with newline defined in preferences\n\t\t * @param {String} text\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeNewline: function(text) {\n\t\t\treturn this.splitByLines(text).join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeats string <code>howMany</code> times\n\t\t * @param {String} str\n\t\t * @param {Number} how_many\n\t\t * @return {String}\n\t\t */\n\t\trepeatString: function(str, howMany) {\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < howMany; i++) \n\t\t\t\tresult.push(str);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of paddings that should be used to align passed string\n\t\t * @param {Array} strings\n\t\t * @returns {Array}\n\t\t */\n\t\tgetStringsPads: function(strings) {\n\t\t\tvar lengths = _.map(strings, function(s) {\n\t\t\t\treturn _.isString(s) ? s.length : +s;\n\t\t\t});\n\t\t\t\n\t\t\tvar max = _.max(lengths);\n\t\t\treturn _.map(lengths, function(l) {\n\t\t\t\tvar pad = max - l;\n\t\t\t\treturn pad ? this.repeatString(' ', pad) : '';\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indents text with padding\n\t\t * @param {String} text Text to indent\n\t\t * @param {String} pad Padding size (number) or padding itself (string)\n\t\t * @return {String}\n\t\t */\n\t\tpadString: function(text, pad) {\n\t\t\tvar padStr = (_.isNumber(pad)) \n\t\t\t\t? this.repeatString(require('resources').getVariable('indentation') || '\\t', pad) \n\t\t\t\t: pad;\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tvar nl = this.getNewline();\n\t\t\t\t\n\t\t\tresult.push(lines[0]);\n\t\t\tfor (var j = 1; j < lines.length; j++) \n\t\t\t\tresult.push(nl + padStr + lines[j]);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Pad string with zeroes\n\t\t * @param {String} str String to pad\n\t\t * @param {Number} pad Desired string length\n\t\t * @return {String}\n\t\t */\n\t\tzeroPadString: function(str, pad) {\n\t\t\tvar padding = '';\n\t\t\tvar il = str.length;\n\t\t\t\t\n\t\t\twhile (pad > il++) padding += '0';\n\t\t\treturn padding + str; \n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes padding at the beginning of each text's line\n\t\t * @param {String} text\n\t\t * @param {String} pad\n\t\t */\n\t\tunindentString: function(text, pad) {\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].search(pad) == 0)\n\t\t\t\t\tlines[i] = lines[i].substr(pad.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines.join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces unescaped symbols in <code>str</code>. For example, the '$' symbol\n\t\t * will be replaced in 'item$count', but not in 'item\\$count'.\n\t\t * @param {String} str Original string\n\t\t * @param {String} symbol Symbol to replace\n\t\t * @param {String} replace Symbol replacement. Might be a function that \n\t\t * returns new value\n\t\t * @return {String}\n\t\t */\n\t\treplaceUnescapedSymbol: function(str, symbol, replace) {\n\t\t\tvar i = 0;\n\t\t\tvar il = str.length;\n\t\t\tvar sl = symbol.length;\n\t\t\tvar matchCount = 0;\n\t\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tif (str.charAt(i) == '\\\\') {\n\t\t\t\t\t// escaped symbol, skip next character\n\t\t\t\t\ti += sl + 1;\n\t\t\t\t} else if (str.substr(i, sl) == symbol) {\n\t\t\t\t\t// have match\n\t\t\t\t\tvar curSl = sl;\n\t\t\t\t\tmatchCount++;\n\t\t\t\t\tvar newValue = replace;\n\t\t\t\t\tif (_.isFunction(replace)) {\n\t\t\t\t\t\tvar replaceData = replace(str, symbol, i, matchCount);\n\t\t\t\t\t\tif (replaceData) {\n\t\t\t\t\t\t\tcurSl = replaceData[0].length;\n\t\t\t\t\t\t\tnewValue = replaceData[1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === false) { // skip replacement\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstr = str.substring(0, i) + newValue + str.substring(i + curSl);\n\t\t\t\t\t// adjust indexes\n\t\t\t\t\til = str.length;\n\t\t\t\t\ti += newValue.length;\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn str;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace variables like ${var} in string\n\t\t * @param {String} str\n\t\t * @param {Object} vars Variable set (defaults to variables defined in \n\t\t * <code>snippets.json</code>) or variable resolver (<code>Function</code>)\n\t\t * @return {String}\n\t\t */\n\t\treplaceVariables: function(str, vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar resolver = _.isFunction(vars) ? vars : function(str, p1) {\n\t\t\t\treturn p1 in vars ? vars[p1] : null;\n\t\t\t};\n\t\t\t\n\t\t\tvar res = require('resources');\n\t\t\treturn require('tabStops').processText(str, {\n\t\t\t\tvariable: function(data) {\n\t\t\t\t\tvar newValue = resolver(data.token, data.name, data);\n\t\t\t\t\tif (newValue === null) {\n\t\t\t\t\t\t// try to find variable in resources\n\t\t\t\t\t\tnewValue = res.getVariable(data.name);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === null || _.isUndefined(newValue))\n\t\t\t\t\t\t// nothing found, return token itself\n\t\t\t\t\t\tnewValue = data.token;\n\t\t\t\t\treturn newValue;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces '$' character in string assuming it might be escaped with '\\'\n\t\t * @param {String} str String where character should be replaced\n\t\t * @param {String} value New value\n\t\t * @return {String}\n\t\t */\n\t\treplaceCounter: function(str, value, total) {\n\t\t\tvar symbol = '$';\n\t\t\t// in case we received strings from Java, convert the to native strings\n\t\t\tstr = String(str);\n\t\t\tvalue = String(value);\n\t\t\t\n\t\t\tif (/^\\-?\\d+$/.test(value)) {\n\t\t\t\tvalue = +value;\n\t\t\t}\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\treturn this.replaceUnescapedSymbol(str, symbol, function(str, symbol, pos, matchNum){\n\t\t\t\tif (str.charAt(pos + 1) == '{' || that.isNumeric(str.charAt(pos + 1)) ) {\n\t\t\t\t\t// it's a variable, skip it\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// replace sequense of $ symbols with padded number  \n\t\t\t\tvar j = pos + 1;\n\t\t\t\twhile(str.charAt(j) == '$' && str.charAt(j + 1) != '{') j++;\n\t\t\t\tvar pad = j - pos;\n\t\t\t\t\n\t\t\t\t// get counter base\n\t\t\t\tvar base = 0, decrement = false, m;\n\t\t\t\tif (m = str.substr(j).match(/^@(\\-?)(\\d*)/)) {\n\t\t\t\t\tj += m[0].length;\n\t\t\t\t\t\n\t\t\t\t\tif (m[1]) {\n\t\t\t\t\t\tdecrement = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbase = parseInt(m[2] || 1) - 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (decrement && total && _.isNumber(value)) {\n\t\t\t\t\tvalue = total - value + 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue += base;\n\t\t\t\t\n\t\t\t\treturn [str.substring(pos, j), that.zeroPadString(value + '', pad)];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if string matches against <code>reTag</code> regexp. This \n\t\t * function may be used to test if provided string contains HTML tags\n\t\t * @param {String} str\n\t\t * @returns {Boolean}\n\t\t */\n\t\tmatchesTag: function(str) {\n\t\t\treturn this.reTag.test(str || '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escapes special characters used in Emmet, like '$', '|', etc.\n\t\t * Use this method before passing to actions like \"Wrap with Abbreviation\"\n\t\t * to make sure that existing special characters won't be altered\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tescapeText: function(text) {\n\t\t\treturn text.replace(/([\\$\\\\])/g, '\\\\$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unescapes special characters used in Emmet, like '$', '|', etc.\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunescapeText: function(text) {\n\t\t\treturn text.replace(/\\\\(.)/g, '$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns caret placeholder\n\t\t * @returns {String}\n\t\t */\n\t\tgetCaretPlaceholder: function() {\n\t\t\treturn _.isFunction(caretPlaceholder) \n\t\t\t\t? caretPlaceholder.apply(this, arguments)\n\t\t\t\t: caretPlaceholder;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new representation for carets in generated output\n\t\t * @param {String} value New caret placeholder. Might be a \n\t\t * <code>Function</code>\n\t\t */\n\t\tsetCaretPlaceholder: function(value) {\n\t\t\tcaretPlaceholder = value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns line padding\n\t\t * @param {String} line\n\t\t * @return {String}\n\t\t */\n\t\tgetLinePadding: function(line) {\n\t\t\treturn (line.match(/^(\\s+)/) || [''])[0];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that returns padding of line of <code>pos</code>\n\t\t * position in <code>content</code>\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @returns {String}\n\t\t */\n\t\tgetLinePaddingFromPosition: function(content, pos) {\n\t\t\tvar lineRange = this.findNewlineBounds(content, pos);\n\t\t\treturn this.getLinePadding(lineRange.substring(content));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escape special regexp chars in string, making it usable for creating dynamic\n\t\t * regular expressions\n\t\t * @param {String} str\n\t\t * @return {String}\n\t\t */\n\t\tescapeForRegexp: function(str) {\n\t\t\tvar specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", \"g\"); // .*+?|()[]{}\\\n\t\t\treturn str.replace(specials, \"\\\\$&\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Make decimal number look good: convert it to fixed precision end remove\n\t\t * traling zeroes \n\t\t * @param {Number} num\n\t\t * @param {Number} fracion Fraction numbers (default is 2)\n\t\t * @return {String}\n\t\t */\n\t\tprettifyNumber: function(num, fraction) {\n\t\t\treturn num.toFixed(typeof fraction == 'undefined' ? 2 : fraction).replace(/\\.?0+$/, '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * A simple mutable string shim, optimized for faster text concatenation\n\t\t * @param {String} value Initial value\n\t\t * @returns {StringBuilder}\n\t\t */\n\t\tstringBuilder: function(value) {\n\t\t\treturn new StringBuilder(value);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace substring of <code>str</code> with <code>value</code>\n\t\t * @param {String} str String where to replace substring\n\t\t * @param {String} value New substring value\n\t\t * @param {Number} start Start index of substring to replace. May also\n\t\t * be a <code>Range</code> object: in this case, the <code>end</code>\n\t\t * argument is not required\n\t\t * @param {Number} end End index of substring to replace. If ommited, \n\t\t * <code>start</code> argument is used\n\t\t */\n\t\treplaceSubstring: function(str, value, start, end) {\n\t\t\tif (_.isObject(start) && 'end' in start) {\n\t\t\t\tend = start.end;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(end))\n\t\t\t\tend = start + end.length;\n\t\t\t\n\t\t\tif (_.isUndefined(end))\n\t\t\t\tend = start;\n\t\t\t\n\t\t\tif (start < 0 || start > str.length)\n\t\t\t\treturn str;\n\t\t\t\n\t\t\treturn str.substring(0, start) + value + str.substring(end);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Narrows down text range, adjusting selection to non-space characters\n\t\t * @param {String} text\n\t\t * @param {Number} start Starting range in <code>text</code> where \n\t\t * slection should be adjusted. Can also be any object that is accepted\n\t\t * by <code>Range</code> class\n\t\t * @return {Range}\n\t\t */\n\t\tnarrowToNonSpace: function(text, start, end) {\n\t\t\tvar range = require('range').create(start, end);\n\t\t\t\n\t\t\tvar reSpace = /[\\s\\n\\r\\u00a0]/;\n\t\t\t// narrow down selection until first non-space character\n\t\t\twhile (range.start < range.end) {\n\t\t\t\tif (!reSpace.test(text.charAt(range.start)))\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\trange.start++;\n\t\t\t}\n\t\t\t\n\t\t\twhile (range.end > range.start) {\n\t\t\t\trange.end--;\n\t\t\t\tif (!reSpace.test(text.charAt(range.end))) {\n\t\t\t\t\trange.end++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn range;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find start and end index of text line for <code>from</code> index\n\t\t * @param {String} text \n\t\t * @param {Number} from\n\t\t */\n\t\tfindNewlineBounds: function(text, from) {\n\t\t\tvar len = text.length,\n\t\t\t\tstart = 0,\n\t\t\t\tend = len - 1;\n\t\t\t\n\t\t\t// search left\n\t\t\tfor (var i = from - 1; i > 0; i--) {\n\t\t\t\tvar ch = text.charAt(i);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// search right\n\t\t\tfor (var j = from; j < len; j++) {\n\t\t\t\tvar ch = text.charAt(j);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tend = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn require('range').create(start, end - start);\n\t\t},\n\n\t\t/**\n\t\t * Deep merge of two or more objects. Taken from jQuery.extend()\n\t\t */\n\t\tdeepMerge: function() {\n\t\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\t\ttarget = arguments[0] || {},\n\t\t\t\ti = 1,\n\t\t\t\tlength = arguments.length;\n\n\n\t\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\t\tif (!_.isObject(target) && !_.isFunction(target)) {\n\t\t\t\ttarget = {};\n\t\t\t}\n\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t// Only deal with non-null/undefined values\n\t\t\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t\t\t// Extend the base object\n\t\t\t\t\tfor ( name in options ) {\n\t\t\t\t\t\tsrc = target[ name ];\n\t\t\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\t\tif ( target === copy ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif ( copy && ( _.isObject(copy) || (copyIsArray = _.isArray(copy)) ) ) {\n\t\t\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && _.isArray(src) ? src : [];\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && _.isObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[ name ] = this.deepMerge(clone, copy );\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the modified object\n\t\t\treturn target;\n\t\t}\n\t};\n});\n/**\n * Helper module to work with ranges\n * @constructor\n * @memberOf __rangeDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('range', function(require, _) {\n\tfunction cmp(a, b, op) {\n\t\tswitch (op) {\n\t\t\tcase 'eq':\n\t\t\tcase '==':\n\t\t\t\treturn a === b;\n\t\t\tcase 'lt':\n\t\t\tcase '<':\n\t\t\t\treturn a < b;\n\t\t\tcase 'lte':\n\t\t\tcase '<=':\n\t\t\t\treturn a <= b;\n\t\t\tcase 'gt':\n\t\t\tcase '>':\n\t\t\t\treturn a > b;\n\t\t\tcase 'gte':\n\t\t\tcase '>=':\n\t\t\t\treturn a >= b;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * @type Range\n\t * @constructor\n\t * @param {Object} start\n\t * @param {Number} len\n\t */\n\tfunction Range(start, len) {\n\t\tif (_.isObject(start) && 'start' in start) {\n\t\t\t// create range from object stub\n\t\t\tthis.start = Math.min(start.start, start.end);\n\t\t\tthis.end = Math.max(start.start, start.end);\n\t\t} else if (_.isArray(start)) {\n\t\t\tthis.start = start[0];\n\t\t\tthis.end = start[1];\n\t\t} else {\n\t\t\tlen = _.isString(len) ? len.length : +len;\n\t\t\tthis.start = start;\n\t\t\tthis.end = start + len;\n\t\t}\n\t}\n\t\n\tRange.prototype = {\n\t\tlength: function() {\n\t\t\treturn Math.abs(this.end - this.start);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns <code>true</code> if passed range is equals to current one\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\tequal: function(range) {\n\t\t\treturn this.cmp(range, 'eq', 'eq');\n//\t\t\treturn this.start === range.start && this.end === range.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shifts indexes position with passed <code>delat</code>\n\t\t * @param {Number} delta\n\t\t * @returns {Range} range itself\n\t\t */\n\t\tshift: function(delta) {\n\t\t\tthis.start += delta;\n\t\t\tthis.end += delta;\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if two ranges are overlapped\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\toverlap: function(range) {\n\t\t\treturn range.start <= this.end && range.end >= this.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds intersection of two ranges\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges does not overlap\n\t\t */\n\t\tintersection: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.max(range.start, this.start);\n\t\t\t\tvar end = Math.min(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the union of the thow ranges.\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges are not overlapped\n\t\t */\n\t\tunion: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.min(range.start, this.start);\n\t\t\t\tvar end = Math.max(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range.\n\t\t * @param {Number} loc\n\t\t */\n\t\tinside: function(loc) {\n\t\t\treturn this.cmp(loc, 'lte', 'gt');\n//\t\t\treturn this.start <= loc && this.end > loc;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range, but not equals bounds.\n\t\t * @param {Number} loc\n\t\t */\n\t\tcontains: function(loc) {\n\t\t\treturn this.cmp(loc, 'lt', 'gt');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current range completely includes specified one\n\t\t * @param {Range} r\n\t\t * @returns {Boolean} \n\t\t */\n\t\tinclude: function(r) {\n\t\t\treturn this.cmp(loc, 'lte', 'gte');\n//\t\t\treturn this.start <= r.start && this.end >= r.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Low-level comparision method\n\t\t * @param {Number} loc\n\t\t * @param {String} left Left comparison operator\n\t\t * @param {String} right Right comaprison operator\n\t\t */\n\t\tcmp: function(loc, left, right) {\n\t\t\tvar a, b;\n\t\t\tif (loc instanceof Range) {\n\t\t\t\ta = loc.start;\n\t\t\t\tb = loc.end;\n\t\t\t} else {\n\t\t\t\ta = b = loc;\n\t\t\t}\n\t\t\t\n\t\t\treturn cmp(this.start, a, left || '<=') && cmp(this.end, b, right || '>');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns substring of specified <code>str</code> for current range\n\t\t * @param {String} str\n\t\t * @returns {String}\n\t\t */\n\t\tsubstring: function(str) {\n\t\t\treturn this.length() > 0 \n\t\t\t\t? str.substring(this.start, this.end) \n\t\t\t\t: '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates copy of current range\n\t\t * @returns {Range}\n\t\t */\n\t\tclone: function() {\n\t\t\treturn new Range(this.start, this.length());\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {Array}\n\t\t */\n\t\ttoArray: function() {\n\t\t\treturn [this.start, this.end];\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn '{' + this.start + ', ' + this.length() + '}';\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new range object instance\n\t\t * @param {Object} start Range start or array with 'start' and 'end'\n\t\t * as two first indexes or object with 'start' and 'end' properties\n\t\t * @param {Number} len Range length or string to produce range from\n\t\t * @returns {Range}\n\t\t * @memberOf emmet.range\n\t\t */\n\t\tcreate: function(start, len) {\n\t\t\tif (_.isUndefined(start) || start === null)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (start instanceof Range)\n\t\t\t\treturn start;\n\t\t\t\n\t\t\tif (_.isObject(start) && 'start' in start && 'end' in start) {\n\t\t\t\tlen = start.end - start.start;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn new Range(start, len);\n\t\t},\n\t\t\n\t\t/**\n\t\t * <code>Range</code> object factory, the same as <code>this.create()</code>\n\t\t * but last argument represents end of range, not length\n\t\t * @returns {Range}\n\t\t */\n\t\tcreate2: function(start, end) {\n\t\t\tif (_.isNumber(start) && _.isNumber(end)) {\n\t\t\t\tend -= start;\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(start, end);\n\t\t}\n\t};\n});/**\n * Utility module that provides ordered storage of function handlers. \n * Many Emmet modules' functionality can be extended/overridden by custom\n * function. This modules provides unified storage of handler functions, their \n * management and execution\n * \n * @constructor\n * @memberOf __handlerListDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('handlerList', function(require, _) {\n\t/**\n\t * @type HandlerList\n\t * @constructor\n\t */\n\tfunction HandlerList() {\n\t\tthis._list = [];\n\t}\n\t\n\tHandlerList.prototype = {\n\t\t/**\n\t\t * Adds function handler\n\t\t * @param {Function} fn Handler\n\t\t * @param {Object} options Handler options. Possible values are:<br><br>\n\t\t * <b>order</b> : (<code>Number</code>) – order in handler list. Handlers\n\t\t * with higher order value will be executed earlier.\n\t\t */\n\t\tadd: function(fn, options) {\n\t\t\tthis._list.push(_.extend({order: 0}, options || {}, {fn: fn}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes handler from list\n\t\t * @param {Function} fn\n\t\t */\n\t\tremove: function(fn) {\n\t\t\tthis._list = _.without(this._list, _.find(this._list, function(item) {\n\t\t\t\treturn item.fn === fn;\n\t\t\t}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handlers. By default, handlers \n\t\t * with the same <code>order</code> option returned in reverse order, \n\t\t * i.e. the latter function was added into the handlers list, the higher \n\t\t * it will be in the returned array \n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.sortBy(this._list, 'order').reverse();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handler functions\n\t\t * @returns {Array}\n\t\t */\n\t\tlistFn: function() {\n\t\t\treturn _.pluck(this.list(), 'fn');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Executes handler functions in their designated order. If function\n\t\t * returns <code>skipVal</code>, meaning that function was unable to \n\t\t * handle passed <code>args</code>, the next function will be executed\n\t\t * and so on.\n\t\t * @param {Object} skipValue If function returns this value, execute \n\t\t * next handler.\n\t\t * @param {Array} args Arguments to pass to handler function\n\t\t * @returns {Boolean} Whether any of registered handlers performed\n\t\t * successfully  \n\t\t */\n\t\texec: function(skipValue, args) {\n\t\t\targs = args || [];\n\t\t\tvar result = null;\n\t\t\t_.find(this.list(), function(h) {\n\t\t\t\tresult = h.fn.apply(h, args);\n\t\t\t\tif (result !== skipValue)\n\t\t\t\t\treturn true;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Factory method that produces <code>HandlerList</code> instance\n\t\t * @returns {HandlerList}\n\t\t * @memberOf handlerList\n\t\t */\n\t\tcreate: function() {\n\t\t\treturn new HandlerList();\n\t\t}\n\t};\n});/**\n * Helper class for convenient token iteration\n */\nemmet.define('tokenIterator', function(require, _) {\n\t/**\n\t * @type TokenIterator\n\t * @param {Array} tokens\n\t * @type TokenIterator\n\t * @constructor\n\t */\n\tfunction TokenIterator(tokens) {\n\t\t/** @type Array */\n\t\tthis.tokens = tokens;\n\t\tthis._position = 0;\n\t\tthis.reset();\n\t}\n\t\n\tTokenIterator.prototype = {\n\t\tnext: function() {\n\t\t\tif (this.hasNext()) {\n\t\t\t\tvar token = this.tokens[++this._i];\n\t\t\t\tthis._position = token.start;\n\t\t\t\treturn token;\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\tcurrent: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\tposition: function() {\n\t\t\treturn this._position;\n\t\t},\n\t\t\n\t\thasNext: function() {\n\t\t\treturn this._i < this._il - 1;\n\t\t},\n\t\t\n\t\treset: function() {\n\t\t\tthis._i = -1;\n\t\t\tthis._il = this.tokens.length;\n\t\t},\n\t\t\n\t\titem: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\titemNext: function() {\n\t\t\treturn this.tokens[this._i + 1];\n\t\t},\n\t\t\n\t\titemPrev: function() {\n\t\t\treturn this.tokens[this._i - 1];\n\t\t},\n\t\t\n\t\tnextUntil: function(type, callback) {\n\t\t\tvar token;\n\t\t\tvar test = _.isString(type) \n\t\t\t\t? function(t){return t.type == type;} \n\t\t\t\t: type;\n\t\t\t\n\t\t\twhile (token = this.next()) {\n\t\t\t\tif (callback)\n\t\t\t\t\tcallback.call(this, token);\n\t\t\t\tif (test.call(this, token))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(tokens) {\n\t\t\treturn new TokenIterator(tokens);\n\t\t}\n\t};\n});/**\n * A trimmed version of CodeMirror's StringStream module for string parsing\n */\nemmet.define('stringStream', function(require, _) {\n\t/**\n\t * @type StringStream\n\t * @constructor\n\t * @param {String} string\n\t */\n\tfunction StringStream(string) {\n\t\tthis.pos = this.start = 0;\n\t\tthis.string = string;\n\t}\n\t\n\tStringStream.prototype = {\n\t\t/**\n\t\t * Returns true only if the stream is at the end of the line.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teol: function() {\n\t\t\treturn this.pos >= this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns true only if the stream is at the start of the line\n\t\t * @returns {Boolean}\n\t\t */\n\t\tsol: function() {\n\t\t\treturn this.pos == 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream without advancing it. \n\t\t * Will return <code>undefined</code> at the end of the line.\n\t\t * @returns {String}\n\t\t */\n\t\tpeek: function() {\n\t\t\treturn this.string.charAt(this.pos);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream and advances it.\n\t\t * Also returns <code>undefined</code> when no more characters are available.\n\t\t * @returns {String}\n\t\t */\n\t\tnext: function() {\n\t\t\tif (this.pos < this.string.length)\n\t\t\t\treturn this.string.charAt(this.pos++);\n\t\t},\n\t\t\n\t\t/**\n\t\t * match can be a character, a regular expression, or a function that\n\t\t * takes a character and returns a boolean. If the next character in the\n\t\t * stream 'matches' the given argument, it is consumed and returned.\n\t\t * Otherwise, undefined is returned.\n\t\t * @param {Object} match\n\t\t * @returns {String}\n\t\t */\n\t\teat: function(match) {\n\t\t\tvar ch = this.string.charAt(this.pos), ok;\n\t\t\tif (typeof match == \"string\")\n\t\t\t\tok = ch == match;\n\t\t\telse\n\t\t\t\tok = ch && (match.test ? match.test(ch) : match(ch));\n\t\t\t\n\t\t\tif (ok) {\n\t\t\t\t++this.pos;\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeatedly calls <code>eat</code> with the given argument, until it\n\t\t * fails. Returns <code>true</code> if any characters were eaten.\n\t\t * @param {Object} match\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatWhile: function(match) {\n\t\t\tvar start = this.pos;\n\t\t\twhile (this.eat(match)) {}\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shortcut for <code>eatWhile</code> when matching white-space.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatSpace: function() {\n\t\t\tvar start = this.pos;\n\t\t\twhile (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n\t\t\t\t++this.pos;\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Moves the position to the end of the line.\n\t\t */\n\t\tskipToEnd: function() {\n\t\t\tthis.pos = this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to the next occurrence of the given character, if found on the\n\t\t * current line (doesn't advance the stream if the character does not\n\t\t * occur on the line). Returns true if the character was found.\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tskipTo: function(ch) {\n\t\t\tvar found = this.string.indexOf(ch, this.pos);\n\t\t\tif (found > -1) {\n\t\t\t\tthis.pos = found;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to <code>close</code> character which is pair to <code>open</code>\n\t\t * character, considering possible pair nesting. This function is used\n\t\t * to consume pair of characters, like opening and closing braces\n\t\t * @param {String} open\n\t\t * @param {String} close\n\t\t * @returns {Boolean} Returns <code>true</code> if pair was successfully\n\t\t * consumed\n\t\t */\n\t\tskipToPair: function(open, close) {\n\t\t\tvar braceCount = 0, ch;\n\t\t\tvar pos = this.pos, len = this.string.length;\n\t\t\twhile (pos < len) {\n\t\t\t\tch = this.string.charAt(pos++);\n\t\t\t\tif (ch == open) {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == close) {\n\t\t\t\t\tbraceCount--;\n\t\t\t\t\tif (braceCount < 1) {\n\t\t\t\t\t\tthis.pos = pos;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Backs up the stream n characters. Backing it up further than the\n\t\t * start of the current token will cause things to break, so be careful.\n\t\t * @param {Number} n\n\t\t */\n\t\tbackUp : function(n) {\n\t\t\tthis.pos -= n;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Act like a multi-character <code>eat</code>—if <code>consume</code> is true or\n\t\t * not given—or a look-ahead that doesn't update the stream position—if\n\t\t * it is false. <code>pattern</code> can be either a string or a\n\t\t * regular expression starting with ^. When it is a string,\n\t\t * <code>caseInsensitive</code> can be set to true to make the match\n\t\t * case-insensitive. When successfully matching a regular expression,\n\t\t * the returned value will be the array returned by <code>match</code>,\n\t\t * in case you need to extract matched groups.\n\t\t * \n\t\t * @param {RegExp} pattern\n\t\t * @param {Boolean} consume\n\t\t * @param {Boolean} caseInsensitive\n\t\t * @returns\n\t\t */\n\t\tmatch: function(pattern, consume, caseInsensitive) {\n\t\t\tif (typeof pattern == \"string\") {\n\t\t\t\tvar cased = caseInsensitive\n\t\t\t\t\t? function(str) {return str.toLowerCase();}\n\t\t\t\t\t: function(str) {return str;};\n\t\t\t\t\n\t\t\t\tif (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\n\t\t\t\t\tif (consume !== false)\n\t\t\t\t\t\tthis.pos += pattern.length;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar match = this.string.slice(this.pos).match(pattern);\n\t\t\t\tif (match && consume !== false)\n\t\t\t\t\tthis.pos += match[0].length;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Get the string between the start of the current token and the \n\t\t * current stream position.\n\t\t * @returns {String}\n\t\t */\n\t\tcurrent: function() {\n\t\t\treturn this.string.slice(this.start, this.pos);\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(string) {\n\t\t\treturn new StringStream(string);\n\t\t}\n\t};\n});/**\n * Parsed resources (snippets, abbreviations, variables, etc.) for Emmet.\n * Contains convenient method to get access for snippets with respect of \n * inheritance. Also provides ability to store data in different vocabularies\n * ('system' and 'user') for fast and safe resource update\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('resources', function(require, _) {\n\tvar VOC_SYSTEM = 'system';\n\tvar VOC_USER = 'user';\n\t\n\tvar cache = {};\n\t\t\n\t/** Regular expression for XML tag matching */\n\tvar reTag = /^<(\\w+\\:?[\\w\\-]*)((?:\\s+[\\w\\:\\-]+\\s*=\\s*(['\"]).*?\\3)*)\\s*(\\/?)>/;\n\t\t\n\tvar systemSettings = {};\n\tvar userSettings = {};\n\t\n\t/** @type HandlerList List of registered abbreviation resolvers */\n\tvar resolvers = require('handlerList').create();\n\t\n\t/**\n\t * Normalizes caret plceholder in passed text: replaces | character with\n\t * default caret placeholder\n\t * @param {String} text\n\t * @returns {String}\n\t */\n\tfunction normalizeCaretPlaceholder(text) {\n\t\tvar utils = require('utils');\n\t\treturn utils.replaceUnescapedSymbol(text, '|', utils.getCaretPlaceholder());\n\t}\n\t\n\tfunction parseItem(name, value, type) {\n\t\tvalue = normalizeCaretPlaceholder(value);\n\t\t\n\t\tif (type == 'snippets') {\n\t\t\treturn require('elements').create('snippet', value);\n\t\t}\n\t\t\n\t\tif (type == 'abbreviations') {\n\t\t\treturn parseAbbreviation(name, value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Parses single abbreviation\n\t * @param {String} key Abbreviation name\n\t * @param {String} value Abbreviation value\n\t * @return {Object}\n\t */\n\tfunction parseAbbreviation(key, value) {\n\t\tkey = require('utils').trim(key);\n\t\tvar elements = require('elements');\n\t\tvar m;\n\t\tif (m = reTag.exec(value)) {\n\t\t\treturn elements.create('element', m[1], m[2], m[4] == '/');\n\t\t} else {\n\t\t\t// assume it's reference to another abbreviation\n\t\t\treturn elements.create('reference', value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Normalizes snippet key name for better fuzzy search\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction normalizeName(str) {\n\t\treturn str.replace(/:$/, '').replace(/:/g, '-');\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Sets new unparsed data for specified settings vocabulary\n\t\t * @param {Object} data\n\t\t * @param {String} type Vocabulary type ('system' or 'user')\n\t\t * @memberOf resources\n\t\t */\n\t\tsetVocabulary: function(data, type) {\n\t\t\tcache = {};\n\t\t\tif (type == VOC_SYSTEM)\n\t\t\t\tsystemSettings = data;\n\t\t\telse\n\t\t\t\tuserSettings = data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource vocabulary by its name\n\t\t * @param {String} name Vocabulary name ('system' or 'user')\n\t\t * @return {Object}\n\t\t */\n\t\tgetVocabulary: function(name) {\n\t\t\treturn name == VOC_SYSTEM ? systemSettings : userSettings;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource (abbreviation, snippet, etc.) matched for passed \n\t\t * abbreviation\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetMatchedResource: function(node, syntax) {\n\t\t\treturn resolvers.exec(null, _.toArray(arguments)) \n\t\t\t\t|| this.findSnippet(syntax, node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns variable value\n\t\t * @return {String}\n\t\t */\n\t\tgetVariable: function(name) {\n\t\t\treturn (this.getSection('variables') || {})[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Store runtime variable in user storage\n\t\t * @param {String} name Variable name\n\t\t * @param {String} value Variable value\n\t\t */\n\t\tsetVariable: function(name, value){\n\t\t\tvar voc = this.getVocabulary('user') || {};\n\t\t\tif (!('variables' in voc))\n\t\t\t\tvoc.variables = {};\n\t\t\t\t\n\t\t\tvoc.variables[name] = value;\n\t\t\tthis.setVocabulary(voc, 'user');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if there are resources for specified syntax\n\t\t * @param {String} syntax\n\t\t * @return {Boolean}\n\t\t */\n\t\thasSyntax: function(syntax) {\n\t\t\treturn syntax in this.getVocabulary(VOC_USER) \n\t\t\t\t|| syntax in this.getVocabulary(VOC_SYSTEM);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers new abbreviation resolver.\n\t\t * @param {Function} fn Abbreviation resolver which will receive \n\t\t * abbreviation as first argument and should return parsed abbreviation\n\t\t * object if abbreviation has handled successfully, <code>null</code>\n\t\t * otherwise\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddResolver: function(fn, options) {\n\t\t\tresolvers.add(fn, options);\n\t\t},\n\t\t\n\t\tremoveResolver: function(fn) {\n\t\t\tresolvers.remove(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actual section data, merged from both\n\t\t * system and user data\n\t\t * @param {String} name Section name (syntax)\n\t\t * @param {String} ...args Subsections\n\t\t * @returns\n\t\t */\n\t\tgetSection: function(name) {\n\t\t\tif (!name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (!(name in cache)) {\n\t\t\t\tcache[name] = require('utils').deepMerge({}, systemSettings[name], userSettings[name]);\n\t\t\t}\n\t\t\t\n\t\t\tvar data = cache[name], subsections = _.rest(arguments), key;\n\t\t\twhile (data && (key = subsections.shift())) {\n\t\t\t\tif (key in data) {\n\t\t\t\t\tdata = data[key];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a item inside top level sections (syntaxes)\n\t\t * with respect of `extends` attribute\n\t\t * @param {String} topSection Top section name (syntax)\n\t\t * @param {String} subsection Inner section name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindItem: function(topSection, subsection) {\n\t\t\tvar data = this.getSection(topSection);\n\t\t\twhile (data) {\n\t\t\t\tif (subsection in data)\n\t\t\t\t\treturn data[subsection];\n\t\t\t\t\n\t\t\t\tdata = this.getSection(data['extends']);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a snippet definition inside syntax section.\n\t\t * Definition is searched inside `snippets` and `abbreviations` \n\t\t * subsections  \n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindSnippet: function(syntax, name, memo) {\n\t\t\tif (!syntax || !name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tmemo = memo || [];\n\t\t\t\n\t\t\tvar names = [name];\n\t\t\t// create automatic aliases to properties with colons,\n\t\t\t// e.g. pos-a == pos:a\n\t\t\tif (~name.indexOf('-'))\n\t\t\t\tnames.push(name.replace(/\\-/g, ':'));\n\t\t\t\n\t\t\tvar data = this.getSection(syntax), matchedItem = null;\n\t\t\t_.find(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\tvar data = this.getSection(syntax, sectionName);\n\t\t\t\tif (data) {\n\t\t\t\t\treturn _.find(names, function(n) {\n\t\t\t\t\t\tif (data[n])\n\t\t\t\t\t\t\treturn matchedItem = parseItem(n, data[n], sectionName);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tmemo.push(syntax);\n\t\t\tif (!matchedItem && data['extends'] && !_.include(memo, data['extends'])) {\n\t\t\t\t// try to find item in parent syntax section\n\t\t\t\treturn this.findSnippet(data['extends'], name, memo);\n\t\t\t}\n\t\t\t\n\t\t\treturn matchedItem;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Performs fuzzy search of snippet definition\n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns\n\t\t */\n\t\tfuzzyFindSnippet: function(syntax, name, minScore) {\n\t\t\tminScore = minScore || 0.3;\n\t\t\t\n\t\t\tvar payload = this.getAllSnippets(syntax);\n\t\t\tvar sc = require('string-score');\n\t\t\t\n\t\t\tname = normalizeName(name);\n\t\t\tvar scores = _.map(payload, function(value, key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key,\n\t\t\t\t\tscore: sc.score(value.nk, name, 0.1)\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tvar result = _.last(_.sortBy(scores, 'score'));\n\t\t\tif (result && result.score >= minScore) {\n\t\t\t\tvar k = result.key;\n\t\t\t\treturn payload[k].parsedValue;\n//\t\t\t\treturn parseItem(k, payload[k].value, payload[k].type);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns plain dictionary of all available abbreviations and snippets\n\t\t * for specified syntax with respect of inheritance\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAllSnippets: function(syntax) {\n\t\t\tvar cacheKey = 'all-' + syntax;\n\t\t\tif (!cache[cacheKey]) {\n\t\t\t\tvar stack = [], sectionKey = syntax;\n\t\t\t\tvar memo = [];\n\t\t\t\t\n\t\t\t\tdo {\n\t\t\t\t\tvar section = this.getSection(sectionKey);\n\t\t\t\t\tif (!section)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\t_.each(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\t\t\tvar stackItem = {};\n\t\t\t\t\t\t_.each(section[sectionName] || null, function(v, k) {\n\t\t\t\t\t\t\tstackItem[k] = {\n\t\t\t\t\t\t\t\tnk: normalizeName(k),\n\t\t\t\t\t\t\t\tvalue: v,\n\t\t\t\t\t\t\t\tparsedValue: parseItem(k, v, sectionName),\n\t\t\t\t\t\t\t\ttype: sectionName\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tstack.push(stackItem);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmemo.push(sectionKey);\n\t\t\t\t\tsectionKey = section['extends'];\n\t\t\t\t} while (sectionKey && !_.include(memo, sectionKey));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcache[cacheKey] = _.extend.apply(_, stack.reverse());\n\t\t\t}\n\t\t\t\n\t\t\treturn cache[cacheKey];\n\t\t}\n\t};\n});/**\n * Module describes and performs Emmet actions. The actions themselves are\n * defined in <i>actions</i> folder\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('actions', function(require, _, zc) {\n\tvar actions = {};\n\t\n\t/**\n\t * “Humanizes” action name, makes it more readable for people\n\t * @param {String} name Action name (like 'expand_abbreviation')\n\t * @return Humanized name (like 'Expand Abbreviation')\n\t */\n\tfunction humanizeActionName(name) {\n\t\treturn require('utils').trim(name.charAt(0).toUpperCase() \n\t\t\t+ name.substring(1).replace(/_[a-z]/g, function(str) {\n\t\t\t\treturn ' ' + str.charAt(1).toUpperCase();\n\t\t\t}));\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Registers new action\n\t\t * @param {String} name Action name\n\t\t * @param {Function} fn Action function\n\t\t * @param {Object} options Custom action options:<br>\n\t\t * <b>label</b> : (<code>String</code>) – Human-readable action name. \n\t\t * May contain '/' symbols as submenu separators<br>\n\t\t * <b>hidden</b> : (<code>Boolean</code>) – Indicates whether action\n\t\t * should be displayed in menu (<code>getMenu()</code> method)\n\t\t * \n\t\t * @memberOf actions\n\t\t */\n\t\tadd: function(name, fn, options) {\n\t\t\tname = name.toLowerCase();\n\t\t\toptions = options || {};\n\t\t\tif (!options.label) {\n\t\t\t\toptions.label = humanizeActionName(name);\n\t\t\t}\n\t\t\t\n\t\t\tactions[name] = {\n\t\t\t\tname: name,\n\t\t\t\tfn: fn,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns action object\n\t\t * @param {String} name Action name\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn actions[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Runs Emmet action. For list of available actions and their\n\t\t * arguments see <i>actions</i> folder.\n\t\t * @param {String} name Action name \n\t\t * @param {Array} args Additional arguments. It may be array of arguments\n\t\t * or inline arguments. The first argument should be <code>IEmmetEditor</code> instance\n\t\t * @returns {Boolean} Status of performed operation, <code>true</code>\n\t\t * means action was performed successfully.\n\t\t * @example\n\t\t * emmet.require('actions').run('expand_abbreviation', editor);  \n\t\t * emmet.require('actions').run('wrap_with_abbreviation', [editor, 'div']);  \n\t\t */\n\t\trun: function(name, args) {\n\t\t\tif (!_.isArray(args)) {\n\t\t\t\targs = _.rest(arguments);\n\t\t\t}\n\t\t\t\n\t\t\tvar action = this.get(name);\n\t\t\tif (action) {\n\t\t\t\treturn action.fn.apply(emmet, args);\n\t\t\t} else {\n\t\t\t\temmet.log('Action \"%s\" is not defined', name);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as object\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAll: function() {\n\t\t\treturn actions;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as array\n\t\t * @returns {Array}\n\t\t */\n\t\tgetList: function() {\n\t\t\treturn _.values(this.getAll());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actions list as structured menu. If action has <i>label</i>,\n\t\t * it will be splitted by '/' symbol into submenus (for example: \n\t\t * CSS/Reflect Value) and grouped with other items\n\t\t * @param {Array} skipActions List of action identifiers that should be \n\t\t * skipped from menu\n\t\t * @returns {Array}\n\t\t */\n\t\tgetMenu: function(skipActions) {\n\t\t\tvar result = [];\n\t\t\tskipActions = skipActions || [];\n\t\t\t_.each(this.getList(), function(action) {\n\t\t\t\tif (action.options.hidden || _.include(skipActions, action.name))\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tvar actionName = humanizeActionName(action.name);\n\t\t\t\tvar ctx = result;\n\t\t\t\tif (action.options.label) {\n\t\t\t\t\tvar parts = action.options.label.split('/');\n\t\t\t\t\tactionName = parts.pop();\n\t\t\t\t\t\n\t\t\t\t\t// create submenus, if needed\n\t\t\t\t\tvar menuName, submenu;\n\t\t\t\t\twhile (menuName = parts.shift()) {\n\t\t\t\t\t\tsubmenu = _.find(ctx, function(item) {\n\t\t\t\t\t\t\treturn item.type == 'submenu' && item.name == menuName;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!submenu) {\n\t\t\t\t\t\t\tsubmenu = {\n\t\t\t\t\t\t\t\tname: menuName,\n\t\t\t\t\t\t\t\ttype: 'submenu',\n\t\t\t\t\t\t\t\titems: []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tctx.push(submenu);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tctx = submenu.items;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.push({\n\t\t\t\t\ttype: 'action',\n\t\t\t\t\tname: action.name,\n\t\t\t\t\tlabel: actionName\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Returns action name associated with menu item title\n\t\t * @param {String} title\n\t\t * @returns {String}\n\t\t */\n\t\tgetActionNameForMenuTitle: function(title, menu) {\n\t\t\tvar item = null;\n\t\t\t_.find(menu || this.getMenu(), function(val) {\n\t\t\t\tif (val.type == 'action') {\n\t\t\t\t\tif (val.label == title || val.name == title) {\n\t\t\t\t\t\treturn item = val.name;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn item = this.getActionNameForMenuTitle(title, val.items);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn item || null;\n\t\t}\n\t};\n});/**\n * Output profile module.\n * Profile defines how XHTML output data should look like\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('profile', function(require, _) {\n\tvar profiles = {};\n\t\n\tvar defaultProfile = {\n\t\ttag_case: 'asis',\n\t\tattr_case: 'asis',\n\t\tattr_quotes: 'double',\n\t\t\n\t\t// each tag on new line\n\t\ttag_nl: 'decide',\n\t\t\n\t\t// with tag_nl === true, defines if leaf node (e.g. node with no children)\n\t\t// should have formatted line breaks\n\t\ttag_nl_leaf: false,\n\t\t\n\t\tplace_cursor: true,\n\t\t\n\t\t// indent tags\n\t\tindent: true,\n\t\t\n\t\t// how many inline elements should be to force line break \n\t\t// (set to 0 to disable)\n\t\tinline_break: 3,\n\t\t\n\t\t// use self-closing style for writing empty elements, e.g. <br /> or <br>\n\t\tself_closing_tag: 'xhtml',\n\t\t\n\t\t// Profile-level output filters, re-defines syntax filters \n\t\tfilters: '',\n\t\t\n\t\t// Additional filters applied to abbreviation.\n\t\t// Unlike \"filters\", this preference doesn't override default filters\n\t\t// but add the instead every time given profile is chosen\n\t\textraFilters: ''\n\t};\n\t\n\t/**\n\t * @constructor\n\t * @type OutputProfile\n\t * @param {Object} options\n\t */\n\tfunction OutputProfile(options) {\n\t\t_.extend(this, defaultProfile, options);\n\t}\n\t\n\tOutputProfile.prototype = {\n\t\t/**\n\t\t * Transforms tag name case depending on current profile settings\n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\ttagName: function(name) {\n\t\t\treturn stringCase(name, this.tag_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Transforms attribute name case depending on current profile settings \n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\tattributeName: function(name) {\n\t\t\treturn stringCase(name, this.attr_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns quote character for current profile\n\t\t * @returns {String}\n\t\t */\n\t\tattributeQuote: function() {\n\t\t\treturn this.attr_quotes == 'single' ? \"'\" : '\"';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns self-closing tag symbol for current profile\n\t\t * @param {String} param\n\t\t * @returns {String}\n\t\t */\n\t\tselfClosing: function(param) {\n\t\t\tif (this.self_closing_tag == 'xhtml')\n\t\t\t\treturn ' /';\n\t\t\t\n\t\t\tif (this.self_closing_tag === true)\n\t\t\t\treturn '/';\n\t\t\t\n\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns cursor token based on current profile settings\n\t\t * @returns {String}\n\t\t */\n\t\tcursor: function() {\n\t\t\treturn this.place_cursor ? require('utils').getCaretPlaceholder() : '';\n\t\t}\n\t};\n\t\n\t/**\n\t * Helper function that converts string case depending on \n\t * <code>caseValue</code> \n\t * @param {String} str String to transform\n\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t * <i>upper</i> and <i>leave</i>\n\t * @returns {String}\n\t */\n\tfunction stringCase(str, caseValue) {\n\t\tswitch (String(caseValue || '').toLowerCase()) {\n\t\t\tcase 'lower':\n\t\t\t\treturn str.toLowerCase();\n\t\t\tcase 'upper':\n\t\t\t\treturn str.toUpperCase();\n\t\t}\n\t\t\n\t\treturn str;\n\t}\n\t\n\t/**\n\t * Creates new output profile\n\t * @param {String} name Profile name\n\t * @param {Object} options Profile options\n\t */\n\tfunction createProfile(name, options) {\n\t\treturn profiles[name.toLowerCase()] = new OutputProfile(options);\n\t}\n\t\n\tfunction createDefaultProfiles() {\n\t\tcreateProfile('xhtml');\n\t\tcreateProfile('html', {self_closing_tag: false});\n\t\tcreateProfile('xml', {self_closing_tag: true, tag_nl: true});\n\t\tcreateProfile('plain', {tag_nl: false, indent: false, place_cursor: false});\n\t\tcreateProfile('line', {tag_nl: false, indent: false, extraFilters: 's'});\n\t}\n\t\n\tcreateDefaultProfiles();\n\t\n\treturn  {\n\t\t/**\n\t\t * Creates new output profile and adds it into internal dictionary\n\t\t * @param {String} name Profile name\n\t\t * @param {Object} options Profile options\n\t\t * @memberOf emmet.profile\n\t\t * @returns {Object} New profile\n\t\t */\n\t\tcreate: function(name, options) {\n\t\t\tif (arguments.length == 2)\n\t\t\t\treturn createProfile(name, options);\n\t\t\telse\n\t\t\t\t// create profile object only\n\t\t\t\treturn new OutputProfile(_.defaults(name || {}, defaultProfile));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns profile by its name. If profile wasn't found, returns\n\t\t * 'plain' profile\n\t\t * @param {String} name Profile name. Might be profile itself\n\t\t * @param {String} syntax. Optional. Current editor syntax. If defined,\n\t\t * profile is searched in resources first, then in predefined profiles\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name, syntax) {\n\t\t\tif (!name && syntax) {\n\t\t\t\t// search in user resources first\n\t\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\t\tif (profile) {\n\t\t\t\t\tname = profile;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!name) {\n\t\t\t\treturn profiles.plain;\n\t\t\t}\n\t\t\t\n\t\t\tif (name instanceof OutputProfile) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(name) && name.toLowerCase() in profiles) {\n\t\t\t\treturn profiles[name.toLowerCase()];\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes profile with specified name\n\t\t * @param {String} name Profile name\n\t\t */\n\t\tremove: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\tif (name in profiles)\n\t\t\t\tdelete profiles[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets all user-defined profiles\n\t\t */\n\t\treset: function() {\n\t\t\tprofiles = {};\n\t\t\tcreateDefaultProfiles();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that converts string case depending on \n\t\t * <code>caseValue</code> \n\t\t * @param {String} str String to transform\n\t\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t\t * <i>upper</i> and <i>leave</i>\n\t\t * @returns {String}\n\t\t */\n\t\tstringCase: stringCase\n\t};\n});/**\n * Utility module used to prepare text for pasting into back-end editor\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('editorUtils', function(require, _) {\n\treturn  {\n\t\t/**\n\t\t * Check if cursor is placed inside XHTML tag\n\t\t * @param {String} html Contents of the document\n\t\t * @param {Number} caretPos Current caret position inside tag\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInsideTag: function(html, caretPos) {\n\t\t\tvar reTag = /^<\\/?\\w[\\w\\:\\-]*.*?>/;\n\t\t\t\n\t\t\t// search left to find opening brace\n\t\t\tvar pos = caretPos;\n\t\t\twhile (pos > -1) {\n\t\t\t\tif (html.charAt(pos) == '<') \n\t\t\t\t\tbreak;\n\t\t\t\tpos--;\n\t\t\t}\n\t\t\t\n\t\t\tif (pos != -1) {\n\t\t\t\tvar m = reTag.exec(html.substring(pos));\n\t\t\t\tif (m && caretPos > pos && caretPos < pos + m[0].length)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sanitizes incoming editor data and provides default values for\n\t\t * output-specific info\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {String} syntax\n\t\t * @param {String} profile\n\t\t */\n\t\toutputInfo: function(editor, syntax, profile) {\n\t\t\t// most of this code makes sense for Java/Rhino environment\n\t\t\t// because string that comes from Java are not actually JS string\n\t\t\t// but Java String object so the have to be explicitly converted\n\t\t\t// to native string\n\t\t\tprofile = profile || editor.getProfileName();\n\t\t\treturn  {\n\t\t\t\t/** @memberOf outputInfo */\n\t\t\t\tsyntax: String(syntax || editor.getSyntax()),\n\t\t\t\tprofile: profile || null,\n\t\t\t\tcontent: String(editor.getContent())\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unindent content, thus preparing text for tag wrapping\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunindent: function(editor, text) {\n\t\t\treturn require('utils').unindentString(text, this.getCurrentLinePadding(editor));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns padding of current editor's line\n\t\t * @param {IEmmetEditor} Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tgetCurrentLinePadding: function(editor) {\n\t\t\treturn require('utils').getLinePadding(editor.getCurrentLine());\n\t\t}\n\t};\n});\n/**\n * Utility methods for Emmet actions\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('actionUtils', function(require, _) {\n\treturn {\n\t\tmimeTypes: {\n\t\t\t'gif' : 'image/gif',\n\t\t\t'png' : 'image/png',\n\t\t\t'jpg' : 'image/jpeg',\n\t\t\t'jpeg': 'image/jpeg',\n\t\t\t'svg' : 'image/svg+xml',\n\t\t\t'html': 'text/html',\n\t\t\t'htm' : 'text/html'\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts abbreviations from text stream, starting from the end\n\t\t * @param {String} str\n\t\t * @return {String} Abbreviation or empty string\n\t\t * @memberOf emmet.actionUtils\n\t\t */\n\t\textractAbbreviation: function(str) {\n\t\t\tvar curOffset = str.length;\n\t\t\tvar startIndex = -1;\n\t\t\tvar groupCount = 0;\n\t\t\tvar braceCount = 0;\n\t\t\tvar textCount = 0;\n\t\t\t\n\t\t\tvar utils = require('utils');\n\t\t\tvar parser = require('abbreviationParser');\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t\tcurOffset--;\n\t\t\t\tif (curOffset < 0) {\n\t\t\t\t\t// moved to the beginning of the line\n\t\t\t\t\tstartIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar ch = str.charAt(curOffset);\n\t\t\t\t\n\t\t\t\tif (ch == ']') {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == '[') {\n\t\t\t\t\tif (!braceCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbraceCount--;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\ttextCount++;\n\t\t\t\t} else if (ch == '{') {\n\t\t\t\t\tif (!textCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttextCount--;\n\t\t\t\t} else if (ch == ')') {\n\t\t\t\t\tgroupCount++;\n\t\t\t\t} else if (ch == '(') {\n\t\t\t\t\tif (!groupCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tgroupCount--;\n\t\t\t\t} else {\n\t\t\t\t\tif (braceCount || textCount) \n\t\t\t\t\t\t// respect all characters inside attribute sets or text nodes\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse if (!parser.isAllowedChar(ch) || (ch == '>' && utils.endsWithTag(str.substring(0, curOffset + 1)))) {\n\t\t\t\t\t\t// found stop symbol\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (startIndex != -1 && !textCount && !braceCount && !groupCount) \n\t\t\t\t// found something, remove some invalid symbols from the \n\t\t\t\t// beginning and return abbreviation\n\t\t\t\treturn str.substring(startIndex).replace(/^[\\*\\+\\>\\^]+/, '');\n\t\t\telse\n\t\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Gets image size from image byte stream.\n\t\t * @author http://romeda.org/rePublish/\n\t\t * @param {String} stream Image byte stream (use <code>IEmmetFile.read()</code>)\n\t\t * @return {Object} Object with <code>width</code> and <code>height</code> properties\n\t\t */\n\t\tgetImageSize: function(stream) {\n\t\t\tvar pngMagicNum = \"\\211PNG\\r\\n\\032\\n\",\n\t\t\t\tjpgMagicNum = \"\\377\\330\",\n\t\t\t\tgifMagicNum = \"GIF8\",\n\t\t\t\tnextByte = function() {\n\t\t\t\t\treturn stream.charCodeAt(pos++);\n\t\t\t\t};\n\t\t\n\t\t\tif (stream.substr(0, 8) === pngMagicNum) {\n\t\t\t\t// PNG. Easy peasy.\n\t\t\t\tvar pos = stream.indexOf('IHDR') + 4;\n\t\t\t\n\t\t\t\treturn { width:  (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte(),\n\t\t\t\t\t\t height: (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte() };\n\t\t\t\n\t\t\t} else if (stream.substr(0, 4) === gifMagicNum) {\n\t\t\t\tpos = 6;\n\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\twidth:  nextByte() | (nextByte() << 8),\n\t\t\t\t\theight: nextByte() | (nextByte() << 8)\n\t\t\t\t};\n\t\t\t\n\t\t\t} else if (stream.substr(0, 2) === jpgMagicNum) {\n\t\t\t\tpos = 2;\n\t\t\t\n\t\t\t\tvar l = stream.length;\n\t\t\t\twhile (pos < l) {\n\t\t\t\t\tif (nextByte() != 0xFF) return;\n\t\t\t\t\n\t\t\t\t\tvar marker = nextByte();\n\t\t\t\t\tif (marker == 0xDA) break;\n\t\t\t\t\n\t\t\t\t\tvar size = (nextByte() << 8) | nextByte();\n\t\t\t\t\n\t\t\t\t\tif (marker >= 0xC0 && marker <= 0xCF && !(marker & 0x4) && !(marker & 0x8)) {\n\t\t\t\t\t\tpos += 1;\n\t\t\t\t\t\treturn { height:  (nextByte() << 8) | nextByte(),\n\t\t\t\t\t\t\t\t width: (nextByte() << 8) | nextByte() };\n\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos += size - 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Captures context XHTML element from editor under current caret position.\n\t\t * This node can be used as a helper for abbreviation extraction\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Object}\n\t\t */\n\t\tcaptureContext: function(editor) {\n\t\t\tvar allowedSyntaxes = {'html': 1, 'xml': 1, 'xsl': 1};\n\t\t\tvar syntax = String(editor.getSyntax());\n\t\t\tif (syntax in allowedSyntaxes) {\n\t\t\t\tvar content = String(editor.getContent());\n\t\t\t\tvar tag = require('htmlMatcher').find(content, editor.getCaretPos());\n\t\t\t\t\n\t\t\t\tif (tag && tag.type == 'tag') {\n\t\t\t\t\tvar startTag = tag.open;\n\t\t\t\t\tvar contextNode = {\n\t\t\t\t\t\tname: startTag.name,\n\t\t\t\t\t\tattributes: []\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// parse attributes\n\t\t\t\t\tvar tagTree = require('xmlEditTree').parse(startTag.range.substring(content));\n\t\t\t\t\tif (tagTree) {\n\t\t\t\t\t\tcontextNode.attributes = _.map(tagTree.getAll(), function(item) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tname: item.name(),\n\t\t\t\t\t\t\t\tvalue: item.value()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn contextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find expression bounds in current editor at caret position. \n\t\t * On each character a <code>fn</code> function will be called and must \n\t\t * return <code>true</code> if current character meets requirements, \n\t\t * <code>false</code> otherwise\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Function} fn Function to test each character of expression\n\t\t * @return {Range}\n\t\t */\n\t\tfindExpressionBounds: function(editor, fn) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar il = content.length;\n\t\t\tvar exprStart = editor.getCaretPos() - 1;\n\t\t\tvar exprEnd = exprStart + 1;\n\t\t\t\t\n\t\t\t// start by searching left\n\t\t\twhile (exprStart >= 0 && fn(content.charAt(exprStart), exprStart, content)) exprStart--;\n\t\t\t\n\t\t\t// then search right\n\t\t\twhile (exprEnd < il && fn(content.charAt(exprEnd), exprEnd, content)) exprEnd++;\n\t\t\t\n\t\t\tif (exprEnd > exprStart) {\n\t\t\t\treturn require('range').create([++exprStart, exprEnd]);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Object} data\n\t\t * @returns {Boolean}\n\t\t */\n\t\tcompoundUpdate: function(editor, data) {\n\t\t\tif (data) {\n\t\t\t\tvar sel = editor.getSelectionRange();\n\t\t\t\teditor.replaceContent(data.data, data.start, data.end, true);\n\t\t\t\teditor.createSelection(data.caret, data.caret + sel.end - sel.start);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common syntax detection method for editors that doesn’t provide any\n\t\t * info about current syntax scope. \n\t\t * @param {IEmmetEditor} editor Current editor\n\t\t * @param {String} hint Any syntax hint that editor can provide \n\t\t * for syntax detection. Default is 'html'\n\t\t * @returns {String} \n\t\t */\n\t\tdetectSyntax: function(editor, hint) {\n\t\t\tvar syntax = hint || 'html';\n\t\t\t\n\t\t\tif (!require('resources').hasSyntax(syntax)) {\n\t\t\t\tsyntax = 'html';\n\t\t\t}\n\t\t\t\n\t\t\tif (syntax == 'html' && (this.isStyle(editor) || this.isInlineCSS(editor))) {\n\t\t\t\tsyntax = 'css';\n\t\t\t}\n\t\t\t\n\t\t\treturn syntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common method for detecting output profile\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {String}\n\t\t */\n\t\tdetectProfile: function(editor) {\n\t\t\tvar syntax = editor.getSyntax();\n\t\t\t\n\t\t\t// get profile from syntax definition\n\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\t\n\t\t\tswitch(syntax) {\n\t\t\t\tcase 'xml':\n\t\t\t\tcase 'xsl':\n\t\t\t\t\treturn 'xml';\n\t\t\t\tcase 'css':\n\t\t\t\t\tif (this.isInlineCSS(editor)) {\n\t\t\t\t\t\treturn 'line';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html':\n\t\t\t\t\tvar profile = require('resources').getVariable('profile');\n\t\t\t\t\tif (!profile) { // no forced profile, guess from content\n\t\t\t\t\t\t// html or xhtml?\n\t\t\t\t\t\tprofile = this.isXHTML(editor) ? 'xhtml': 'html';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn profile;\n\t\t\t}\n\n\t\t\treturn 'xhtml';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Tries to detect if current document is XHTML one.\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisXHTML: function(editor) {\n\t\t\treturn editor.getContent().search(/<!DOCTYPE[^>]+XHTML/i) != -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside &lt;style&gt; tag\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns\n\t\t */\n\t\tisStyle: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(content, caretPos);\n\t\t\treturn tag && tag.open.name.toLowerCase() == 'style' \n\t\t\t\t&& tag.innerRange.cmp(caretPos, 'lte', 'gte');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside \"style\" attribute of HTML\n\t\t * element\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineCSS: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tree = require('xmlEditTree').parseFromPosition(content, caretPos, true);\n            if (tree) {\n                var attr = tree.itemFromPosition(caretPos, true);\n                return attr && attr.name().toLowerCase() == 'style' \n                \t&& attr.valueRange(true).cmp(caretPos, 'lte', 'gte');\n            }\n            \n            return false;\n\t\t}\n\t};\n});/**\n * Utility functions to work with <code>AbbreviationNode</code> as HTML element\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationUtils', function(require, _) {\n\treturn {\n\t\t/**\n\t\t * Check if passed abbreviation node has matched snippet resource\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t * @memberOf abbreviationUtils\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is unary (no closing tag)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisUnary: function(node) {\n\t\t\tif (node.children.length || node._text || this.isSnippet(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tvar r = node.matchedResource();\n\t\t\treturn r && r.is_empty;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is inline-level (like &lt;strong&gt;, &lt;img&gt;)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInline: function(node) {\n\t\t\treturn node.isTextNode() \n\t\t\t\t|| !node.name() \n\t\t\t\t|| require('tagName').isInlineLevel(node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is block-level\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisBlock: function(node) {\n\t\t\treturn this.isSnippet(node) || !this.isInline(node);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if given node is a snippet\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function tests if passed node content contains HTML tags. \n\t\t * This function is mostly used for output formatting\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasTagsInContent: function(node) {\n\t\t\treturn require('utils').matchesTag(node.content);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if current element contains block-level children\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\thasBlockChildren: function(node) {\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \n\t\t\t\t|| _.any(node.children, function(child) {\n\t\t\t\t\treturn this.isBlock(child);\n\t\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Utility function that inserts content instead of <code>${child}</code>\n\t\t * variables on <code>text</code>\n\t\t * @param {String} text Text where child content should be inserted\n\t\t * @param {String} childContent Content to insert\n\t\t * @param {Object} options\n\t\t * @returns {String\n\t\t */\n\t\tinsertChildContent: function(text, childContent, options) {\n\t\t\toptions = _.extend({\n\t\t\t\tkeepVariable: true,\n\t\t\t\tappendIfNoChild: true\n\t\t\t}, options || {});\n\t\t\t\n\t\t\tvar childVariableReplaced = false;\n\t\t\tvar utils = require('utils');\n\t\t\ttext = utils.replaceVariables(text, function(variable, name, data) {\n\t\t\t\tvar output = variable;\n\t\t\t\tif (name == 'child') {\n\t\t\t\t\t// add correct indentation\n\t\t\t\t\toutput = utils.padString(childContent, utils.getLinePaddingFromPosition(text, data.start));\n\t\t\t\t\tchildVariableReplaced = true;\n\t\t\t\t\tif (options.keepVariable)\n\t\t\t\t\t\toutput += variable;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn output;\n\t\t\t});\n\t\t\t\n\t\t\tif (!childVariableReplaced && options.appendIfNoChild) {\n\t\t\t\ttext += childContent;\n\t\t\t}\n\t\t\t\n\t\t\treturn text;\n\t\t}\n\t};\n});/**\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.define('base64', function(require, _) {\n\tvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\t\n\treturn {\n\t\t/**\n\t\t * Encodes data using base64 algorithm\n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} input\n\t\t * @returns {String}\n\t\t * @memberOf emmet.base64\n\t\t */\n\t\tencode : function(input) {\n\t\t\tvar output = [];\n\t\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4, cdp1, cdp2, cdp3;\n\t\t\tvar i = 0, il = input.length, b64 = chars;\n\n\t\t\twhile (i < il) {\n\n\t\t\t\tcdp1 = input.charCodeAt(i++);\n\t\t\t\tcdp2 = input.charCodeAt(i++);\n\t\t\t\tcdp3 = input.charCodeAt(i++);\n\n\t\t\t\tchr1 = cdp1 & 0xff;\n\t\t\t\tchr2 = cdp2 & 0xff;\n\t\t\t\tchr3 = cdp3 & 0xff;\n\n\t\t\t\tenc1 = chr1 >> 2;\n\t\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\t\tenc4 = chr3 & 63;\n\n\t\t\t\tif (isNaN(cdp2)) {\n\t\t\t\t\tenc3 = enc4 = 64;\n\t\t\t\t} else if (isNaN(cdp3)) {\n\t\t\t\t\tenc4 = 64;\n\t\t\t\t}\n\n\t\t\t\toutput.push(b64.charAt(enc1) + b64.charAt(enc2) + b64.charAt(enc3) + b64.charAt(enc4));\n\t\t\t}\n\n\t\t\treturn output.join('');\n\t\t},\n\n\t\t/**\n\t\t * Decodes string using MIME base64 algorithm\n\t\t * \n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} data\n\t\t * @return {String}\n\t\t */\n\t\tdecode : function(data) {\n\t\t\tvar o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, tmpArr = [];\n\t\t\tvar b64 = chars, il = data.length;\n\n\t\t\tif (!data) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata += '';\n\n\t\t\tdo { // unpack four hexets into three octets using index points in b64\n\t\t\t\th1 = b64.indexOf(data.charAt(i++));\n\t\t\t\th2 = b64.indexOf(data.charAt(i++));\n\t\t\t\th3 = b64.indexOf(data.charAt(i++));\n\t\t\t\th4 = b64.indexOf(data.charAt(i++));\n\n\t\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n\t\t\t\to1 = bits >> 16 & 0xff;\n\t\t\t\to2 = bits >> 8 & 0xff;\n\t\t\t\to3 = bits & 0xff;\n\n\t\t\t\tif (h3 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1);\n\t\t\t\t} else if (h4 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2);\n\t\t\t\t} else {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2, o3);\n\t\t\t\t}\n\t\t\t} while (i < il);\n\n\t\t\treturn tmpArr.join('');\n\t\t}\n\t};\n});/**\n * HTML matcher: takes string and searches for HTML tag pairs for given position \n * \n * Unlike “classic” matchers, it parses content from the specified \n * position, not from the start, so it may work even outside HTML documents\n * (for example, inside strings of programming languages like JavaScript, Python \n * etc.)\n * @constructor\n * @memberOf __htmlMatcherDefine\n */\nemmet.define('htmlMatcher', function(require, _) {\n\t// Regular Expressions for parsing tags and attributes\n\tvar reOpenTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\tvar reCloseTag = /^<\\/([\\w\\:\\-]+)[^>]*>/;\n\t\n\tfunction openTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\tselfClose: !!match[3],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'open'\n\t\t};\n\t}\n\t\n\tfunction closeTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'close'\n\t\t};\n\t}\n\t\n\tfunction comment(i, match) {\n\t\treturn {\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, _.isNumber(match) ? match - i : match[0]),\n\t\t\ttype: 'comment'\n\t\t};\n\t}\n\t\n\t/**\n\t * Creates new tag matcher session\n\t * @param {String} text\n\t */\n\tfunction createMatcher(text) {\n\t\tvar memo = {}, m;\n\t\treturn {\n\t\t\t/**\n\t\t\t * Test if given position matches opening tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\topen: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'open' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Test if given position matches closing tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\tclose: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'close' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Matches either opening or closing tag for given position\n\t\t\t * @param i\n\t\t\t * @returns\n\t\t\t */\n\t\t\tmatches: function(i) {\n\t\t\t\tvar key = 'p' + i;\n\t\t\t\t\n\t\t\t\tif (!(key in memo)) {\n\t\t\t\t\tif (text.charAt(i) == '<') {\n\t\t\t\t\t\tvar substr = text.slice(i);\n\t\t\t\t\t\tif (m = substr.match(reOpenTag)) {\n\t\t\t\t\t\t\tmemo[key] = openTag(i, m);\n\t\t\t\t\t\t} else if (m = substr.match(reCloseTag)) {\n\t\t\t\t\t\t\tmemo[key] = closeTag(i, m);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// remember that given position contains no valid tag\n\t\t\t\t\t\t\tmemo[key] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn memo[key];\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Returns original text\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\ttext: function() {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction matches(text, pos, pattern) {\n\t\treturn text.substring(pos, pos + pattern.length) == pattern;\n\t}\n\t\n\t/**\n\t * Search for closing pair of opening tag\n\t * @param {Object} open Open tag instance\n\t * @param {Object} matcher Matcher instance\n\t */\n\tfunction findClosingPair(open, matcher) {\n\t\tvar stack = [], tag = null;\n\t\tvar text = matcher.text();\n\t\t\n\t\tfor (var pos = open.range.end, len = text.length; pos < len; pos++) {\n\t\t\tif (matches(text, pos, '<!--')) {\n\t\t\t\t// skip to end of comment\n\t\t\t\tfor (var j = pos; j < len; j++) {\n\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\tpos = j + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (tag = matcher.matches(pos)) {\n\t\t\t\tif (tag.type == 'open' && !tag.selfClose) {\n\t\t\t\t\tstack.push(tag.name);\n\t\t\t\t} else if (tag.type == 'close') {\n\t\t\t\t\tif (!stack.length) { // found valid pair?\n\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// check if current closing tag matches previously opened one\n\t\t\t\t\tif (_.last(stack) == tag.name) {\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\twhile (stack.length && !found) {\n\t\t\t\t\t\t\tvar last = stack.pop();\n\t\t\t\t\t\t\tif (last == tag.name) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!stack.length && !found) {\n\t\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Main function: search for tag pair in <code>text</code> for given \n\t\t * position\n\t\t * @memberOf htmlMatcher\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\tfind: function(text, pos) {\n\t\t\tvar range = require('range');\n\t\t\tvar matcher = createMatcher(text); \n\t\t\tvar open = null, close = null;\n\t\t\t\n\t\t\tfor (var i = pos; i >= 0; i--) {\n\t\t\t\tif (open = matcher.open(i)) {\n\t\t\t\t\t// found opening tag\n\t\t\t\t\tif (open.selfClose) {\n\t\t\t\t\t\tif (open.range.cmp(pos, 'lt', 'gt')) {\n\t\t\t\t\t\t\t// inside self-closing tag, found match\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// outside self-closing tag, continue\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclose = findClosingPair(open, matcher);\n\t\t\t\t\tif (close) {\n\t\t\t\t\t\t// found closing tag.\n\t\t\t\t\t\tvar r = range.create2(open.range.start, close.range.end);\n\t\t\t\t\t\tif (r.contains(pos)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (open.range.contains(pos)) {\n\t\t\t\t\t\t// we inside empty HTML tag like <br>\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = null;\n\t\t\t\t} else if (matches(text, i, '-->')) {\n\t\t\t\t\t// skip back to comment start\n\t\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\t// found another comment end, do nothing\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (matches(text, j, '<!--')) {\n\t\t\t\t\t\t\ti = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (matches(text, i, '<!--')) {\n\t\t\t\t\t// we're inside comment, match it\n\t\t\t\t\tvar j = i + 4, jl = text.length;\n\t\t\t\t\tfor (; j < jl; j++) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\tj += 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = comment(i, j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (open) {\n\t\t\t\tvar outerRange = null;\n\t\t\t\tvar innerRange = null;\n\t\t\t\t\n\t\t\t\tif (close) {\n\t\t\t\t\touterRange = range.create2(open.range.start, close.range.end);\n\t\t\t\t\tinnerRange = range.create2(open.range.end, close.range.start);\n\t\t\t\t} else {\n\t\t\t\t\touterRange = innerRange = range.create2(open.range.start, open.range.end);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (open.type == 'comment') {\n\t\t\t\t\t// adjust positions of inner range for comment\n\t\t\t\t\tvar _c = outerRange.substring(text);\n\t\t\t\t\tinnerRange.start += _c.length - _c.replace(/^<\\!--\\s*/, '').length;\n\t\t\t\t\tinnerRange.end -= _c.length - _c.replace(/\\s*-->$/, '').length;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\topen: open,\n\t\t\t\t\tclose: close,\n\t\t\t\t\ttype: open.type == 'comment' ? 'comment' : 'tag',\n\t\t\t\t\tinnerRange: innerRange,\n\t\t\t\t\tinnerContent: function() {\n\t\t\t\t\t\treturn this.innerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\touterRange: outerRange,\n\t\t\t\t\touterContent: function() {\n\t\t\t\t\t\treturn this.outerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\trange: !innerRange.length() || !innerRange.cmp(pos, 'lte', 'gte') ? outerRange : innerRange,\n\t\t\t\t\tcontent: function() {\n\t\t\t\t\t\treturn this.range.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\tsource: text\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * The same as <code>find()</code> method, but restricts matched result \n\t\t * to <code>tag</code> type\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\ttag: function(text, pos) {\n\t\t\tvar result = this.find(text, pos);\n\t\t\tif (result && result.type == 'tag') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Utility module for handling tabstops tokens generated by Emmet's \n * \"Expand Abbreviation\" action. The main <code>extract</code> method will take\n * raw text (for example: <i>${0} some ${1:text}</i>), find all tabstops \n * occurrences, replace them with tokens suitable for your editor of choice and \n * return object with processed text and list of found tabstops and their ranges.\n * For sake of portability (Objective-C/Java) the tabstops list is a plain \n * sorted array with plain objects.\n * \n * Placeholders with the same are meant to be <i>linked</i> in your editor.\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('tabStops', function(require, _) {\n\t/**\n\t * Global placeholder value, automatically incremented by \n\t * <code>variablesResolver()</code> function\n\t */\n\tvar startPlaceholderNum = 100;\n\t\n\tvar tabstopIndex = 0;\n\t\n\tvar defaultOptions = {\n\t\treplaceCarets: false,\n\t\tescape: function(ch) {\n\t\t\treturn '\\\\' + ch;\n\t\t},\n\t\ttabstop: function(data) {\n\t\t\treturn data.token;\n\t\t},\n\t\tvariable: function(data) {\n\t\t\treturn data.token;\n\t\t}\n\t};\n\t\n\t// XXX register output processor that will upgrade tabstops of parsed node\n\t// in order to prevent tabstop index conflicts\n\trequire('abbreviationParser').addOutputProcessor(function(text, node, type) {\n\t\tvar maxNum = 0;\n\t\tvar tabstops = require('tabStops');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar tsOptions = {\n\t\t\ttabstop: function(data) {\n\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\tif (group == 0)\n\t\t\t\t\treturn '${0}';\n\t\t\t\t\n\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\tif (data.placeholder) {\n\t\t\t\t\t// respect nested placeholders\n\t\t\t\t\tvar ix = group + tabstopIndex;\n\t\t\t\t\tvar placeholder = tabstops.processText(data.placeholder, tsOptions);\n\t\t\t\t\treturn '${' + ix + ':' + placeholder + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn '${' + (group + tabstopIndex) + '}';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t// upgrade tabstops\n\t\ttext = tabstops.processText(text, tsOptions);\n\t\t\n\t\t// resolve variables\n\t\ttext = utils.replaceVariables(text, tabstops.variablesResolver(node));\n\t\t\n\t\ttabstopIndex += maxNum + 1;\n\t\treturn text;\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Main function that looks for a tabstops in provided <code>text</code>\n\t\t * and returns a processed version of <code>text</code> with expanded \n\t\t * placeholders and list of tabstops found.\n\t\t * @param {String} text Text to process\n\t\t * @param {Object} options List of processor options:<br>\n\t\t * \n\t\t * <b>replaceCarets</b> : <code>Boolean</code> — replace all default\n\t\t * caret placeholders (like <i>{%::emmet-caret::%}</i>) with <i>${0:caret}</i><br>\n\t\t * \n\t\t * <b>escape</b> : <code>Function</code> — function that handle escaped\n\t\t * characters (mostly '$'). By default, it returns the character itself \n\t\t * to be displayed as is in output, but sometimes you will use \n\t\t * <code>extract</code> method as intermediate solution for further \n\t\t * processing and want to keep character escaped. Thus, you should override\n\t\t * <code>escape</code> method to return escaped symbol (e.g. '\\\\$')<br>\n\t\t * \n\t\t * <b>tabstop</b> : <code>Function</code> – a tabstop handler. Receives \n\t\t * a single argument – an object describing token: its position, number \n\t\t * group, placeholder and token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * <b>variable</b> : <code>Function</code> – variable handler. Receives \n\t\t * a single argument – an object describing token: its position, name \n\t\t * and original token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * @returns {Object} Object with processed <code>text</code> property\n\t\t * and array of <code>tabstops</code> found\n\t\t * @memberOf tabStops\n\t\t */\n\t\textract: function(text, options) {\n\t\t\t// prepare defaults\n\t\t\tvar utils = require('utils');\n\t\t\tvar placeholders = {carets: ''};\n\t\t\tvar marks = [];\n\t\t\t\n\t\t\toptions = _.extend({}, defaultOptions, options, {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar token = data.token;\n\t\t\t\t\tvar ret = '';\n\t\t\t\t\tif (data.placeholder == 'cursor') {\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: 'carets',\n\t\t\t\t\t\t\tvalue: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unify placeholder value for single group\n\t\t\t\t\t\tif ('placeholder' in data)\n\t\t\t\t\t\t\tplaceholders[data.group] = data.placeholder;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (data.group in placeholders)\n\t\t\t\t\t\t\tret = placeholders[data.group];\n\t\t\t\t\t\t\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: data.group,\n\t\t\t\t\t\t\tvalue: ret\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (options.replaceCarets) {\n\t\t\t\ttext = text.replace(new RegExp( utils.escapeForRegexp( utils.getCaretPlaceholder() ), 'g'), '${0:cursor}');\n\t\t\t}\n\t\t\t\n\t\t\t// locate tabstops and unify group's placeholders\n\t\t\ttext = this.processText(text, options);\n\t\t\t\n\t\t\t// now, replace all tabstops with placeholders\n\t\t\tvar buf = utils.stringBuilder(), lastIx = 0;\n\t\t\tvar tabStops = _.map(marks, function(mark) {\n\t\t\t\tbuf.append(text.substring(lastIx, mark.start));\n\t\t\t\t\n\t\t\t\tvar pos = buf.length;\n\t\t\t\tvar ph = placeholders[mark.group] || '';\n\t\t\t\t\n\t\t\t\tbuf.append(ph);\n\t\t\t\tlastIx = mark.end;\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\tgroup: mark.group,\n\t\t\t\t\tstart: pos,\n\t\t\t\t\tend:  pos + ph.length\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tbuf.append(text.substring(lastIx));\n\t\t\t\n\t\t\treturn {\n\t\t\t\ttext: buf.toString(),\n\t\t\t\ttabstops: _.sortBy(tabStops, 'start')\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Text processing routine. Locates escaped characters and tabstops and\n\t\t * replaces them with values returned by handlers defined in \n\t\t * <code>options</code>\n\t\t * @param {String} text\n\t\t * @param {Object} options See <code>extract</code> method options \n\t\t * description\n\t\t * @returns {String}\n\t\t */\n\t\tprocessText: function(text, options) {\n\t\t\toptions = _.extend({}, defaultOptions, options);\n\t\t\t\n\t\t\tvar buf = require('utils').stringBuilder();\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(text);\n\t\t\tvar ch, m, a;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '\\\\' && !stream.eol()) {\n\t\t\t\t\t// handle escaped character\n\t\t\t\t\tbuf.append(options.escape(stream.next()));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ta = ch;\n\t\t\t\t\n\t\t\t\tif (ch == '$') {\n\t\t\t\t\t// looks like a tabstop\n\t\t\t\t\tstream.start = stream.pos - 1;\n\t\t\t\t\t\n\t\t\t\t\tif (m = stream.match(/^[0-9]+/)) {\n\t\t\t\t\t\t// it's $N\n\t\t\t\t\t\ta = options.tabstop({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: stream.current().substr(1),\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([a-z_\\-][\\w\\-]*)\\}/)) {\n\t\t\t\t\t\t// ${variable}\n\t\t\t\t\t\ta = options.variable({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([0-9]+)(:.+?)?\\}/, false)) {\n\t\t\t\t\t\t// ${N:value} or ${N} placeholder\n\t\t\t\t\t\t// parse placeholder, including nested ones\n\t\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar obj = {\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar placeholder = obj.token.substring(obj.group.length + 2, obj.token.length - 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (placeholder) {\n\t\t\t\t\t\t\tobj.placeholder = placeholder.substr(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ta = options.tabstop(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbuf.append(a);\n\t\t\t}\n\t\t\t\n\t\t\treturn buf.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Upgrades tabstops in output node in order to prevent naming conflicts\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {Number} offset Tab index offset\n\t\t * @returns {Number} Maximum tabstop index in element\n\t\t */\n\t\tupgrade: function(node, offset) {\n\t\t\tvar maxNum = 0;\n\t\t\tvar options = {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\t\t\t\n\t\t\t\t\tif (data.placeholder)\n\t\t\t\t\t\treturn '${' + (group + offset) + ':' + data.placeholder + '}';\n\t\t\t\t\telse\n\t\t\t\t\t\treturn '${' + (group + offset) + '}';\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t_.each(['start', 'end', 'content'], function(p) {\n\t\t\t\tnode[p] = this.processText(node[p], options);\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn maxNum;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that produces a callback function for \n\t\t * <code>replaceVariables()</code> method from {@link utils}\n\t\t * module. This callback will replace variable definitions (like \n\t\t * ${var_name}) with their value defined in <i>resource</i> module,\n\t\t * or outputs tabstop with variable name otherwise.\n\t\t * @param {AbbreviationNode} node Context node\n\t\t * @returns {Function}\n\t\t */\n\t\tvariablesResolver: function(node) {\n\t\t\tvar placeholderMemo = {};\n\t\t\tvar res = require('resources');\n\t\t\treturn function(str, varName) {\n\t\t\t\t// do not mark `child` variable as placeholder – it‘s a reserved\n\t\t\t\t// variable name\n\t\t\t\tif (varName == 'child')\n\t\t\t\t\treturn str;\n\t\t\t\t\n\t\t\t\tif (varName == 'cursor')\n\t\t\t\t\treturn require('utils').getCaretPlaceholder();\n\t\t\t\t\n\t\t\t\tvar attr = node.attribute(varName);\n\t\t\t\tif (!_.isUndefined(attr) && attr !== str) {\n\t\t\t\t\treturn attr;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar varValue = res.getVariable(varName);\n\t\t\t\tif (varValue)\n\t\t\t\t\treturn varValue;\n\t\t\t\t\n\t\t\t\t// output as placeholder\n\t\t\t\tif (!placeholderMemo[varName])\n\t\t\t\t\tplaceholderMemo[varName] = startPlaceholderNum++;\n\t\t\t\t\t\n\t\t\t\treturn '${' + placeholderMemo[varName] + ':' + varName + '}';\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets global tabstop index. When parsed tree is converted to output\n\t\t * string (<code>AbbreviationNode.toString()</code>), all tabstops \n\t\t * defined in snippets and elements are upgraded in order to prevent\n\t\t * naming conflicts of nested. For example, <code>${1}</code> of a node\n\t\t * should not be linked with the same placehilder of the child node.\n\t\t * By default, <code>AbbreviationNode.toString()</code> automatically\n\t\t * upgrades tabstops of the same index for each node and writes maximum\n\t\t * tabstop index into the <code>tabstopIndex</code> variable. To keep\n\t\t * this variable at reasonable value, it is recommended to call \n\t\t * <code>resetTabstopIndex()</code> method each time you expand variable \n\t\t * @returns\n\t\t */\n\t\tresetTabstopIndex: function() {\n\t\t\ttabstopIndex = 0;\n\t\t\tstartPlaceholderNum = 100;\n\t\t}\n\t};\n});/**\n * Common module's preferences storage. This module \n * provides general storage for all module preferences, their description and\n * default values.<br><br>\n * \n * This module can also be used to list all available properties to create \n * UI for updating properties\n * \n * @memberOf __preferencesDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('preferences', function(require, _) {\n\tvar preferences = {};\n\tvar defaults = {};\n\tvar _dbgDefaults = null;\n\tvar _dbgPreferences = null;\n\n\tfunction toBoolean(val) {\n\t\tif (_.isString(val)) {\n\t\t\tval = val.toLowerCase();\n\t\t\treturn val == 'yes' || val == 'true' || val == '1';\n\t\t}\n\n\t\treturn !!val;\n\t}\n\t\n\tfunction isValueObj(obj) {\n\t\treturn _.isObject(obj) \n\t\t\t&& 'value' in obj \n\t\t\t&& _.keys(obj).length < 3;\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new preference item with default value\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @param {String} description Item textual description\n\t\t * @memberOf preferences\n\t\t */\n\t\tdefine: function(name, value, description) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = {\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tdescription: description\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tdefaults[k] = isValueObj(v) ? v : {value: v};\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Updates preference item value. Preference value should be defined\n\t\t * first with <code>define</code> method.\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @memberOf preferences\n\t\t */\n\t\tset: function(name, value) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = value;\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tif (!(k in defaults)) {\n\t\t\t\t\tthrow 'Property \"' + k + '\" is not defined. You should define it first with `define` method of current module';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// do not set value if it equals to default value\n\t\t\t\tif (v !== defaults[k].value) {\n\t\t\t\t\t// make sure we have value of correct type\n\t\t\t\t\tswitch (typeof defaults[k].value) {\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tv = toBoolean(v);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tv = parseInt(v + '', 10) || 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: // convert to string\n\t\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\t\tv += '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tpreferences[k] = v;\n\t\t\t\t} else if  (k in preferences) {\n\t\t\t\t\tdelete preferences[k];\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns preference value\n\t\t * @param {String} name\n\t\t * @returns {String} Returns <code>undefined</code> if preference is \n\t\t * not defined\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (name in preferences)\n\t\t\t\treturn preferences[name];\n\t\t\t\n\t\t\tif (name in defaults)\n\t\t\t\treturn defaults[name].value;\n\t\t\t\n\t\t\treturn void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma-separated preference value as array of values\n\t\t * @param {String} name\n\t\t * @returns {Array} Returns <code>undefined</code> if preference is \n\t\t * not defined, <code>null</code> if string cannot be converted to array\n\t\t */\n\t\tgetArray: function(name) {\n\t\t\tvar val = this.get(name);\n\t\t\tif (_.isUndefined(val) || val === null || val === '')  {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tval = _.map(val.split(','), require('utils').trim);\n\t\t\tif (!val.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\treturn val;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma and colon-separated preference value as dictionary\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetDict: function(name) {\n\t\t\tvar result = {};\n\t\t\t_.each(this.getArray(name), function(val) {\n\t\t\t\tvar parts = val.split(':');\n\t\t\t\tresult[parts[0]] = parts[1];\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns description of preference item\n\t\t * @param {String} name Preference name\n\t\t * @returns {Object}\n\t\t */\n\t\tdescription: function(name) {\n\t\t\treturn name in defaults ? defaults[name].description : void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Completely removes specified preference(s)\n\t\t * @param {String} name Preference name (or array of names)\n\t\t */\n\t\tremove: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t_.each(name, function(key) {\n\t\t\t\tif (key in preferences)\n\t\t\t\t\tdelete preferences[key];\n\t\t\t\t\n\t\t\t\tif (key in defaults)\n\t\t\t\t\tdelete defaults[key];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns sorted list of all available properties\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.map(_.keys(defaults).sort(), function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tname: key,\n\t\t\t\t\tvalue: this.get(key),\n\t\t\t\t\ttype: typeof defaults[key].value,\n\t\t\t\t\tdescription: defaults[key].description\n\t\t\t\t};\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Loads user-defined preferences from JSON\n\t\t * @param {Object} json\n\t\t * @returns\n\t\t */\n\t\tload: function(json) {\n\t\t\t_.each(json, function(value, key) {\n\t\t\t\tthis.set(key, value);\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Returns hash of user-modified preferences\n\t\t * @returns {Object}\n\t\t */\n\t\texportModified: function() {\n\t\t\treturn _.clone(preferences);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Reset to defaults\n\t\t * @returns\n\t\t */\n\t\treset: function() {\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: use empty storage\n\t\t */\n\t\t_startTest: function() {\n\t\t\t_dbgDefaults = defaults;\n\t\t\t_dbgPreferences = preferences;\n\t\t\tdefaults = {};\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: restore original storage\n\t\t */\n\t\t_stopTest: function() {\n\t\t\tdefaults = _dbgDefaults;\n\t\t\tpreferences = _dbgPreferences;\n\t\t}\n\t};\n});/**\n * Module for handling filters\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('filters', function(require, _) {\n\t/** List of registered filters */\n\tvar registeredFilters = {};\n\t\n\t/** Filters that will be applied for unknown syntax */\n\tvar basicFilters = 'html';\n\t\n\tfunction list(filters) {\n\t\tif (!filters)\n\t\t\treturn [];\n\t\t\n\t\tif (_.isString(filters))\n\t\t\treturn filters.split(/[\\|,]/g);\n\t\t\n\t\treturn filters;\n\t}\n\t\n\treturn  {\n\t\t/**\n\t\t * Register new filter\n\t\t * @param {String} name Filter name\n\t\t * @param {Function} fn Filter function\n\t\t */\n\t\tadd: function(name, fn) {\n\t\t\tregisteredFilters[name] = fn;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Apply filters for final output tree\n\t\t * @param {AbbreviationNode} tree Output tree\n\t\t * @param {Array} filters List of filters to apply. Might be a \n\t\t * <code>String</code>\n\t\t * @param {Object} profile Output profile, defined in <i>profile</i> \n\t\t * module. Filters defined it profile are not used, <code>profile</code>\n\t\t * is passed to filter function\n\t\t * @memberOf emmet.filters\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tapply: function(tree, filters, profile) {\n\t\t\tvar utils = require('utils');\n\t\t\tprofile = require('profile').get(profile);\n\t\t\t\n\t\t\t_.each(list(filters), function(filter) {\n\t\t\t\tvar name = utils.trim(filter.toLowerCase());\n\t\t\t\tif (name && name in registeredFilters) {\n\t\t\t\t\ttree = registeredFilters[name](tree, profile);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Composes list of filters that should be applied to a tree, based on \n\t\t * passed data\n\t\t * @param {String} syntax Syntax name ('html', 'css', etc.)\n\t\t * @param {Object} profile Output profile\n\t\t * @param {String} additionalFilters List or pipe-separated\n\t\t * string of additional filters to apply\n\t\t * @returns {Array}\n\t\t */\n\t\tcomposeList: function(syntax, profile, additionalFilters) {\n\t\t\tprofile = require('profile').get(profile);\n\t\t\tvar filters = list(profile.filters || require('resources').findItem(syntax, 'filters') || basicFilters);\n\t\t\t\n\t\t\tif (profile.extraFilters) {\n\t\t\t\tfilters = filters.concat(list(profile.extraFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (additionalFilters) {\n\t\t\t\tfilters = filters.concat(list(additionalFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (!filters || !filters.length) {\n\t\t\t\t// looks like unknown syntax, apply basic filters\n\t\t\t\tfilters = list(basicFilters);\n\t\t\t}\n\t\t\t\t\n\t\t\treturn filters;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts filter list from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Array} Array with cleaned abbreviation and list of \n\t\t * extracted filters\n\t\t */\n\t\textractFromAbbreviation: function(abbr) {\n\t\t\tvar filters = '';\n\t\t\tabbr = abbr.replace(/\\|([\\w\\|\\-]+)$/, function(str, p1){\n\t\t\t\tfilters = p1;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\treturn [abbr, list(filters)];\n\t\t}\n\t};\n});/**\n * Module that contains factories for element types used by Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('elements', function(require, _) {\n\tvar factories = {};\n\tvar reAttrs = /([\\w\\-:]+)\\s*=\\s*(['\"])(.*?)\\2/g;\n\t\n\tvar result = {\n\t\t/**\n\t\t * Create new element factory\n\t\t * @param {String} name Element identifier\n\t\t * @param {Function} factory Function that produces element of specified \n\t\t * type. The object generated by this factory is automatically \n\t\t * augmented with <code>type</code> property pointing to element\n\t\t * <code>name</code>\n\t\t * @memberOf elements\n\t\t */\n\t\tadd: function(name, factory) {\n\t\t\tvar that = this;\n\t\t\tfactories[name] = function() {\n\t\t\t\tvar elem = factory.apply(that, arguments);\n\t\t\t\tif (elem)\n\t\t\t\t\telem.type = name;\n\t\t\t\t\n\t\t\t\treturn elem;\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns factory for specified name\n\t\t * @param {String} name\n\t\t * @returns {Function}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn factories[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates new element with specified type\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tcreate: function(name) {\n\t\t\tvar args = [].slice.call(arguments, 1);\n\t\t\tvar factory = this.get(name);\n\t\t\treturn factory ? factory.apply(this, args) : null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is of specified type\n\t\t * @param {Object} elem\n\t\t * @param {String} type\n\t\t * @returns {Boolean}\n\t\t */\n\t\tis: function(elem, type) {\n\t\t\treturn elem && elem.type === type;\n\t\t}\n\t};\n\t\n\t// register resource references\n\tfunction commonFactory(value) {\n\t\treturn {data: value};\n\t}\n\t\n\t/**\n\t * Element factory\n\t * @param {String} elementName Name of output element\n\t * @param {String} attrs Attributes definition. You may also pass\n\t * <code>Array</code> where each contains object with <code>name</code> \n\t * and <code>value</code> properties, or <code>Object</code>\n\t * @param {Boolean} isEmpty Is expanded element should be empty\n\t */\n\tresult.add('element', function(elementName, attrs, isEmpty) {\n\t\tvar ret = {\n\t\t\t/** @memberOf __emmetDataElement */\n\t\t\tname: elementName,\n\t\t\tis_empty: !!isEmpty\n\t\t};\n\t\t\n\t\tif (attrs) {\n\t\t\tret.attributes = [];\n\t\t\tif (_.isArray(attrs)) {\n\t\t\t\tret.attributes = attrs;\n\t\t\t} else if (_.isString(attrs)) {\n\t\t\t\tvar m;\n\t\t\t\twhile (m = reAttrs.exec(attrs)) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\tvalue: m[3]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_.each(attrs, function(value, name) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: name, \n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn ret;\n\t});\n\t\n\tresult.add('snippet', commonFactory);\n\tresult.add('reference', commonFactory);\n\tresult.add('empty', function() {\n\t\treturn {};\n\t});\n\t\n\treturn result;\n});/**\n * Abstract implementation of edit tree interface.\n * Edit tree is a named container of editable “name-value” child elements, \n * parsed from <code>source</code>. This container provides convenient methods\n * for editing/adding/removing child elements. All these update actions are\n * instantly reflected in the <code>source</code> code with respect of formatting.\n * <br><br>\n * For example, developer can create an edit tree from CSS rule and add or \n * remove properties from it–all changes will be immediately reflected in the \n * original source.\n * <br><br>\n * All classes defined in this module should be extended the same way as in\n * Backbone framework: using <code>extend</code> method to create new class and \n * <code>initialize</code> method to define custom class constructor.\n * \n * @example\n * <pre><code>\n * var MyClass = require('editTree').EditElement.extend({\n * \tinitialize: function() {\n * \t\t// constructor code here\n * \t}\n * });\n * \n * var elem = new MyClass(); \n * </code></pre>\n * \n * \n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __editTreeDefine\n */\nemmet.define('editTree', function(require, _, core) {\n\tvar range = require('range').create;\n\t\n\t/**\n\t * Named container of edited source\n\t * @type EditContainer\n\t * @param {String} source\n\t * @param {Object} options\n\t */\n\tfunction EditContainer(source, options) {\n\t\tthis.options = _.extend({offset: 0}, options);\n\t\t/**\n\t\t * Source code of edited structure. All changes in the structure are \n\t\t * immediately reflected into this property\n\t\t */\n\t\tthis.source = source;\n\t\t\n\t\t/** \n\t\t * List of all editable children\n\t\t * @private \n\t\t */\n\t\tthis._children = [];\n\t\t\n\t\t/**\n\t\t * Hash of all positions of container\n\t\t * @private\n\t\t */\n\t\tthis._positions = {\n\t\t\tname: 0\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditContainer.extend = core.extend;\n\t\n\tEditContainer.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Replace substring of tag's source\n\t\t * @param {String} value\n\t\t * @param {Number} start\n\t\t * @param {Number} end\n\t\t * @private\n\t\t */\n\t\t_updateSource: function(value, start, end) {\n\t\t\t// create modification range\n\t\t\tvar r = range(start, _.isUndefined(end) ? 0 : end - start);\n\t\t\tvar delta = value.length - r.length();\n\t\t\t\n\t\t\tvar update = function(obj) {\n\t\t\t\t_.each(obj, function(v, k) {\n\t\t\t\t\tif (v >= r.end)\n\t\t\t\t\t\tobj[k] += delta;\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\t// update affected positions of current container\n\t\t\tupdate(this._positions);\n\t\t\t\n\t\t\t// update affected positions of children\n\t\t\t_.each(this.list(), function(item) {\n\t\t\t\tupdate(item._positions);\n\t\t\t});\n\t\t\t\n\t\t\tthis.source = require('utils').replaceSubstring(this.source, value, r);\n\t\t},\n\t\t\t\n\t\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {EditElement} Newly created element\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\t// this is abstract implementation\n\t\t\tvar item = new EditElement(name, value);\n\t\t\tthis._children.push(item);\n\t\t\treturn item;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns attribute object\n\t\t * @param {String} name Attribute name or its index\n\t\t * @returns {EditElement}\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (_.isNumber(name))\n\t\t\t\treturn this.list()[name];\n\t\t\t\n\t\t\tif (_.isString(name))\n\t\t\t\treturn _.find(this.list(), function(prop) {\n\t\t\t\t\treturn prop.name() === name;\n\t\t\t\t});\n\t\t\t\n\t\t\treturn name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all children by name or indexes\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tgetAll: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t// split names and indexes\n\t\t\tvar names = [], indexes = [];\n\t\t\t_.each(name, function(item) {\n\t\t\t\tif (_.isString(item))\n\t\t\t\t\tnames.push(item);\n\t\t\t\telse if (_.isNumber(item))\n\t\t\t\t\tindexes.push(item);\n\t\t\t});\n\t\t\t\n\t\t\treturn _.filter(this.list(), function(attribute, i) {\n\t\t\t\treturn _.include(indexes, i) || _.include(names, attribute.name());\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or updates element value. If such element doesn't exists,\n\t\t * it will be created automatically and added at the end of child list.\n\t\t * @param {String} name Element name or its index\n\t\t * @param {String} value New element value\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(name, value, pos) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element)\n\t\t\t\treturn element.value(value);\n\t\t\t\n\t\t\tif (!_.isUndefined(value)) {\n\t\t\t\t// no such element — create it\n\t\t\t\treturn this.add(name, value, pos);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all values of child elements found by <code>getAll()</code>\n\t\t * method\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tvalues: function(name) {\n\t\t\treturn _.map(this.getAll(name), function(element) {\n\t\t\t\treturn element.value();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remove child element\n\t\t * @param {String} name Property name or its index\n\t\t */\n\t\tremove: function(name) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element) {\n\t\t\t\tthis._updateSource('', element.fullRange());\n\t\t\t\tthis._children = _.without(this._children, element);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all editable child elements\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn this._children;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of editble child in list\n\t\t * @param {Object} item\n\t\t * @returns {Number}\n\t\t */\n\t\tindexOf: function(item) {\n\t\t\treturn _.indexOf(this.list(), this.get(item));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets or gets container name\n\t\t * @param {String} val New name. If not passed, current \n\t\t * name is returned\n\t\t * @return {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis._updateSource(val, this._positions.name, this._positions.name + this._name.length);\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name range object\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of \n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this._positions.name + (isAbsolute ? this.options.offset : 0), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns range of current source\n\t\t * @param {Boolean} isAbsolute\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(isAbsolute ? this.options.offset : 0, this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element that belongs to specified position\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {EditElement}\n\t\t */\n\t\titemFromPosition: function(pos, isAbsolute) {\n\t\t\treturn _.find(this.list(), function(elem) {\n\t\t\t\treturn elem.range(isAbsolute).inside(pos);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns source code of current container \n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.source;\n\t\t}\n\t};\n\t\n\t/**\n\t * @param {EditContainer} parent\n\t * @param {Object} nameToken\n\t * @param {Object} valueToken\n\t */\n\tfunction EditElement(parent, nameToken, valueToken) {\n\t\t/** @type EditContainer */\n\t\tthis.parent = parent;\n\t\t\n\t\tthis._name = nameToken.value;\n\t\tthis._value = valueToken ? valueToken.value : '';\n\t\t\n\t\tthis._positions = {\n\t\t\tname: nameToken.start,\n\t\t\tvalue: valueToken ? valueToken.start : -1\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditElement.extend = core.extend;\n\t\n\tEditElement.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Make position absolute\n\t\t * @private\n\t\t * @param {Number} num\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {Boolean}\n\t\t */\n\t\t_pos: function(num, isAbsolute) {\n\t\t\treturn num + (isAbsolute ? this.parent.options.offset : 0);\n\t\t},\n\t\t\t\n\t\t/**\n\t\t * Sets of gets element value\n\t\t * @param {String} val New element value. If not passed, current \n\t\t * value is returned\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._value !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.valueRange());\n\t\t\t\tthis._value = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets element name\n\t\t * @param {String} val New element name. If not passed, current \n\t\t * name is returned\n\t\t * @returns {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.nameRange());\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element name token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tnamePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.name, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element value token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tvaluePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.value, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name\n\t\t * @param {Boolean} isAbsolute Return absolute range \n\t\t * @returns {Range}\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full element range, including possible indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\treturn this.range(isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element value range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tvalueRange: function(isAbsolute) {\n\t\t\treturn range(this.valuePosition(isAbsolute), this.value());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns current element string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.value();\n\t\t},\n\t\t\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\tEditContainer: EditContainer,\n\t\tEditElement: EditElement,\n\t\t\n\t\t/**\n\t\t * Creates token that can be fed to <code>EditElement</code>\n\t\t * @param {Number} start\n\t\t * @param {String} value\n\t\t * @param {String} type\n\t\t * @returns\n\t\t */\n\t\tcreateToken: function(start, value, type) {\n\t\t\tvar obj = {\n\t\t\t\tstart: start || 0,\n\t\t\t\tvalue: value || '',\n\t\t\t\ttype: type\n\t\t\t};\n\t\t\t\n\t\t\tobj.end = obj.start + obj.value.length;\n\t\t\treturn obj;\n\t\t}\n\t};\n});/**\n * CSS EditTree is a module that can parse a CSS rule into a tree with \n * convenient methods for adding, modifying and removing CSS properties. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __cssEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('cssEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: '\\n\\t',\n\t\tstyleSeparator: ': ',\n\t\toffset: 0\n\t};\n\t\n\tvar WHITESPACE_REMOVE_FROM_START = 1;\n\tvar WHITESPACE_REMOVE_FROM_END   = 2;\n\t\n\t/**\n\t * Returns range object\n\t * @param {Number} start\n\t * @param {Number} len \n\t * @returns {Range}\n\t */\n\tfunction range(start, len) {\n\t\treturn require('range').create(start, len);\n\t}\n\t\n\t/**\n\t * Removes whitespace tokens from the array ends\n\t * @param {Array} tokens\n\t * @param {Number} mask Mask indicating from which end whitespace should be \n\t * removed \n\t * @returns {Array}\n\t */\n\tfunction trimWhitespaceTokens(tokens, mask) {\n\t\tmask = mask || (WHITESPACE_REMOVE_FROM_START | WHITESPACE_REMOVE_FROM_END);\n\t\tvar whitespace = ['white', 'line'];\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_END) == WHITESPACE_REMOVE_FROM_END)\n\t\t\twhile (tokens.length && _.include(whitespace, _.last(tokens).type)) {\n\t\t\t\ttokens.pop();\n\t \t\t}\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_START) == WHITESPACE_REMOVE_FROM_START)\n\t\t\twhile (tokens.length && _.include(whitespace, tokens[0].type)) {\n\t\t\t\ttokens.shift();\n\t\t\t}\n\t\t\n\t\treturn tokens;\n\t}\n\t\n\t/**\n\t * Helper function that searches for selector range for <code>CSSEditRule</code>\n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findSelectorRange(it) {\n\t\tvar tokens = [], token;\n \t\tvar start = it.position(), end;\n \t\t\n \t\twhile (token = it.next()) {\n\t\t\tif (token.type == '{')\n\t\t\t\tbreak;\n\t\t\ttokens.push(token);\n\t\t}\n \t\t\n \t\ttrimWhitespaceTokens(tokens);\n \t\t\n \t\tif (tokens.length) {\n \t\t\tstart = tokens[0].start;\n \t\t\tend = _.last(tokens).end;\n \t\t} else {\n \t\t\tend = start;\n \t\t}\n \t\t\n \t\treturn range(start, end - start);\n\t}\n\t\n\t/**\n\t * Helper function that searches for CSS property value range next to\n\t * iterator's current position  \n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findValueRange(it) {\n\t\t// find value start position\n\t\tvar skipTokens = ['white', 'line', ':'];\n\t\tvar tokens = [], token, start, end;\n\t\t\n\t\tit.nextUntil(function(tok) {\n\t\t\treturn !_.include(skipTokens, this.itemNext().type);\n\t\t});\n\t\t\n\t\tstart = it.current().end;\n\t\t// consume value\n\t\twhile (token = it.next()) {\n\t\t\tif (token.type == '}' || token.type == ';') {\n\t\t\t\t// found value end\n\t\t\t\ttrimWhitespaceTokens(tokens, WHITESPACE_REMOVE_FROM_START \n\t\t\t\t\t\t| (token.type == '}' ? WHITESPACE_REMOVE_FROM_END : 0));\n\t\t\t\t\n\t\t\t\tif (tokens.length) {\n\t\t\t\t\tstart = tokens[0].start;\n\t\t\t\t\tend = _.last(tokens).end;\n\t\t\t\t} else {\n\t\t\t\t\tend = start;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\ttokens.push(token);\n\t\t}\n\t\t\n\t\t// reached the end of tokens list\n\t\tif (tokens.length) {\n\t\t\treturn range(tokens[0].start, _.last(tokens).end - tokens[0].start);\n\t\t}\n\t}\n\t\n\t/**\n\t * Finds parts of complex CSS value\n\t * @param {String} str\n\t * @returns {Array} Returns list of <code>Range</code>'s\n\t */\n\tfunction findParts(str) {\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(str);\n\t\tvar ch;\n\t\tvar result = [];\n\t\tvar sep = /[\\s\\u00a0,]/;\n\t\t\n\t\tvar add = function() {\n\t\t\tstream.next();\n\t\t\tresult.push(range(stream.start, stream.current()));\n\t\t\tstream.start = stream.pos;\n\t\t};\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch == '\"' || ch == \"'\") {\n\t\t\t\tstream.next();\n\t\t\t\tif (!stream.skipTo(ch)) break;\n\t\t\t\tadd();\n\t\t\t} else if (ch == '(') {\n\t\t\t\t// function found, may have nested function\n\t\t\t\tstream.backUp(1);\n\t\t\t\tif (!stream.skipToPair('(', ')')) break;\n\t\t\t\tstream.backUp(1);\n\t\t\t\tadd();\n\t\t\t} else {\n\t\t\t\tif (sep.test(ch)) {\n\t\t\t\t\tresult.push(range(stream.start, stream.current().length - 1));\n\t\t\t\t\tstream.eatWhile(sep);\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd();\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * A bit hacky way to identify invalid CSS property definition: when user\n\t * starts writing new abbreviation in CSS rule, he actually creates invalid\n\t * CSS property definition and this method tries to identify such abbreviation\n\t * and prevent it from being added to CSS edit tree \n\t * @param {TokenIterator} it\n\t */\n\tfunction isValidIdentifier(it) {\n//\t\treturn true;\n\t\tvar tokens = it.tokens;\n\t\tfor (var i = it._i + 1, il = tokens.length; i < il; i++) {\n\t\t\tif (tokens[i].type == ':')\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (tokens[i].type == 'identifier' || tokens[i].type == 'line')\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * @class\n\t * @extends EditContainer\n\t */\n\tvar CSSEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\t/** @type TokenIterator */\n\t \t\tvar it = require('tokenIterator').create(\n\t \t\t\t\trequire('cssParser').parse(source));\n\t \t\t\n\t \t\tvar selectorRange = findSelectorRange(it);\n\t \t\tthis._positions.name = selectorRange.start;\n\t \t\tthis._name = selectorRange.substring(source);\n\t \t\t\n\t \t\tif (!it.current() || it.current().type != '{')\n\t \t\t\tthrow 'Invalid CSS rule';\n\t \t\t\n\t \t\tthis._positions.contentStart = it.position() + 1;\n\t \t\t\n\t \t\t// consume properties\n\t \t\tvar propertyRange, valueRange, token;\n\t\t\twhile (token = it.next()) {\n\t\t\t\tif (token.type == 'identifier' && isValidIdentifier(it)) {\n\t\t\t\t\tpropertyRange = range(token);\n\t\t\t\t\tvalueRange = findValueRange(it);\n\t\t\t\t\tvar end = (it.current() && it.current().type == ';') \n\t\t\t\t\t\t? range(it.current())\n\t\t\t\t\t\t: range(valueRange.end, 0);\n\t\t\t\t\tthis._children.push(new CSSEditElement(this,\n\t\t\t\t\t\t\teditTree.createToken(propertyRange.start, propertyRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(valueRange.start, valueRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(end.start, end.substring(source))\n\t\t\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar source = this.source;\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {CSSEditProperty} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t// a small hack here:\n\t\t\t\t// Sometimes users add empty lines before properties to logically\n\t\t\t\t// separate groups of properties. In this case, a blind copy of\n\t\t\t\t// characters between rules may lead to undesired behavior,\n\t\t\t\t// especially when current rule is duplicated or used as a donor\n\t\t\t\t// to create new rule.\n\t\t\t\t// To solve this issue, we‘ll take only last newline indentation\n\t\t\t\tvar lines = utils.splitByLines(p.styleBefore);\n\t\t\t\tif (lines.length > 1) {\n\t\t\t\t\tp.styleBefore = '\\n' + _.last(lines);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp.styleSeparator = source.substring(p.nameRange().end, p.valuePosition());\n\t\t\t\t\n\t\t\t\t// graceful and naive comments removal \n\t\t\t\tp.styleBefore = _.last(p.styleBefore.split('*/'));\n\t\t\t\tp.styleSeparator = p.styleSeparator.replace(/\\/\\*.*?\\*\\//g, '');\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new CSS property \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {CSSEditProperty}\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator');\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t/** @type CSSEditProperty */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\t// make sure that donor has terminating semicolon\n\t\t\t\tdonor.end(';');\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator');\n\t\t\t}\n\t\t\t\n\t\t\tvar nameToken = editTree.createToken(start + styles.styleBefore.length, name);\n\t\t\tvar valueToken = editTree.createToken(nameToken.end + styles.styleSeparator.length, value);\n\t\t\t\n\t\t\tvar property = new CSSEditElement(this, nameToken, valueToken,\n\t\t\t\t\teditTree.createToken(valueToken.end, ';'));\n\t\t\t\n\t\t\t_.extend(property, styles);\n\t\t\t\n\t\t\t// write new property into the source\n\t\t\tthis._updateSource(property.styleBefore + property.toString(), start);\n\t\t\t\n\t\t\t// insert new property\n\t\t\tthis._children.splice(pos, 0, property);\n\t\t\treturn property;\n\t\t}\n\t});\n\t\n\t/**\n\t * @class\n\t * @type CSSEditElement\n\t * @constructor\n\t */\n\tvar CSSEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(rule, name, value, end) {\n\t\t\tthis.styleBefore = rule.options.styleBefore;\n\t\t\tthis.styleSeparator = rule.options.styleSeparator;\n\t\t\t\n\t\t\tthis._end = end.value;\n\t\t\tthis._positions.end = end.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ranges of complex value parts\n\t\t * @returns {Array} Returns <code>null</code> if value is not complex\n\t\t */\n\t\tvalueParts: function(isAbsolute) {\n\t\t\tvar parts = findParts(this.value());\n\t\t\tif (isAbsolute) {\n\t\t\t\tvar offset = this.valuePosition(true);\n\t\t\t\t_.each(parts, function(p) {\n\t\t\t\t\tp.shift(offset);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn parts;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets property end value (basically, it's a semicolon)\n\t\t * @param {String} val New end value. If not passed, current \n\t\t * value is returned\n\t\t */\n\t\tend: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._end !== val) {\n\t\t\t\tthis.parent._updateSource(val, this._positions.end, this._positions.end + this._end.length);\n\t\t\t\tthis._end = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns item string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator + this.value() + this.end();\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses CSS rule into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.cssEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new CSSEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse CSS rule from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractRule(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching CSS rule or caret outside rule bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts single CSS selector definition from source code\n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {Range}\n\t\t */\n\t\textractRule: function(content, pos, isBackward) {\n\t\t\tvar result = '';\n\t\t\tvar len = content.length;\n\t\t\tvar offset = pos;\n\t\t\tvar stopChars = '{}/\\\\<>\\n\\r';\n\t\t\tvar bracePos = -1, ch;\n\t\t\t\n\t\t\t// search left until we find rule edge\n\t\t\twhile (offset >= 0) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (ch == '}' && !isBackward) {\n\t\t\t\t\toffset++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset--;\n\t\t\t}\n\t\t\t\n\t\t\t// search right for full rule set\n\t\t\twhile (offset < len) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\tif (bracePos != -1)\n\t\t\t\t\t\tresult = content.substring(bracePos, offset + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\t\n\t\t\tif (result) {\n\t\t\t\t// find CSS selector\n\t\t\t\toffset = bracePos - 1;\n\t\t\t\tvar selector = '';\n\t\t\t\twhile (offset >= 0) {\n\t\t\t\t\tch = content.charAt(offset);\n\t\t\t\t\tif (stopChars.indexOf(ch) != -1) break;\n\t\t\t\t\toffset--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// also trim whitespace\n\t\t\t\tselector = content.substring(offset + 1, bracePos).replace(/^[\\s\\n\\r]+/m, '');\n\t\t\t\treturn require('range').create(bracePos - selector.length, result.length + selector.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t \t * Removes vendor prefix from CSS property\n\t \t * @param {String} name CSS property\n\t \t * @return {String}\n\t \t */\n\t \tbaseName: function(name) {\n\t \t\treturn name.replace(/^\\s*\\-\\w+\\-/, '');\n\t \t},\n\t \t\n\t \t/**\n\t \t * Finds parts of complex CSS value\n\t \t * @param {String} str\n\t \t * @returns {Array}\n\t \t */\n\t \tfindParts: findParts\n\t};\n});/**\n * XML EditTree is a module that can parse an XML/HTML element into a tree with \n * convenient methods for adding, modifying and removing attributes. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __xmlEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('xmlEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: ' ',\n\t\tstyleSeparator: '=',\n\t\tstyleQuote: '\"',\n\t\toffset: 0\n\t};\n\t\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/m;\n\t\n\tvar XMLEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tthis._positions.name = 1;\n\t\t\t\n\t\t\tvar attrToken = null;\n\t\t\tvar tokens = require('xmlParser').parse(source);\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t_.each(tokens, function(token) {\n\t\t\t\ttoken.value = range.create(token).substring(source);\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'tag':\n\t\t\t\t\t\tif (/^<[^\\/]+/.test(token.value)) {\n\t\t\t\t\t\t\tthis._name = token.value.substring(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'attribute':\n\t\t\t\t\t\t// add empty attribute\n\t\t\t\t\t\tif (attrToken) {\n\t\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tattrToken = token;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken, token));\n\t\t\t\t\t\tattrToken = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tif (attrToken) {\n\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar source = this.source;\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {EditElement} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t\n\t\t\t\tif (p.valuePosition() !== -1) {\n\t\t\t\t\tp.styleSeparator = source.substring(p.namePosition() + p.name().length, p.valuePosition() - p.styleQuote.length);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar editTree = require('editTree');\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t\n\t\t\t/** @type XMLEditAttribute */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t}\n\t\t\t\n\t\t\tvalue = styles.styleQuote + value + styles.styleQuote;\n\t\t\t\n\t\t\tvar attribute = new XMLEditElement(this, \n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length, name),\n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length + name.length \n\t\t\t\t\t\t\t+ styles.styleSeparator.length, value)\n\t\t\t\t\t);\n\t\t\t\n\t\t\t_.extend(attribute, styles);\n\t\t\t\n\t\t\t// write new attribute into the source\n\t\t\tthis._updateSource(attribute.styleBefore + attribute.toString(), start);\n\t\t\t\n\t\t\t// insert new attribute\n\t\t\tthis._children.splice(pos, 0, attribute);\n\t\t\treturn attribute;\n\t\t}\n\t});\n\t\n\tvar XMLEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(parent, nameToken, valueToken) {\n\t\t\tthis.styleBefore = parent.options.styleBefore;\n\t\t\tthis.styleSeparator = parent.options.styleSeparator;\n\t\t\t\n\t\t\tvar value = '', quote = parent.options.styleQuote;\n\t\t\tif (valueToken) {\n\t\t\t\tvalue = valueToken.value;\n\t\t\t\tquote = value.charAt(0);\n\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\tvalue = value.substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tquote = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (quote && value.charAt(value.length - 1) == quote) {\n\t\t\t\t\tvalue = value.substring(0, value.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.styleQuote = quote;\n\t\t\t\n\t\t\tthis._value = value;\n\t\t\tthis._positions.value = valueToken ? valueToken.start + quote.length : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator\n\t\t\t\t+ this.styleQuote + this.value() + this.styleQuote;\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses HTML element into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.htmlEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new XMLEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse HTML from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {XMLEditElement}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractTag(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching HTML tag or caret outside tag bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts nearest HTML tag range from <code>content</code>, starting at \n\t\t * <code>pos</code> position\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isBackward\n\t\t * @returns {Range}\n\t\t */\n\t\textractTag: function(content, pos, isBackward) {\n\t\t\tvar len = content.length, i;\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t// max extraction length. I don't think there may be tags larger \n\t\t\t// than 2000 characters length\n\t\t\tvar maxLen = Math.min(2000, len);\n\t\t\t\n\t\t\t/** @type Range */\n\t\t\tvar r = null;\n\t\t\t\n\t\t\tvar match = function(pos) {\n\t\t\t\tvar m;\n\t\t\t\tif (content.charAt(pos) == '<' && (m = content.substr(pos, maxLen).match(startTag)))\n\t\t\t\t\treturn range.create(pos, m[0]);\n\t\t\t};\n\t\t\t\n\t\t\t// lookup backward, in case we are inside tag already\n\t\t\tfor (i = pos; i >= 0; i--) {\n\t\t\t\tif (r = match(i)) break;\n\t\t\t}\n\t\t\t\n\t\t\tif (r && (r.inside(pos) || isBackward))\n\t\t\t\treturn r;\n\t\t\t\n\t\t\tif (!r && isBackward)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\t// search forward\n\t\t\tfor (i = pos; i < len; i++) {\n\t\t\t\tif (r = match(i))\n\t\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * 'Expand abbreviation' editor action: extracts abbreviation from current caret \n * position and replaces it with formatted output. \n * <br><br>\n * This behavior can be overridden with custom handlers which can perform \n * different actions when 'Expand Abbreviation' action is called.\n * For example, a CSS gradient handler that produces vendor-prefixed gradient\n * definitions registers its own expand abbreviation handler.  \n *  \n * @constructor\n * @memberOf __expandAbbreviationActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('expandAbbreviation', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar actions = require('actions');\n\t/**\n\t * 'Expand abbreviation' editor action \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\tactions.add('expand_abbreviation', function(editor, syntax, profile) {\n\t\tvar args = _.toArray(arguments);\n\t\t\n\t\t// normalize incoming arguments\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\targs[1] = info.syntax;\n\t\targs[2] = info.profile;\n\t\t\n\t\treturn handlers.exec(false, args);\n\t});\n\t\n\t/**\n\t * A special version of <code>expandAbbreviation</code> function: if it can't\n\t * find abbreviation, it will place Tab character at caret position\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\tactions.add('expand_abbreviation_with_tab', function(editor, syntax, profile) {\n\t\tvar sel = editor.getSelection();\n\t\tvar indent = require('resources').getVariable('indentation');\n\t\tif (sel) {\n\t\t\t// indent selection\n\t\t\tvar utils = require('utils');\n\t\t\tvar selRange = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = utils.padString(sel, indent);\n\t\t\t\n\t\t\teditor.replaceContent(indent + '${0}', editor.getCaretPos());\n\t\t\tvar replaceRange = require('range').create(editor.getCaretPos(), selRange.length());\n\t\t\teditor.replaceContent(content, replaceRange.start, replaceRange.end, true);\n\t\t\teditor.createSelection(replaceRange.start, replaceRange.start + content.length);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (!actions.run('expand_abbreviation', editor, syntax, profile)) {\n\t\t\teditor.replaceContent(indent, editor.getCaretPos());\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n\t\n\t// XXX setup default handler\n\t/**\n\t * Extracts abbreviation from current caret \n\t * position and replaces it with formatted output \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\thandlers.add(function(editor, syntax, profile) {\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = module.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile, \n\t\t\t\t\trequire('actionUtils').captureContext(editor));\n\t\t\tif (content) {\n\t\t\t\teditor.replaceContent(content, caretPos - abbr.length, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {order: -1});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds custom expand abbreviation handler. The passed function should \n\t\t * return <code>true</code> if it was performed successfully, \n\t\t * <code>false</code> otherwise.\n\t\t * \n\t\t * Added handlers will be called when 'Expand Abbreviation' is called\n\t\t * in order they were added\n\t\t * @memberOf expandAbbreviation\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for abbreviation in editor from current caret position\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tfindAbbreviation: function(editor) {\n\t\t\t/** @type Range */\n\t\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = String(editor.getContent());\n\t\t\tif (range.length()) {\n\t\t\t\t// abbreviation is selected by user\n\t\t\t\treturn range.substring(content);\n\t\t\t}\n\t\t\t\n\t\t\t// search for new abbreviation from current caret position\n\t\t\tvar curLine = editor.getCurrentLineRange();\n\t\t\treturn require('actionUtils').extractAbbreviation(content.substring(curLine.start, range.start));\n\t\t}\n\t};\n});/**\n * Action that wraps content with abbreviation. For convenience, action is \n * defined as reusable module\n * @constructor\n * @memberOf __wrapWithAbbreviationDefine\n */\nemmet.define('wrapWithAbbreviation', function(require, _) {\n\t/** Back-references to current module */\n\tvar module = null;\n\t\n\t/**\n\t * Wraps content with abbreviation\n\t * @param {IEmmetEditor} Editor instance\n\t * @param {String} abbr Abbreviation to wrap with\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\trequire('actions').add('wrap_with_abbreviation', function (editor, abbr, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.editorUtils */\n\t\tvar editorUtils = require('editorUtils');\n\t\tabbr = abbr || editor.prompt(\"Enter abbreviation\");\n\t\t\n\t\tif (!abbr) \n\t\t\treturn null;\n\t\t\n\t\tabbr = String(abbr);\n\t\t\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find tag pair\n\t\t\tvar match = require('htmlMatcher').tag(info.content, range.start);\n\t\t\tif (!match) {  // nothing to wrap\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\trange = utils.narrowToNonSpace(info.content, match.range);\n\t\t}\n\t\t\n\t\tvar newContent = utils.escapeText(range.substring(info.content));\n\t\tvar result = module\n\t\t\t.wrap(abbr, editorUtils.unindent(editor, newContent), info.syntax, \n\t\t\t\t\tinfo.profile, require('actionUtils').captureContext(editor));\n\t\t\n\t\tif (result) {\n\t\t\teditor.replaceContent(result, range.start, range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Wraps passed text with abbreviation. Text will be placed inside last\n\t\t * expanded element\n\t\t * @memberOf wrapWithAbbreviation\n\t\t * @param {String} abbr Abbreviation\n\t\t * @param {String} text Text to wrap\n\t\t * @param {String} syntax Document type (html, xml, etc.). Default is 'html'\n\t\t * @param {String} profile Output profile's name. Default is 'plain'\n\t\t * @param {Object} contextNode Context node inside which abbreviation\n\t\t * is wrapped. It will be used as a reference for node name resolvers\n\t\t * @return {String}\n\t\t */\n\t\twrap: function(abbr, text, syntax, profile, contextNode) {\n\t\t\t/** @type emmet.filters */\n\t\t\tvar filters = require('filters');\n\t\t\t/** @type emmet.utils */\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tsyntax = syntax || emmet.defaultSyntax();\n\t\t\tprofile = require('profile').get(profile, syntax);\n\t\t\t\n\t\t\trequire('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar parsedTree = require('abbreviationParser').parse(data[0], {\n\t\t\t\tsyntax: syntax,\n\t\t\t\tpastedContent: text,\n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\tif (parsedTree) {\n\t\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\t\tfilters.apply(parsedTree, filtersList, profile);\n\t\t\t\treturn utils.replaceVariables(parsedTree.toString());\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t};\n});/**\n * Toggles HTML and CSS comments depending on current caret context. Unlike\n * the same action in most editors, this action toggles comment on currently\n * matched item—HTML tag or CSS selector—when nothing is selected.\n * \n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __toggleCommentAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Toggle HTML comment on current selection or tag\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleHTMLComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find matching tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\t\tif (tag) { // found pair\n\t\t\t\trange = tag.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '<!--', '-->', range);\n\t}\n\n\t/**\n\t * Simple CSS commenting\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleCSSComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, try to get current rule\n\t\t\t/** @type CSSRule */\n\t\t\tvar rule = require('cssEditTree').parseFromPosition(info.content, editor.getCaretPos());\n\t\t\tif (rule) {\n\t\t\t\tvar property = cssItemFromPosition(rule, editor.getCaretPos());\n\t\t\t\trange = property \n\t\t\t\t\t? property.range(true) \n\t\t\t\t\t: require('range').create(rule.nameRange(true).start, rule.source);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// still no selection, get current line\n\t\t\trange = require('range').create(editor.getCurrentLineRange());\n\t\t\trequire('utils').narrowToNonSpace(info.content, range);\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '/*', '*/', range);\n\t}\n\t\n\t/**\n\t * Returns CSS property from <code>rule</code> that matches passed position\n\t * @param {EditContainer} rule\n\t * @param {Number} absPos\n\t * @returns {EditElement}\n\t */\n\tfunction cssItemFromPosition(rule, absPos) {\n\t\t// do not use default EditContainer.itemFromPosition() here, because\n\t\t// we need to make a few assumptions to make CSS commenting more reliable\n\t\tvar relPos = absPos - (rule.options.offset || 0);\n\t\tvar reSafeChar = /^[\\s\\n\\r]/;\n\t\treturn _.find(rule.list(), function(item) {\n\t\t\tif (item.range().end === relPos) {\n\t\t\t\t// at the end of property, but outside of it\n\t\t\t\t// if there’s a space character at current position,\n\t\t\t\t// use current property\n\t\t\t\treturn reSafeChar.test(rule.source.charAt(relPos));\n\t\t\t}\n\t\t\t\n\t\t\treturn item.range().inside(relPos);\n\t\t});\n\t}\n\n\t/**\n\t * Search for nearest comment in <code>str</code>, starting from index <code>from</code>\n\t * @param {String} text Where to search\n\t * @param {Number} from Search start index\n\t * @param {String} start_token Comment start string\n\t * @param {String} end_token Comment end string\n\t * @return {Range} Returns null if comment wasn't found\n\t */\n\tfunction searchComment(text, from, startToken, endToken) {\n\t\tvar commentStart = -1;\n\t\tvar commentEnd = -1;\n\t\t\n\t\tvar hasMatch = function(str, start) {\n\t\t\treturn text.substr(start, str.length) == str;\n\t\t};\n\t\t\t\n\t\t// search for comment start\n\t\twhile (from--) {\n\t\t\tif (hasMatch(startToken, from)) {\n\t\t\t\tcommentStart = from;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (commentStart != -1) {\n\t\t\t// search for comment end\n\t\t\tfrom = commentStart;\n\t\t\tvar contentLen = text.length;\n\t\t\twhile (contentLen >= from++) {\n\t\t\t\tif (hasMatch(endToken, from)) {\n\t\t\t\t\tcommentEnd = from + endToken.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (commentStart != -1 && commentEnd != -1) \n\t\t\t? require('range').create(commentStart, commentEnd - commentStart) \n\t\t\t: null;\n\t}\n\n\t/**\n\t * Generic comment toggling routine\n\t * @param {IEmmetEditor} editor\n\t * @param {String} commentStart Comment start token\n\t * @param {String} commentEnd Comment end token\n\t * @param {Range} range Selection range\n\t * @return {Boolean}\n\t */\n\tfunction genericCommentToggle(editor, commentStart, commentEnd, range) {\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar content = editorUtils.outputInfo(editor).content;\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar newContent = null;\n\t\t\n\t\tvar utils = require('utils');\n\t\t\t\n\t\t/**\n\t\t * Remove comment markers from string\n\t\t * @param {Sting} str\n\t\t * @return {String}\n\t\t */\n\t\tfunction removeComment(str) {\n\t\t\treturn str\n\t\t\t\t.replace(new RegExp('^' + utils.escapeForRegexp(commentStart) + '\\\\s*'), function(str){\n\t\t\t\t\tcaretPos -= str.length;\n\t\t\t\t\treturn '';\n\t\t\t\t}).replace(new RegExp('\\\\s*' + utils.escapeForRegexp(commentEnd) + '$'), '');\n\t\t}\n\t\t\n\t\t// first, we need to make sure that this substring is not inside \n\t\t// comment\n\t\tvar commentRange = searchComment(content, caretPos, commentStart, commentEnd);\n\t\tif (commentRange && commentRange.overlap(range)) {\n\t\t\t// we're inside comment, remove it\n\t\t\trange = commentRange;\n\t\t\tnewContent = removeComment(range.substring(content));\n\t\t} else {\n\t\t\t// should add comment\n\t\t\t// make sure that there's no comment inside selection\n\t\t\tnewContent = commentStart + ' ' +\n\t\t\t\trange.substring(content)\n\t\t\t\t\t.replace(new RegExp(utils.escapeForRegexp(commentStart) + '\\\\s*|\\\\s*' + utils.escapeForRegexp(commentEnd), 'g'), '') +\n\t\t\t\t' ' + commentEnd;\n\t\t\t\t\n\t\t\t// adjust caret position\n\t\t\tcaretPos += commentStart.length + 1;\n\t\t}\n\n\t\t// replace editor content\n\t\tif (newContent !== null) {\n\t\t\tnewContent = utils.escapeText(newContent);\n\t\t\teditor.setCaretPos(range.start);\n\t\t\teditor.replaceContent(editorUtils.unindent(editor, newContent), range.start, range.end);\n\t\t\teditor.setCaretPos(caretPos);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Toggle comment on current editor's selection or HTML tag/CSS rule\n\t * @param {IEmmetEditor} editor\n\t */\n\trequire('actions').add('toggle_comment', function(editor) {\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tif (info.syntax == 'css') {\n\t\t\t// in case our editor is good enough and can recognize syntax from \n\t\t\t// current token, we have to make sure that cursor is not inside\n\t\t\t// 'style' attribute of html element\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && tag.open.range.inside(caretPos)) {\n\t\t\t\tinfo.syntax = 'html';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (info.syntax == 'css')\n\t\t\treturn toggleCSSComment(editor);\n\t\t\n\t\treturn toggleHTMLComment(editor);\n\t});\n});/**\n * Move between next/prev edit points. 'Edit points' are places between tags \n * and quotes of empty attributes in html\n * @constructor\n * \n * @memberOf __editPointActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Search for new caret insertion point\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {Number} inc Search increment: -1 — search left, 1 — search right\n\t * @param {Number} offset Initial offset relative to current caret position\n\t * @return {Number} Returns -1 if insertion point wasn't found\n\t */\n\tfunction findNewEditPoint(editor, inc, offset) {\n\t\tinc = inc || 1;\n\t\toffset = offset || 0;\n\t\t\n\t\tvar curPoint = editor.getCaretPos() + offset;\n\t\tvar content = String(editor.getContent());\n\t\tvar maxLen = content.length;\n\t\tvar nextPoint = -1;\n\t\tvar reEmptyLine = /^\\s+$/;\n\t\t\n\t\tfunction getLine(ix) {\n\t\t\tvar start = ix;\n\t\t\twhile (start >= 0) {\n\t\t\t\tvar c = content.charAt(start);\n\t\t\t\tif (c == '\\n' || c == '\\r')\n\t\t\t\t\tbreak;\n\t\t\t\tstart--;\n\t\t\t}\n\t\t\t\n\t\t\treturn content.substring(start, ix);\n\t\t}\n\t\t\t\n\t\twhile (curPoint <= maxLen && curPoint >= 0) {\n\t\t\tcurPoint += inc;\n\t\t\tvar curChar = content.charAt(curPoint);\n\t\t\tvar nextChar = content.charAt(curPoint + 1);\n\t\t\tvar prevChar = content.charAt(curPoint - 1);\n\t\t\t\t\n\t\t\tswitch (curChar) {\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\tif (nextChar == curChar && prevChar == '=') {\n\t\t\t\t\t\t// empty attribute\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '>':\n\t\t\t\t\tif (nextChar == '<') {\n\t\t\t\t\t\t// between tags\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\n':\n\t\t\t\tcase '\\r':\n\t\t\t\t\t// empty line\n\t\t\t\t\tif (reEmptyLine.test(getLine(curPoint - 1))) {\n\t\t\t\t\t\tnextPoint = curPoint;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPoint != -1)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn nextPoint;\n\t}\n\t\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\t\n\t/**\n\t * Move caret to previous edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('prev_edit_point', function(editor) {\n\t\tvar curPos = editor.getCaretPos();\n\t\tvar newPoint = findNewEditPoint(editor, -1);\n\t\t\t\n\t\tif (newPoint == curPos)\n\t\t\t// we're still in the same point, try searching from the other place\n\t\t\tnewPoint = findNewEditPoint(editor, -1, -2);\n\t\t\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Previous Edit Point'});\n\t\n\t/**\n\t * Move caret to next edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('next_edit_point', function(editor) {\n\t\tvar newPoint = findNewEditPoint(editor, 1);\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Actions that use stream parsers and tokenizers for traversing:\n * -- Search for next/previous items in HTML\n * -- Search for next/previous items in CSS\n * @constructor\n * @memberOf __selectItemActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\t\n\t/**\n\t * Generic function for searching for items to select\n\t * @param {IEmmetEditor} editor\n\t * @param {Boolean} isBackward Search backward (search forward otherwise)\n\t * @param {Function} extractFn Function that extracts item content\n\t * @param {Function} rangeFn Function that search for next token range\n\t */\n\tfunction findItem(editor, isBackward, extractFn, rangeFn) {\n\t\tvar range = require('range');\n\t\tvar content = require('editorUtils').outputInfo(editor).content;\n\t\t\n\t\tvar contentLength = content.length;\n\t\tvar itemRange, rng;\n\t\t/** @type Range */\n\t\tvar prevRange = range.create(-1, 0);\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\t\n\t\tvar searchPos = sel.start, loop = 100000; // endless loop protection\n\t\twhile (searchPos >= 0 && searchPos < contentLength && --loop > 0) {\n\t\t\tif ( (itemRange = extractFn(content, searchPos, isBackward)) ) {\n\t\t\t\tif (prevRange.equal(itemRange)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprevRange = itemRange.clone();\n\t\t\t\trng = rangeFn(itemRange.substring(content), itemRange.start, sel.clone());\n\t\t\t\t\n\t\t\t\tif (rng) {\n\t\t\t\t\teditor.createSelection(rng.start, rng.end);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tsearchPos = isBackward ? itemRange.start : itemRange.end - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsearchPos += isBackward ? -1 : 1;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t// XXX HTML section\n\t\n\t/**\n\t * Find next HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findNextHTMLItem(editor) {\n\t\tvar isFirst = true;\n\t\treturn findItem(editor, false, function(content, searchPos){\n\t\t\tif (isFirst) {\n\t\t\t\tisFirst = false;\n\t\t\t\treturn findOpeningTagFromPosition(content, searchPos);\n\t\t\t} else {\n\t\t\t\treturn getOpeningTagFromPosition(content, searchPos);\n\t\t\t}\n\t\t}, function(tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, false);\n\t\t});\n\t}\n\t\n\t/**\n\t * Find previous HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findPrevHTMLItem(editor) {\n\t\treturn findItem(editor, true, getOpeningTagFromPosition, function (tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, true);\n\t\t});\n\t}\n\t\n\t/**\n\t * Creates possible selection ranges for HTML tag\n\t * @param {String} source Original HTML source for tokens\n\t * @param {Array} tokens List of HTML tokens\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesHTML(source, tokens, offset) {\n\t\toffset = offset || 0;\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\tvar attrStart = -1, attrName = '', attrValue = '', attrValueRange, tagName;\n\t\t_.each(tokens, function(tok) {\n\t\t\tswitch (tok.type) {\n\t\t\t\tcase 'tag':\n\t\t\t\t\ttagName = source.substring(tok.start, tok.end);\n\t\t\t\t\tif (/^<[\\w\\:\\-]/.test(tagName)) {\n\t\t\t\t\t\t// add tag name\n\t\t\t\t\t\tresult.push(range.create({\n\t\t\t\t\t\t\tstart: tok.start + 1, \n\t\t\t\t\t\t\tend: tok.end\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attribute':\n\t\t\t\t\tattrStart = tok.start;\n\t\t\t\t\tattrName = source.substring(tok.start, tok.end);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'string':\n\t\t\t\t\t// attribute value\n\t\t\t\t\t// push full attribute first\n\t\t\t\t\t result.push(range.create(attrStart, tok.end - attrStart));\n\t\t\t\t\t \n\t\t\t\t\t attrValueRange = range.create(tok);\n\t\t\t\t\t attrValue = attrValueRange.substring(source);\n\t\t\t\t\t \n\t\t\t\t\t // is this a quoted attribute?\n\t\t\t\t\t if (isQuote(attrValue.charAt(0)))\n\t\t\t\t\t\t attrValueRange.start++;\n\t\t\t\t\t \n\t\t\t\t\t if (isQuote(attrValue.charAt(attrValue.length - 1)))\n\t\t\t\t\t\t attrValueRange.end--;\n\t\t\t\t\t \n\t\t\t\t\t result.push(attrValueRange);\n\t\t\t\t\t \n\t\t\t\t\t if (attrName == 'class') {\n\t\t\t\t\t\t result = result.concat(classNameRanges(attrValueRange.substring(source), attrValueRange.start));\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// offset ranges\n\t\t_.each(result, function(r) {\n\t\t\tr.shift(offset);\n\t\t});\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {        // remove empty\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {   // remove duplicates\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Returns ranges of class names in \"class\" attribute value\n\t * @param {String} className\n\t * @returns {Array}\n\t */\n\tfunction classNameRanges(className, offset) {\n\t\toffset = offset || 0;\n\t\tvar result = [];\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(className);\n\t\tvar range = require('range');\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (/[\\s\\u00a0]/.test(ch)) {\n\t\t\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start - 1));\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start));\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Returns best HTML tag range match for current selection\n\t * @param {String} tag Tag declaration\n\t * @param {Number} offset Tag's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForHTMLItem(tag, offset, selRange, isBackward) {\n\t\tvar ranges = makePossibleRangesHTML(tag, require('xmlParser').parse(tag), offset);\n\t\t\n\t\tif (isBackward)\n\t\t\tranges.reverse();\n\t\t\n\t\t// try to find selected range\n\t\tvar curRange = _.find(ranges, function(r) {\n\t\t\treturn r.equal(selRange);\n\t\t});\n\t\t\n\t\tif (curRange) {\n\t\t\tvar ix = _.indexOf(ranges, curRange);\n\t\t\tif (ix < ranges.length - 1)\n\t\t\t\treturn ranges[ix + 1];\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// no selected range, find nearest one\n\t\tif (isBackward)\n\t\t\t// search backward\n\t\t\treturn _.find(ranges, function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t});\n\t\t\n\t\t// search forward\n\t\t// to deal with overlapping ranges (like full attribute definition\n\t\t// and attribute value) let's find range under caret first\n\t\tif (!curRange) {\n\t\t\tvar matchedRanges = _.filter(ranges, function(r) {\n\t\t\t\treturn r.inside(selRange.end);\n\t\t\t});\n\t\t\t\n\t\t\tif (matchedRanges.length > 1)\n\t\t\t\treturn matchedRanges[1];\n\t\t}\n\t\t\n\t\t\n\t\treturn _.find(ranges, function(r) {\n\t\t\treturn r.end > selRange.end;\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for opening tag in content, starting at specified position\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction findOpeningTagFromPosition(html, pos) {\n\t\tvar tag;\n\t\twhile (pos >= 0) {\n\t\t\tif (tag = getOpeningTagFromPosition(html, pos))\n\t\t\t\treturn tag;\n\t\t\tpos--;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction getOpeningTagFromPosition(html, pos) {\n\t\tvar m;\n\t\tif (html.charAt(pos) == '<' && (m = html.substring(pos, html.length).match(startTag))) {\n\t\t\treturn require('range').create(pos, m[0]);\n\t\t}\n\t}\n\t\n\tfunction isQuote(ch) {\n\t\treturn ch == '\"' || ch == \"'\";\n\t}\n\t\n\t/**\n\t * Makes all possible selection ranges for specified CSS property\n\t * @param {CSSProperty} property\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesCSS(property) {\n\t\t// find all possible ranges, sorted by position and size\n\t\tvar valueRange = property.valueRange(true);\n\t\tvar result = [property.range(true), valueRange];\n\t\tvar stringStream = require('stringStream');\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar range = require('range');\n\t\t\n\t\t// locate parts of complex values.\n\t\t// some examples:\n\t\t// – 1px solid red: 3 parts\n\t\t// – arial, sans-serif: enumeration, 2 parts\n\t\t// – url(image.png): function value part\n\t\tvar value = property.value();\n\t\t_.each(property.valueParts(), function(r) {\n\t\t\t// add absolute range\n\t\t\tvar clone = r.clone();\n\t\t\tresult.push(clone.shift(valueRange.start));\n\t\t\t\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = stringStream.create(r.substring(value));\n\t\t\tif (stream.match(/^[\\w\\-]+\\(/, true)) {\n\t\t\t\t// we have a function, find values in it.\n\t\t\t\t// but first add function contents\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tstream.skipToPair('(', ')');\n\t\t\t\tvar fnBody = stream.current();\n\t\t\t\tresult.push(range.create(clone.start + stream.start, fnBody));\n\t\t\t\t\n\t\t\t\t// find parts\n\t\t\t\t_.each(cssEditTree.findParts(fnBody), function(part) {\n\t\t\t\t\tresult.push(range.create(clone.start + stream.start + part.start, part.substring(fnBody)));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\t\t// optimize result: remove empty ranges and duplicates\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Tries to find matched CSS property and nearest range for selection\n\t * @param {CSSRule} rule\n\t * @param {Range} selRange\n\t * @param {Boolean} isBackward\n\t * @returns {Range}\n\t */\n\tfunction matchedRangeForCSSProperty(rule, selRange, isBackward) {\n\t\t/** @type CSSProperty */\n\t\tvar property = null;\n\t\tvar possibleRanges, curRange = null, ix;\n\t\tvar list = rule.list();\n\t\tvar searchFn, nearestItemFn;\n\t\t\n\t\tif (isBackward) {\n\t\t\tlist.reverse();\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).start <= selRange.start;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t};\n\t\t} else {\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).end >= selRange.end;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.end > selRange.start;\n\t\t\t};\n\t\t}\n\t\t\n\t\t// search for nearest to selection CSS property\n\t\twhile (property = _.find(list, searchFn)) {\n\t\t\tpossibleRanges = makePossibleRangesCSS(property);\n\t\t\tif (isBackward)\n\t\t\t\tpossibleRanges.reverse();\n\t\t\t\n\t\t\t// check if any possible range is already selected\n\t\t\tcurRange = _.find(possibleRanges, function(r) {\n\t\t\t\treturn r.equal(selRange);\n\t\t\t});\n\t\t\t\n\t\t\tif (!curRange) {\n\t\t\t\t// no selection, select nearest item\n\t\t\t\tvar matchedRanges = _.filter(possibleRanges, function(r) {\n\t\t\t\t\treturn r.inside(selRange.end);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (matchedRanges.length > 1) {\n\t\t\t\t\tcurRange = matchedRanges[1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (curRange = _.find(possibleRanges, nearestItemFn))\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tix = _.indexOf(possibleRanges, curRange);\n\t\t\t\tif (ix != possibleRanges.length - 1) {\n\t\t\t\t\tcurRange = possibleRanges[ix + 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcurRange = null;\n\t\t\tselRange.start = selRange.end = isBackward \n\t\t\t\t? property.range(true).start - 1\n\t\t\t\t: property.range(true).end + 1;\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\tfunction findNextCSSItem(editor) {\n\t\treturn findItem(editor, false, require('cssEditTree').extractRule, getRangeForNextItemInCSS);\n\t}\n\t\n\tfunction findPrevCSSItem(editor) {\n\t\treturn findItem(editor, true, require('cssEditTree').extractRule, getRangeForPrevItemInCSS);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS after current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForNextItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\t// check if selector is matched\n\t\tvar range = tree.nameRange(true);\n\t\tif (selRange.end < range.end) {\n\t\t\treturn range;\n\t\t}\n\t\t\n\t\treturn matchedRangeForCSSProperty(tree, selRange, false);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS before current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if previous item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForPrevItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\tvar curRange = matchedRangeForCSSProperty(tree, selRange, true);\n\t\t\n\t\tif (!curRange) {\n\t\t\t// no matched property, try to match selector\n\t\t\tvar range = tree.nameRange(true);\n\t\t\tif (selRange.start > range.start) {\n\t\t\t\treturn range;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\t// XXX register actions\n\tvar actions = require('actions');\n\tactions.add('select_next_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findNextCSSItem(editor);\n\t\telse\n\t\t\treturn findNextHTMLItem(editor);\n\t});\n\t\n\tactions.add('select_previous_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findPrevCSSItem(editor);\n\t\telse\n\t\t\treturn findPrevHTMLItem(editor);\n\t});\n});/**\n * HTML pair matching (balancing) actions\n * @constructor\n * @memberOf __matchPairActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\tvar matcher = require('htmlMatcher');\n\tvar lastMatch = null;\n\t\n\t/**\n\t * Find and select HTML tag pair\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} direction Direction of pair matching: 'in' or 'out'. \n\t * Default is 'out'\n\t */\n\tfunction matchPair(editor, direction) {\n\t\tdirection = String((direction || 'out').toLowerCase());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\tvar range = require('range');\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\tvar content = info.content;\n\t\t\n\t\t// validate previous match\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\tlastMatch = null;\n\t\t}\n\t\t\n\t\tif (lastMatch && sel.length()) {\n\t\t\tif (direction == 'in') {\n\t\t\t\t// user has previously selected tag and wants to move inward\n\t\t\t\tif (lastMatch.type == 'tag' && !lastMatch.close) {\n\t\t\t\t\t// unary tag was selected, can't move inward\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tif (lastMatch.range.equal(lastMatch.outerRange)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar narrowed = require('utils').narrowToNonSpace(content, lastMatch.innerRange);\n\t\t\t\t\t\tlastMatch = matcher.find(content, narrowed.start + 1);\n\t\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.outerRange.equal(sel)) {\n\t\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\t\t!lastMatch.innerRange.equal(lastMatch.outerRange) \n\t\t\t\t\t\t&& lastMatch.range.equal(lastMatch.innerRange) \n\t\t\t\t\t\t&& sel.equal(lastMatch.range)) {\n\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t} else {\n\t\t\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.innerRange.equal(sel)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t}\n\t\t\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\teditor.createSelection(lastMatch.range.start, lastMatch.range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tlastMatch = null;\n\t\treturn false;\n\t}\n\t\n\tactions.add('match_pair', matchPair, {hidden: true});\n\tactions.add('match_pair_inward', function(editor){\n\t\treturn matchPair(editor, 'in');\n\t}, {label: 'HTML/Match Pair Tag (inward)'});\n\n\tactions.add('match_pair_outward', function(editor){\n\t\treturn matchPair(editor, 'out');\n\t}, {label: 'HTML/Match Pair Tag (outward)'});\n\t\n\t/**\n\t * Moves caret to matching opening or closing tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tactions.add('matching_pair', function(editor) {\n\t\tvar content = String(editor.getContent());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tif (content.charAt(caretPos) == '<') \n\t\t\t// looks like caret is outside of tag pair  \n\t\t\tcaretPos++;\n\t\t\t\n\t\tvar tag = matcher.tag(content, caretPos);\n\t\tif (tag && tag.close) { // exclude unary tags\n\t\t\tif (tag.open.range.inside(caretPos)) {\n\t\t\t\teditor.setCaretPos(tag.close.range.start);\n\t\t\t} else {\n\t\t\t\teditor.setCaretPos(tag.open.range.start);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Go To Matching Tag Pair'});\n});/**\n * Gracefully removes tag under cursor\n * \n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('remove_tag', function(editor) {\n\t\tvar utils = require('utils');\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\t// search for tag\n\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\tif (!tag.close) {\n\t\t\t\t// simply remove unary tag\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder(), tag.range.start, tag.range.end);\n\t\t\t} else {\n\t\t\t\t// remove tag and its newlines\n\t\t\t\t/** @type Range */\n\t\t\t\tvar tagContentRange = utils.narrowToNonSpace(info.content, tag.innerRange);\n\t\t\t\t/** @type Range */\n\t\t\t\tvar startLineBounds = utils.findNewlineBounds(info.content, tagContentRange.start);\n\t\t\t\tvar startLinePad = utils.getLinePadding(startLineBounds.substring(info.content));\n\t\t\t\tvar tagContent = tagContentRange.substring(info.content);\n\t\t\t\t\n\t\t\t\ttagContent = utils.unindentString(tagContent, startLinePad);\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder() + utils.escapeText(tagContent), tag.outerRange.start, tag.outerRange.end);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Remove Tag'});\n});\n/**\n * Splits or joins tag, e.g. transforms it into a short notation and vice versa:<br>\n * &lt;div&gt;&lt;/div&gt; → &lt;div /&gt; : join<br>\n * &lt;div /&gt; → &lt;div&gt;&lt;/div&gt; : split\n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __splitJoinTagAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {Object} profile\n\t * @param {Object} tag\n\t */\n\tfunction joinTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\t// empty closing slash is a nonsense for this action\n\t\tvar slash = profile.selfClosing() || ' /';\n\t\tvar content = tag.open.range.substring(tag.source).replace(/\\s*>$/, slash + '>');\n\t\t\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// update caret position\n\t\tif (content.length + tag.outerRange.start < caretPos) {\n\t\t\tcaretPos = content.length + tag.outerRange.start;\n\t\t}\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\tfunction splitTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar nl = utils.getNewline();\n\t\tvar pad = require('resources').getVariable('indentation');\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// define tag content depending on profile\n\t\tvar tagContent = (profile.tag_nl === true) ? nl + pad + nl : '';\n\t\tvar content = tag.outerContent().replace(/\\s*\\/>$/, '>');\n\t\tcaretPos = tag.outerRange.start + content.length;\n\t\tcontent += tagContent + '</' + tag.open.name + '>';\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\trequire('actions').add('split_join_tag', function(editor, profileName) {\n\t\tvar matcher = require('htmlMatcher');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor, null, profileName);\n\t\tvar profile = require('profile').get(info.profile);\n\t\t\n\t\t// find tag at current position\n\t\tvar tag = matcher.tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\treturn tag.close \n\t\t\t\t? joinTag(editor, profile, tag) \n\t\t\t\t: splitTag(editor, profile, tag);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Split\\\\Join Tag Declaration'});\n});/**\n * Reflect CSS value: takes rule's value under caret and pastes it for the same \n * rules with vendor prefixes\n * @constructor\n * @memberOf __reflectCSSActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('reflectCSSValue', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\trequire('actions').add('reflect_css_value', function(editor) {\n\t\tif (editor.getSyntax() != 'css') return false;\n\t\t\n\t\treturn require('actionUtils').compoundUpdate(editor, doCSSReflection(editor));\n\t}, {label: 'CSS/Reflect Value'});\n\t\n\tfunction doCSSReflection(editor) {\n\t\t/** @type emmet.cssEditTree */\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar outputInfo = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tvar cssRule = cssEditTree.parseFromPosition(outputInfo.content, caretPos);\n\t\tif (!cssRule) return;\n\t\t\n\t\tvar property = cssRule.itemFromPosition(caretPos, true);\n\t\t// no property under cursor, nothing to reflect\n\t\tif (!property) return;\n\t\t\n\t\tvar oldRule = cssRule.source;\n\t\tvar offset = cssRule.options.offset;\n\t\tvar caretDelta = caretPos - offset - property.range().start;\n\t\t\n\t\thandlers.exec(false, [property]);\n\t\t\n\t\tif (oldRule !== cssRule.source) {\n\t\t\treturn {\n\t\t\t\tdata:  cssRule.source,\n\t\t\t\tstart: offset,\n\t\t\t\tend:   offset + oldRule.length,\n\t\t\t\tcaret: offset + property.range().start + caretDelta\n\t\t\t};\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns regexp that should match reflected CSS property names\n\t * @param {String} name Current CSS property name\n\t * @return {RegExp}\n\t */\n\tfunction getReflectedCSSName(name) {\n\t\tname = require('cssEditTree').baseName(name);\n\t\tvar vendorPrefix = '^(?:\\\\-\\\\w+\\\\-)?', m;\n\t\t\n\t\tif (name == 'opacity' || name == 'filter') {\n\t\t\treturn new RegExp(vendorPrefix + '(?:opacity|filter)$');\n\t\t} else if (m = name.match(/^border-radius-(top|bottom)(left|right)/)) {\n\t\t\t// Mozilla-style border radius\n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-' + m[1] + '-' + m[2] + '-radius)$');\n\t\t} else if (m = name.match(/^border-(top|bottom)-(left|right)-radius/)) { \n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-radius-' + m[1] + m[2] + ')$');\n\t\t}\n\t\t\n\t\treturn new RegExp(vendorPrefix + name + '$');\n\t}\n\t\n\t/**\n\t * Reflects value from <code>donor</code> into <code>receiver</code>\n\t * @param {CSSProperty} donor Donor CSS property from which value should\n\t * be reflected\n\t * @param {CSSProperty} receiver Property that should receive reflected \n\t * value from donor\n\t */\n\tfunction reflectValue(donor, receiver) {\n\t\tvar value = getReflectedValue(donor.name(), donor.value(), \n\t\t\t\treceiver.name(), receiver.value());\n\t\t\n\t\treceiver.value(value);\n\t}\n\t\n\t/**\n\t * Returns value that should be reflected for <code>refName</code> CSS property\n\t * from <code>curName</code> property. This function is used for special cases,\n\t * when the same result must be achieved with different properties for different\n\t * browsers. For example: opаcity:0.5; → filter:alpha(opacity=50);<br><br>\n\t * \n\t * This function does value conversion between different CSS properties\n\t * \n\t * @param {String} curName Current CSS property name\n\t * @param {String} curValue Current CSS property value\n\t * @param {String} refName Receiver CSS property's name \n\t * @param {String} refValue Receiver CSS property's value\n\t * @return {String} New value for receiver property\n\t */\n\tfunction getReflectedValue(curName, curValue, refName, refValue) {\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar utils = require('utils');\n\t\tcurName = cssEditTree.baseName(curName);\n\t\trefName = cssEditTree.baseName(refName);\n\t\t\n\t\tif (curName == 'opacity' && refName == 'filter') {\n\t\t\treturn refValue.replace(/opacity=[^)]*/i, 'opacity=' + Math.floor(parseFloat(curValue) * 100));\n\t\t} else if (curName == 'filter' && refName == 'opacity') {\n\t\t\tvar m = curValue.match(/opacity=([^)]*)/i);\n\t\t\treturn m ? utils.prettifyNumber(parseInt(m[1]) / 100) : refValue;\n\t\t}\n\t\t\n\t\treturn curValue;\n\t}\n\t\n\t// XXX add default handler\n\thandlers.add(function(property) {\n\t\tvar reName = getReflectedCSSName(property.name());\n\t\t_.each(property.parent.list(), function(p) {\n\t\t\tif (reName.test(p.name())) {\n\t\t\t\treflectValue(property, p);\n\t\t\t}\n\t\t});\n\t}, {order: -1});\n\t\n\treturn {\n\t\t/**\n\t\t * Adds custom reflect handler. The passed function will receive matched\n\t\t * CSS property (as <code>CSSEditElement</code> object) and should\n\t\t * return <code>true</code> if it was performed successfully (handled \n\t\t * reflection), <code>false</code> otherwise.\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t}\n\t};\n});/**\n * Evaluates simple math expression under caret\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('evaluate_math_expression', function(editor) {\n\t\tvar actionUtils = require('actionUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar content = String(editor.getContent());\n\t\tvar chars = '.+-*/\\\\';\n\t\t\n\t\t/** @type Range */\n\t\tvar sel = require('range').create(editor.getSelectionRange());\n\t\tif (!sel.length()) {\n\t\t\tsel = actionUtils.findExpressionBounds(editor, function(ch) {\n\t\t\t\treturn utils.isNumeric(ch) || chars.indexOf(ch) != -1;\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (sel && sel.length()) {\n\t\t\tvar expr = sel.substring(content);\n\t\t\t\n\t\t\t// replace integral division: 11\\2 => Math.round(11/2) \n\t\t\texpr = expr.replace(/([\\d\\.\\-]+)\\\\([\\d\\.\\-]+)/g, 'Math.round($1/$2)');\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar result = utils.prettifyNumber(new Function('return ' + expr)());\n\t\t\t\teditor.replaceContent(result, sel.start, sel.end);\n\t\t\t\teditor.setCaretPos(sel.start + result.length);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Numbers/Evaluate Math Expression'});\n});\n/**\n * Increment/decrement number under cursor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Extract number from current caret position of the <code>editor</code> and\n\t * increment it by <code>step</code>\n\t * @param {IEmmetEditor} editor\n\t * @param {Number} step Increment step (may be negative)\n\t */\n\tfunction incrementNumber(editor, step) {\n\t\tvar utils = require('utils');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar hasSign = false;\n\t\tvar hasDecimal = false;\n\t\t\t\n\t\tvar r = actionUtils.findExpressionBounds(editor, function(ch, pos, content) {\n\t\t\tif (utils.isNumeric(ch))\n\t\t\t\treturn true;\n\t\t\tif (ch == '.') {\n\t\t\t\t// make sure that next character is numeric too\n\t\t\t\tif (!utils.isNumeric(content.charAt(pos + 1)))\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\treturn hasDecimal ? false : hasDecimal = true;\n\t\t\t}\n\t\t\tif (ch == '-')\n\t\t\t\treturn hasSign ? false : hasSign = true;\n\t\t\t\t\n\t\t\treturn false;\n\t\t});\n\t\t\t\n\t\tif (r && r.length()) {\n\t\t\tvar strNum = r.substring(String(editor.getContent()));\n\t\t\tvar num = parseFloat(strNum);\n\t\t\tif (!_.isNaN(num)) {\n\t\t\t\tnum = utils.prettifyNumber(num + step);\n\t\t\t\t\n\t\t\t\t// do we have zero-padded number?\n\t\t\t\tif (/^(\\-?)0+[1-9]/.test(strNum)) {\n\t\t\t\t\tvar minus = '';\n\t\t\t\t\tif (RegExp.$1) {\n\t\t\t\t\t\tminus = '-';\n\t\t\t\t\t\tnum = num.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tvar parts = num.split('.');\n\t\t\t\t\tparts[0] = utils.zeroPadString(parts[0], intLength(strNum));\n\t\t\t\t\tnum = minus + parts.join('.');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(num, r.start, r.end);\n\t\t\t\teditor.createSelection(r.start, r.start + num.length);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Returns length of integer part of number\n\t * @param {String} num\n\t */\n\tfunction intLength(num) {\n\t\tnum = num.replace(/^\\-/, '');\n\t\tif (~num.indexOf('.')) {\n\t\t\treturn num.split('.')[0].length;\n\t\t}\n\t\t\n\t\treturn num.length;\n\t}\n\t\n\tvar actions = require('actions');\n\t_.each([1, -1, 10, -10, 0.1, -0.1], function(num) {\n\t\tvar prefix = num > 0 ? 'increment' : 'decrement';\n\t\t\n\t\tactions.add(prefix + '_number_by_' + String(Math.abs(num)).replace('.', '').substring(0, 2), function(editor) {\n\t\t\treturn incrementNumber(editor, num);\n\t\t}, {label: 'Numbers/' + prefix.charAt(0).toUpperCase() + prefix.substring(1) + ' number by ' + Math.abs(num)});\n\t});\n});/**\n * Actions to insert line breaks. Some simple editors (like browser's \n * &lt;textarea&gt;, for example) do not provide such simple things\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar actions = require('actions');\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\t// setup default preferences\n\tprefs.define('css.closeBraceIndentation', '\\n',\n\t\t\t'Indentation before closing brace of CSS rule. Some users prefere ' \n\t\t\t+ 'indented closing brace of CSS rule for better readability. '\n\t\t\t+ 'This preference’s value will be automatically inserted before '\n\t\t\t+ 'closing brace when user adds newline in newly created CSS rule '\n\t\t\t+ '(e.g. when “Insert formatted linebreak” action will be performed ' \n\t\t\t+ 'in CSS file). If you’re such user, you may want to write put a value ' \n\t\t\t+ 'like <code>\\\\n\\\\t</code> in this preference.');\n\t\n\t/**\n\t * Inserts newline character with proper indentation in specific positions only.\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if line break was inserted \n\t */\n\tactions.add('insert_formatted_line_break_only', function(editor) {\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.resources */\n\t\tvar res = require('resources');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar nl = utils.getNewline();\n\t\t\n\t\tif (_.include(['html', 'xml', 'xsl'], info.syntax)) {\n\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t// let's see if we're breaking newly created tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && !tag.innerRange.length()) {\n\t\t\t\teditor.replaceContent(nl + pad + utils.getCaretPlaceholder() + nl, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (info.syntax == 'css') {\n\t\t\t/** @type String */\n\t\t\tvar content = info.content;\n\t\t\tif (caretPos && content.charAt(caretPos - 1) == '{') {\n\t\t\t\tvar append = prefs.get('css.closeBraceIndentation');\n\t\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t\t\n\t\t\t\tvar hasCloseBrace = content.charAt(caretPos) == '}';\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\t// do we really need special formatting here?\n\t\t\t\t\t// check if this is really a newly created rule,\n\t\t\t\t\t// look ahead for a closing brace\n\t\t\t\t\tfor (var i = caretPos, il = content.length, ch; i < il; i++) {\n\t\t\t\t\t\tch = content.charAt(i);\n\t\t\t\t\t\tif (ch == '{') {\n\t\t\t\t\t\t\t// ok, this is a new rule without closing brace\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ch == '}') {\n\t\t\t\t\t\t\t// not a new rule, just add indentation\n\t\t\t\t\t\t\tappend = '';\n\t\t\t\t\t\t\thasCloseBrace = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\tappend += '}';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// defining rule set\n\t\t\t\tvar insValue = nl + pad + utils.getCaretPlaceholder() + append;\n\t\t\t\teditor.replaceContent(insValue, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn false;\n\t}, {hidden: true});\n\t\n\t/**\n\t * Inserts newline character with proper indentation. This action is used in\n\t * editors that doesn't have indentation control (like textarea element) to \n\t * provide proper indentation\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('insert_formatted_line_break', function(editor) {\n\t\tif (!actions.run('insert_formatted_line_break_only', editor)) {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar curPadding = require('editorUtils').getCurrentLinePadding(editor);\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar len = content.length;\n\t\t\tvar nl = utils.getNewline();\n\t\t\t\t\n\t\t\t// check out next line padding\n\t\t\tvar lineRange = editor.getCurrentLineRange();\n\t\t\tvar nextPadding = '';\n\t\t\t\t\n\t\t\tfor (var i = lineRange.end + 1, ch; i < len; i++) {\n\t\t\t\tch = content.charAt(i);\n\t\t\t\tif (ch == ' ' || ch == '\\t')\n\t\t\t\t\tnextPadding += ch;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPadding.length > curPadding.length)\n\t\t\t\teditor.replaceContent(nl + nextPadding, caretPos, caretPos, true);\n\t\t\telse\n\t\t\t\teditor.replaceContent(nl, caretPos);\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n});/**\n * Merges selected lines or lines between XHTML tag pairs\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('merge_lines', function(editor) {\n\t\tvar matcher = require('htmlMatcher');\n\t\tvar utils = require('utils');\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar info = editorUtils.outputInfo(editor);\n\t\t\n\t\t/** @type Range */\n\t\tvar selection = require('range').create(editor.getSelectionRange());\n\t\tif (!selection.length()) {\n\t\t\t// find matching tag\n\t\t\tvar pair = matcher.find(info.content, editor.getCaretPos());\n\t\t\tif (pair) {\n\t\t\t\tselection = pair.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (selection.length()) {\n\t\t\t// got range, merge lines\n\t\t\tvar text =  selection.substring(info.content);\n\t\t\tvar lines = utils.splitByLines(text);\n\t\t\t\n\t\t\tfor (var i = 1; i < lines.length; i++) {\n\t\t\t\tlines[i] = lines[i].replace(/^\\s+/, '');\n\t\t\t}\n\t\t\t\n\t\t\ttext = lines.join('').replace(/\\s{2,}/, ' ');\n\t\t\tvar textLen = text.length;\n\t\t\ttext = utils.escapeText(text);\n\t\t\teditor.replaceContent(text, selection.start, selection.end);\n\t\t\teditor.createSelection(selection.start, selection.start + textLen);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Encodes/decodes image under cursor to/from base64\n * @param {IEmmetEditor} editor\n * @since 0.65\n * \n * @memberOf __base64ActionDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('encode_decode_data_url', function(editor) {\n\t\tvar data = String(editor.getSelection());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\t\n\t\tif (!data) {\n\t\t\t// no selection, try to find image bounds from current caret position\n\t\t\tvar text = String(editor.getContent()),  m;\n\t\t\twhile (caretPos-- >= 0) {\n\t\t\t\tif (startsWith('src=', text, caretPos)) { // found <img src=\"\">\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(src=([\"'])?)([^'\"<>\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (startsWith('url(', text, caretPos)) { // found CSS url() pattern\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(url\\((['\"])?)([^'\"\\)\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (data) {\n\t\t\tif (startsWith('data:', data))\n\t\t\t\treturn decodeFromBase64(editor, data, caretPos);\n\t\t\telse\n\t\t\t\treturn encodeToBase64(editor, data, caretPos);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Encode\\\\Decode data:URL image'});\n\t\n\t/**\n\t * Test if <code>text</code> starts with <code>token</code> at <code>pos</code>\n\t * position. If <code>pos</code> is omitted, search from beginning of text \n\t * @param {String} token Token to test\n\t * @param {String} text Where to search\n\t * @param {Number} pos Position where to start search\n\t * @return {Boolean}\n\t * @since 0.65\n\t */\n\tfunction startsWith(token, text, pos) {\n\t\tpos = pos || 0;\n\t\treturn text.charAt(pos) == token.charAt(0) && text.substr(pos, token.length) == token;\n\t}\n\t\n\t/**\n\t * Encodes image to base64\n\t * \n\t * @param {IEmmetEditor} editor\n\t * @param {String} imgPath Path to image\n\t * @param {Number} pos Caret position where image is located in the editor\n\t * @return {Boolean}\n\t */\n\tfunction encodeToBase64(editor, imgPath, pos) {\n\t\tvar file = require('file');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar editorFile = editor.getFilePath();\n\t\tvar defaultMimeType = 'application/octet-stream';\n\t\t\t\n\t\tif (editorFile === null) {\n\t\t\tthrow \"You should save your file before using this action\";\n\t\t}\n\t\t\n\t\t// locate real image path\n\t\tvar realImgPath = file.locateFile(editorFile, imgPath);\n\t\tif (realImgPath === null) {\n\t\t\tthrow \"Can't find \" + imgPath + ' file';\n\t\t}\n\t\t\n\t\tfile.read(realImgPath, function(err, content) {\n\t\t\tif (err) {\n\t\t\t\tthrow 'Unable to read ' + realImgPath + ': ' + err;\n\t\t\t}\n\t\t\t\n\t\t\tvar b64 = require('base64').encode(String(content));\n\t\t\tif (!b64) {\n\t\t\t\tthrow \"Can't encode file content to base64\";\n\t\t\t}\n\t\t\t\n\t\t\tb64 = 'data:' + (actionUtils.mimeTypes[String(file.getExt(realImgPath))] || defaultMimeType) +\n\t\t\t\t';base64,' + b64;\n\t\t\t\t\n\t\t\teditor.replaceContent('$0' + b64, pos, pos + imgPath.length);\n\t\t});\n\t\t\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * Decodes base64 string back to file.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} data Base64-encoded file content\n\t * @param {Number} pos Caret position where image is located in the editor\n\t */\n\tfunction decodeFromBase64(editor, data, pos) {\n\t\t// ask user to enter path to file\n\t\tvar filePath = String(editor.prompt('Enter path to file (absolute or relative)'));\n\t\tif (!filePath)\n\t\t\treturn false;\n\t\t\t\n\t\tvar file = require('file');\n\t\tvar absPath = file.createPath(editor.getFilePath(), filePath);\n\t\tif (!absPath) {\n\t\t\tthrow \"Can't save file\";\n\t\t}\n\t\t\n\t\tfile.save(absPath, require('base64').decode( data.replace(/^data\\:.+?;.+?,/, '') ));\n\t\teditor.replaceContent('$0' + filePath, pos, pos + data.length);\n\t\treturn true;\n\t}\n});\n/**\n * Automatically updates image size attributes in HTML's &lt;img&gt; element or\n * CSS rule\n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __updateImageSizeAction\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Updates image size of &lt;img src=\"\"&gt; tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeHTML(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\n\t\t\tgetImageSizeForSource(editor, xmlElem.value('src'), function(size) {\n\t\t\t\tif (size) {\n\t\t\t\t\tvar compoundData = xmlElem.range(true);\n\t\t\t\t\txmlElem.value('width', size.width);\n\t\t\t\t\txmlElem.value('height', size.height, xmlElem.indexOf('width') + 1);\n\t\t\t\t\t\n\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\tdata: xmlElem.toString(),\n\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates image size of CSS property\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeCSS(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (cssRule) {\n\t\t\t// check if there is property with image under caret\n\t\t\tvar prop = cssRule.itemFromPosition(offset, true), m;\n\t\t\tif (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\n\t\t\t\tgetImageSizeForSource(editor, m[2], function(size) {\n\t\t\t\t\tif (size) {\n\t\t\t\t\t\tvar compoundData = cssRule.range(true);\n\t\t\t\t\t\tcssRule.value('width', size.width + 'px');\n\t\t\t\t\t\tcssRule.value('height', size.height + 'px', cssRule.indexOf('width') + 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\t\tdata: cssRule.toString(),\n\t\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns image dimensions for source\n\t * @param {IEmmetEditor} editor\n\t * @param {String} src Image source (path or data:url)\n\t */\n\tfunction getImageSizeForSource(editor, src, callback) {\n\t\tvar fileContent;\n\t\tvar au = require('actionUtils');\n\t\tif (src) {\n\t\t\t// check if it is data:url\n\t\t\tif (/^data:/.test(src)) {\n\t\t\t\tfileContent = require('base64').decode( src.replace(/^data\\:.+?;.+?,/, '') );\n\t\t\t\treturn callback(au.getImageSize(fileContent));\n\t\t\t}\n\t\t\t\n\t\t\tvar file = require('file');\n\t\t\tvar absPath = file.locateFile(editor.getFilePath(), src);\n\t\t\tif (absPath === null) {\n\t\t\t\tthrow \"Can't find \" + src + ' file';\n\t\t\t}\n\t\t\t\n\t\t\tfile.read(absPath, function(err, content) {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow 'Unable to read ' + absPath + ': ' + err;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontent = String(content);\n\t\t\t\tcallback(au.getImageSize(content));\n\t\t\t});\n\t\t}\n\t}\n\t\n\trequire('actions').add('update_image_size', function(editor) {\n\t\t// this action will definitely won’t work in SASS dialect,\n\t\t// but may work in SCSS or LESS\n\t\tif (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n\t\t\tupdateImageSizeCSS(editor);\n\t\t} else {\n\t\t\tupdateImageSizeHTML(editor);\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n});/**\n * Resolver for fast CSS typing. Handles abbreviations with the following \n * notation:<br>\n * \n * <code>(-vendor prefix)?property(value)*(!)?</code>\n * \n * <br><br>\n * <b>Abbreviation handling</b><br>\n * \n * By default, Emmet searches for matching snippet definition for provided abbreviation.\n * If snippet wasn't found, Emmet automatically generates element with \n * abbreviation's name. For example, <code>foo</code> abbreviation will generate\n * <code>&lt;foo&gt;&lt;/foo&gt;</code> output.\n * <br><br>\n * This module will capture all expanded properties and upgrade them with values, \n * vendor prefixes and !important declarations. All unmatched abbreviations will \n * be automatically transformed into <code>property-name: ${1}</code> snippets. \n * \n * <b>Vendor prefixes<b><br>\n * \n * If CSS-property is preceded with dash, resolver should output property with\n * all <i>known</i> vendor prefixes. For example, if <code>brad</code> \n * abbreviation generates <code>border-radius: ${value};</code> snippet,\n * the <code>-brad</code> abbreviation should generate:\n * <pre><code>\n * -webkit-border-radius: ${value};\n * -moz-border-radius: ${value};\n * border-radius: ${value};\n * </code></pre>\n * Note that <i>o</i> and <i>ms</i> prefixes are omitted since Opera and IE \n * supports unprefixed property.<br><br>\n * \n * Users can also provide an explicit list of one-character prefixes for any\n * CSS property. For example, <code>-wm-float</code> will produce\n * \n * <pre><code>\n * -webkit-float: ${1};\n * -moz-float: ${1};\n * float: ${1};\n * </code></pre>\n * \n * Although this example looks pointless, users can use this feature to write\n * cutting-edge properties implemented by browser vendors recently.  \n * \n * @constructor\n * @memberOf __cssResolverDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssResolver', function(require, _) {\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar prefixObj = {\n\t\t/** Real vendor prefix name */\n\t\tprefix: 'emmet',\n\t\t\n\t\t/** \n\t\t * Indicates this prefix is obsolete and should't be used when user \n\t\t * wants to generate all-prefixed properties\n\t\t */\n\t\tobsolete: false,\n\t\t\n\t\t/**\n\t\t * Returns prefixed CSS property name\n\t\t * @param {String} name Unprefixed CSS property\n\t\t */\n\t\ttransformName: function(name) {\n\t\t\treturn '-' + this.prefix + '-' + name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * List of unprefixed CSS properties that supported by \n\t\t * current prefix. This list is used to generate all-prefixed property\n\t\t * @returns {Array} \n\t\t */\n\t\tproperties: function() {\n\t\t\treturn getProperties('css.' + this.prefix + 'Properties') || [];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if given property is supported by current prefix\n\t\t * @param name\n\t\t */\n\t\tsupports: function(name) {\n\t\t\treturn _.include(this.properties(), name);\n\t\t}\n\t};\n\t\n\t\n\t/** \n\t * List of registered one-character prefixes. Key is a one-character prefix, \n\t * value is an <code>prefixObj</code> object\n\t */\n\tvar vendorPrefixes = {};\n\t\n\tvar defaultValue = '${1};';\n\t\n\t// XXX module preferences\n\tvar prefs = require('preferences');\n\tprefs.define('css.valueSeparator', ': ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations.');\n\tprefs.define('css.propertyEnd', ';',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations.');\n\t\n\tprefs.define('stylus.valueSeparator', ' ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations in Stylus dialect.');\n\tprefs.define('stylus.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in Stylus dialect.');\n\t\n\tprefs.define('sass.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in SASS dialect.');\n\t\n\tprefs.define('css.autoInsertVendorPrefixes', true,\n\t\t\t'Automatically generate vendor-prefixed copies of expanded CSS ' \n\t\t\t+ 'property. By default, Emmet will generate vendor-prefixed '\n\t\t\t+ 'properties only when you put dash before abbreviation ' \n\t\t\t+ '(e.g. <code>-bxsh</code>). With this option enabled, you don’t ' \n\t\t\t+ 'need dashes before abbreviations: Emmet will produce ' \n\t\t\t+ 'vendor-prefixed properties for you.');\n\t\n\tvar descTemplate = _.template('A comma-separated list of CSS properties that may have ' \n\t\t+ '<code><%= vendor %></code> vendor prefix. This list is used to generate '\n\t\t+ 'a list of prefixed properties when expanding <code>-property</code> '\n\t\t+ 'abbreviations. Empty list means that all possible CSS values may ' \n\t\t+ 'have <code><%= vendor %></code> prefix.');\n\t\n\tvar descAddonTemplate = _.template('A comma-separated list of <em>additional</em> CSS properties ' \n\t\t\t+ 'for <code>css.<%= vendor %>Preperties</code> preference. ' \n\t\t\t+ 'You should use this list if you want to add or remove a few CSS ' \n\t\t\t+ 'properties to original set. To add a new property, simply write its name, '\n\t\t\t+ 'to remove it, precede property with hyphen.<br>'\n\t\t\t+ 'For example, to add <em>foo</em> property and remove <em>border-radius</em> one, '\n\t\t\t+ 'the preference value will look like this: <code>foo, -border-radius</code>.');\n\t\n\t// properties list is created from cssFeatures.html file\n\tvar props = {\n\t\t'webkit': 'animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius',\n\t\t'moz': 'animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius',\n\t\t'ms': 'accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, word-wrap, wrap-flow, wrap-margin, wrap-through, writing-mode',\n\t\t'o': 'dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style'\n\t};\n\t\n\t_.each(props, function(v, k) {\n\t\tprefs.define('css.' + k + 'Properties', v, descTemplate({vendor: k}));\n\t\tprefs.define('css.' + k + 'PropertiesAddon', '', descAddonTemplate({vendor: k}));\n\t});\n\t\n\tprefs.define('css.unitlessProperties', 'z-index, line-height, opacity, font-weight, zoom', \n\t\t\t'The list of properties whose values ​​must not contain units.');\n\t\n\tprefs.define('css.intUnit', 'px', 'Default unit for integer values');\n\tprefs.define('css.floatUnit', 'em', 'Default unit for float values');\n\t\n\tprefs.define('css.keywords', 'auto, inherit', \n\t\t\t'A comma-separated list of valid keywords that can be used in CSS abbreviations.');\n\t\n\tprefs.define('css.keywordAliases', 'a:auto, i:inherit, s:solid, da:dashed, do:dotted, t:transparent', \n\t\t\t'A comma-separated list of keyword aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:keyword_name</code>.');\n\t\n\tprefs.define('css.unitAliases', 'e:em, p:%, x:ex, r:rem', \n\t\t\t'A comma-separated list of unit aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:unit_value</code>.');\n\t\n\tprefs.define('css.color.short', true, \n\t\t\t'Should color values like <code>#ffffff</code> be shortened to '\n\t\t\t+ '<code>#fff</code> after abbreviation with color was expanded.');\n\t\n\tprefs.define('css.color.case', 'keep', \n\t\t\t'Letter case of color values generated by abbreviations with color '\n\t\t\t+ '(like <code>c#0</code>). Possible values are <code>upper</code>, '\n\t\t\t+ '<code>lower</code> and <code>keep</code>.');\n\t\n\tprefs.define('css.fuzzySearch', true, \n\t\t\t'Enable fuzzy search among CSS snippet names. When enabled, every ' \n\t\t\t+ '<em>unknown</em> snippet will be scored against available snippet '\n\t\t\t+ 'names (not values or CSS properties!). The match with best score '\n\t\t\t+ 'will be used to resolve snippet value. For example, with this ' \n\t\t\t+ 'preference enabled, the following abbreviations are equal: '\n\t\t\t+ '<code>ov:h</code> == <code>ov-h</code> == <code>o-h</code> == '\n\t\t\t+ '<code>oh</code>');\n\t\n\tprefs.define('css.fuzzySearchMinScore', 0.3, \n\t\t\t'The minium score (from 0 to 1) that fuzzy-matched abbreviation should ' \n\t\t\t+ 'achive. Lower values may produce many false-positive matches, '\n\t\t\t+ 'higher values may reduce possible matches.');\n\t\n\tprefs.define('css.alignVendor', false, \n\t\t\t'If set to <code>true</code>, all generated vendor-prefixed properties ' \n\t\t\t+ 'will be aligned by real property name.');\n\t\n\t\n\tfunction isNumeric(ch) {\n\t\tvar code = ch && ch.charCodeAt(0);\n\t\treturn (ch && ch == '.' || (code > 47 && code < 58));\n\t}\n\t\n\t/**\n\t * Check if provided snippet contains only one CSS property and value.\n\t * @param {String} snippet\n\t * @returns {Boolean}\n\t */\n\tfunction isSingleProperty(snippet) {\n\t\tvar utils = require('utils');\n\t\tsnippet = utils.trim(snippet);\n\t\t\n\t\t// check if it doesn't contain a comment and a newline\n\t\tif (~snippet.indexOf('/*') || /[\\n\\r]/.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// check if it's a valid snippet definition\n\t\tif (!/^[a-z0-9\\-]+\\s*\\:/i.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tsnippet = require('tabStops').processText(snippet, {\n\t\t\treplaceCarets: true,\n\t\t\ttabstop: function() {\n\t\t\t\treturn 'value';\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn snippet.split(':').length == 2;\n\t}\n\t\n\t/**\n\t * Normalizes abbreviated value to final CSS one\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction normalizeValue(value) {\n\t\tif (value.charAt(0) == '-' && !/^\\-[\\.\\d]/.test(value)) {\n\t\t\tvalue = value.replace(/^\\-+/, '');\n\t\t}\n\t\t\n\t\tif (value.charAt(0) == '#') {\n\t\t\treturn normalizeHexColor(value);\n\t\t}\n\t\t\n\t\treturn getKeyword(value);\n\t}\n\t\n\tfunction normalizeHexColor(value) {\n\t\tvar hex = value.replace(/^#+/, '') || '0';\n\t\tif (hex.toLowerCase() == 't') {\n\t\t\treturn 'transparent';\n\t\t}\n\t\t\n\t\tvar repeat = require('utils').repeatString;\n\t\tvar color = null;\n\t\tswitch (hex.length) {\n\t\t\tcase 1:\n\t\t\t\tcolor = repeat(hex, 6);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcolor = repeat(hex, 3);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcolor = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcolor = hex + hex.substr(0, 2);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcolor = hex + hex.charAt(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcolor = hex.substr(0, 6);\n\t\t}\n\t\t\n\t\t// color must be shortened?\n\t\tif (prefs.get('css.color.short')) {\n\t\t\tvar p = color.split('');\n\t\t\tif (p[0] == p[1] && p[2] == p[3] && p[4] == p[5]) {\n\t\t\t\tcolor = p[0] + p[2] + p[4];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// should transform case?\n\t\tswitch (prefs.get('css.color.case')) {\n\t\t\tcase 'upper':\n\t\t\t\tcolor = color.toUpperCase();\n\t\t\t\tbreak;\n\t\t\tcase 'lower':\n\t\t\t\tcolor = color.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn '#' + color;\n\t}\n\t\n\tfunction getKeyword(name) {\n\t\tvar aliases = prefs.getDict('css.keywordAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction getUnit(name) {\n\t\tvar aliases = prefs.getDict('css.unitAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction isValidKeyword(keyword) {\n\t\treturn _.include(prefs.getArray('css.keywords'), getKeyword(keyword));\n\t}\n\t\n\t/**\n\t * Check if passed CSS property support specified vendor prefix \n\t * @param {String} property\n\t * @param {String} prefix\n\t */\n\tfunction hasPrefix(property, prefix) {\n\t\tvar info = vendorPrefixes[prefix];\n\t\t\n\t\tif (!info)\n\t\t\tinfo = _.find(vendorPrefixes, function(data) {\n\t\t\t\treturn data.prefix == prefix;\n\t\t\t});\n\t\t\n\t\treturn info && info.supports(property);\n\t}\n\t\n\t/**\n\t * Search for a list of supported prefixes for CSS property. This list\n\t * is used to generate all-prefixed snippet\n\t * @param {String} property CSS property name\n\t * @returns {Array}\n\t */\n\tfunction findPrefixes(property, noAutofill) {\n\t\tvar result = [];\n\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\tif (hasPrefix(property, prefix)) {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (!result.length && !noAutofill) {\n\t\t\t// add all non-obsolete prefixes\n\t\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\t\tif (!obj.obsolete)\n\t\t\t\t\tresult.push(prefix);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tfunction addPrefix(name, obj) {\n\t\tif (_.isString(obj))\n\t\t\tobj = {prefix: obj};\n\t\t\n\t\tvendorPrefixes[name] = _.extend({}, prefixObj, obj);\n\t}\n\t\n\tfunction getSyntaxPreference(name, syntax) {\n\t\tif (syntax) {\n\t\t\tvar val = prefs.get(syntax + '.' + name);\n\t\t\tif (!_.isUndefined(val))\n\t\t\t\treturn val;\n\t\t}\n\t\t\n\t\treturn prefs.get('css.' + name);\n\t}\n\t\n\t/**\n\t * Format CSS property according to current syntax dialect\n\t * @param {String} property\n\t * @param {String} syntax\n\t * @returns {String}\n\t */\n\tfunction formatProperty(property, syntax) {\n\t\tvar ix = property.indexOf(':');\n\t\tproperty = property.substring(0, ix).replace(/\\s+$/, '') \n\t\t\t+ getSyntaxPreference('valueSeparator', syntax)\n\t\t\t+ require('utils').trim(property.substring(ix + 1));\n\t\t\n\t\treturn property.replace(/\\s*;\\s*$/, getSyntaxPreference('propertyEnd', syntax));\n\t}\n\t\n\t/**\n\t * Transforms snippet value if required. For example, this transformation\n\t * may add <i>!important</i> declaration to CSS property\n\t * @param {String} snippet\n\t * @param {Boolean} isImportant\n\t * @returns {String}\n\t */\n\tfunction transformSnippet(snippet, isImportant, syntax) {\n\t\tif (!_.isString(snippet))\n\t\t\tsnippet = snippet.data;\n\t\t\n\t\tif (!isSingleProperty(snippet))\n\t\t\treturn snippet;\n\t\t\n\t\tif (isImportant) {\n\t\t\tif (~snippet.indexOf(';')) {\n\t\t\t\tsnippet = snippet.split(';').join(' !important;');\n\t\t\t} else {\n\t\t\t\tsnippet += ' !important';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn formatProperty(snippet, syntax);\n\t}\n\t\n\t/**\n\t * Helper function that parses comma-separated list of elements into array\n\t * @param {String} list\n\t * @returns {Array}\n\t */\n\tfunction parseList(list) {\n\t\tvar result = _.map((list || '').split(','), require('utils').trim);\n\t\treturn result.length ? result : null;\n\t}\n\t\n\tfunction getProperties(key) {\n\t\tvar list = prefs.getArray(key);\n\t\t_.each(prefs.getArray(key + 'Addon'), function(prop) {\n\t\t\tif (prop.charAt(0) == '-') {\n\t\t\t\tlist = _.without(list, prop.substr(1));\n\t\t\t} else {\n\t\t\t\tif (prop.charAt(0) == '+')\n\t\t\t\t\tprop = prop.substr(1);\n\t\t\t\t\n\t\t\t\tlist.push(prop);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn list;\n\t}\n\t\n\t\n\t// TODO refactor, this looks awkward now\n\taddPrefix('w', {\n\t\tprefix: 'webkit'\n\t});\n\taddPrefix('m', {\n\t\tprefix: 'moz'\n\t});\n\taddPrefix('s', {\n\t\tprefix: 'ms'\n\t});\n\taddPrefix('o', {\n\t\tprefix: 'o'\n\t});\n\t\n\t// I think nobody uses it\n//\taddPrefix('k', {\n//\t\tprefix: 'khtml',\n//\t\tobsolete: true\n//\t});\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus'];\n\t\n\t/**\n\t * XXX register resolver\n\t * @param {TreeNode} node\n\t * @param {String} syntax\n\t */\n\trequire('resources').addResolver(function(node, syntax) {\n\t\tif (_.include(cssSyntaxes, syntax) && node.isElement()) {\n\t\t\treturn module.expandToSnippet(node.abbreviation, syntax);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\tvar ea = require('expandAbbreviation');\n\t/**\n\t * For CSS-like syntaxes, we need to handle a special use case. Some editors\n\t * (like Sublime Text 2) may insert semicolons automatically when user types\n\t * abbreviation. After expansion, user receives a double semicolon. This\n\t * handler automatically removes semicolon from generated content in such cases.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\tea.addHandler(function(editor, syntax, profile) {\n\t\tif (!_.include(cssSyntaxes, syntax)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = ea.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile);\n\t\t\tif (content) {\n\t\t\t\tvar replaceFrom = caretPos - abbr.length;\n\t\t\t\tvar replaceTo = caretPos;\n\t\t\t\tif (editor.getContent().charAt(caretPos) == ';' && content.charAt(content.length - 1) == ';') {\n\t\t\t\t\treplaceTo++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(content, replaceFrom, replaceTo);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds vendor prefix\n\t\t * @param {String} name One-character prefix name\n\t\t * @param {Object} obj Object describing vendor prefix\n\t\t * @memberOf cssResolver\n\t\t */\n\t\taddPrefix: addPrefix,\n\t\t\n\t\t/**\n\t\t * Check if passed CSS property supports specified vendor prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t */\n\t\tsupportsPrefix: hasPrefix,\n\t\t\n\t\t/**\n\t\t * Returns prefixed version of passed CSS property, only if this\n\t\t * property supports such prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t * @returns\n\t\t */\n\t\tprefixed: function(property, prefix) {\n\t\t\treturn hasPrefix(property, prefix) \n\t\t\t\t? '-' + prefix + '-' + property \n\t\t\t\t: property;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all registered vendor prefixes\n\t\t * @returns {Array}\n\t\t */\n\t\tlistPrefixes: function() {\n\t\t\treturn _.map(vendorPrefixes, function(obj) {\n\t\t\t\treturn obj.prefix;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns object describing vendor prefix\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetPrefix: function(name) {\n\t\t\treturn vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes prefix object\n\t\t * @param {String} name\n\t\t */\n\t\tremovePrefix: function(name) {\n\t\t\tif (name in vendorPrefixes)\n\t\t\t\tdelete vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract vendor prefixes from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of prefixes and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractPrefixes: function(abbr) {\n\t\t\tif (abbr.charAt(0) != '-') {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tprefixes: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t// abbreviation may either contain sequence of one-character prefixes\n\t\t\t// or just dash, meaning that user wants to produce all possible\n\t\t\t// prefixed properties\n\t\t\tvar i = 1, il = abbr.length, ch;\n\t\t\tvar prefixes = [];\n\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (ch == '-') {\n\t\t\t\t\t// end-sequence character found, stop searching\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (ch in vendorPrefixes) {\n\t\t\t\t\tprefixes.push(ch);\n\t\t\t\t} else {\n\t\t\t\t\t// no prefix found, meaning user want to produce all\n\t\t\t\t\t// vendor-prefixed properties\n\t\t\t\t\tprefixes.length = 0;\n\t\t\t\t\ti = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// reached end of abbreviation and no property name left\n\t\t\tif (i == il -1) {\n\t\t\t\ti = 1;\n\t\t\t\tprefixes.length = 1;\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(i),\n\t\t\t\tprefixes: prefixes.length ? prefixes : 'all'\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for value substring in abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {String} Value substring\n\t\t */\n\t\tfindValuesInAbbreviation: function(abbr, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\t\n\t\t\tvar i = 0, il = abbr.length, value = '', ch;\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (isNumeric(ch) || ch == '#' || (ch == '-' && isNumeric(abbr.charAt(i + 1)))) {\n\t\t\t\t\tvalue = abbr.substring(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// try to find keywords in abbreviation\n\t\t\tvar property = abbr.substring(0, abbr.length - value.length);\n\t\t\tvar res = require('resources');\n\t\t\tvar keywords = [];\n\t\t\t// try to extract some commonly-used properties\n\t\t\twhile (~property.indexOf('-') && !res.findSnippet(syntax, property)) {\n\t\t\t\tvar parts = property.split('-');\n\t\t\t\tvar lastPart = parts.pop();\n\t\t\t\tif (!isValidKeyword(lastPart)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tkeywords.unshift(lastPart);\n\t\t\t\tproperty = parts.join('-');\n\t\t\t}\n\t\t\t\n\t\t\treturn keywords.join('-') + value;\n\t\t},\n\t\t\n\t\tparseValues: function(str) {\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(str);\n\t\t\tvar values = [];\n\t\t\tvar ch = null;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '#') {\n\t\t\t\t\tstream.match(/^t|[0-9a-f]+/i, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else if (ch == '-') {\n\t\t\t\t\tif (isValidKeyword(_.last(values)) || \n\t\t\t\t\t\t\t( stream.start && isNumeric(str.charAt(stream.start - 1)) )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstream.match(/^\\-?[0-9]*(\\.[0-9]+)?[a-z%\\.]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else {\n\t\t\t\t\tstream.match(/^[0-9]*(\\.[0-9]*)?[a-z%]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn _.map(_.compact(values), normalizeValue);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts values from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of values and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractValues: function(abbr) {\n\t\t\t// search for value start\n\t\t\tvar abbrValues = this.findValuesInAbbreviation(abbr);\n\t\t\tif (!abbrValues) {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tvalues: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(0, abbr.length - abbrValues.length).replace(/-$/, ''),\n\t\t\t\tvalues: this.parseValues(abbrValues)\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes value, defined in abbreviation.\n\t\t * @param {String} value\n\t\t * @param {String} property\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeValue: function(value, property) {\n\t\t\tproperty = (property || '').toLowerCase();\n\t\t\tvar unitlessProps = prefs.getArray('css.unitlessProperties');\n\t\t\treturn value.replace(/^(\\-?[0-9\\.]+)([a-z]*)$/, function(str, val, unit) {\n\t\t\t\tif (!unit && (val == '0' || _.include(unitlessProps, property)))\n\t\t\t\t\treturn val;\n\t\t\t\t\n\t\t\t\tif (!unit)\n\t\t\t\t\treturn val.replace(/\\.$/, '') + prefs.get(~val.indexOf('.') ? 'css.floatUnit' : 'css.intUnit');\n\t\t\t\t\n\t\t\t\treturn val + getUnit(unit);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Expands abbreviation into a snippet\n\t\t * @param {String} abbr Abbreviation name to expand\n\t\t * @param {String} value Abbreviation value\n\t\t * @param {String} syntax Currect syntax or dialect. Default is 'css'\n\t\t * @returns {Object} Array of CSS properties and values or predefined\n\t\t * snippet (string or element)\n\t\t */\n\t\texpand: function(abbr, value, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\tvar resources = require('resources');\n\t\t\tvar autoInsertPrefixes = prefs.get('css.autoInsertVendorPrefixes');\n\t\t\t\n\t\t\t// check if snippet should be transformed to !important\n\t\t\tvar isImportant;\n\t\t\tif (isImportant = /^(.+)\\!$/.test(abbr)) {\n\t\t\t\tabbr = RegExp.$1;\n\t\t\t}\n\t\t\t\n\t\t\t// check if we have abbreviated resource\n\t\t\tvar snippet = resources.findSnippet(syntax, abbr);\n\t\t\tif (snippet && !autoInsertPrefixes) {\n\t\t\t\treturn transformSnippet(snippet, isImportant, syntax);\n\t\t\t}\n\t\t\t\n\t\t\t// no abbreviated resource, parse abbreviation\n\t\t\tvar prefixData = this.extractPrefixes(abbr);\n\t\t\tvar valuesData = this.extractValues(prefixData.property);\n\t\t\tvar abbrData = _.extend(prefixData, valuesData);\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = resources.findSnippet(syntax, abbrData.property);\n\t\t\t} else {\n\t\t\t\tabbrData.values = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\t\t// let’s try fuzzy search\n\t\t\t\tsnippet = resources.fuzzyFindSnippet(syntax, abbrData.property, parseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = abbrData.property + ':' + defaultValue;\n\t\t\t} else if (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\tif (!isSingleProperty(snippet)) {\n\t\t\t\treturn snippet;\n\t\t\t}\n\t\t\t\n\t\t\tvar snippetObj = this.splitSnippet(snippet);\n\t\t\tvar result = [];\n\t\t\tif (!value && abbrData.values) {\n\t\t\t\tvalue = _.map(abbrData.values, function(val) {\n\t\t\t\t\treturn this.normalizeValue(val, snippetObj.name);\n\t\t\t\t}, this).join(' ') + ';';\n\t\t\t}\n\t\t\t\n\t\t\tsnippetObj.value = value || snippetObj.value;\n\t\t\t\n\t\t\tvar prefixes = abbrData.prefixes == 'all' || (!abbrData.prefixes && autoInsertPrefixes) \n\t\t\t\t? findPrefixes(snippetObj.name, autoInsertPrefixes && abbrData.prefixes != 'all')\n\t\t\t\t: abbrData.prefixes;\n\t\t\t\t\n\t\t\t\t\n\t\t\tvar names = [], propName;\n\t\t\t_.each(prefixes, function(p) {\n\t\t\t\tif (p in vendorPrefixes) {\n\t\t\t\t\tpropName = vendorPrefixes[p].transformName(snippetObj.name);\n\t\t\t\t\tnames.push(propName);\n\t\t\t\t\tresult.push(transformSnippet(propName + ':' + snippetObj.value,\n\t\t\t\t\t\t\tisImportant, syntax));\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// put the original property\n\t\t\tresult.push(transformSnippet(snippetObj.name + ':' + snippetObj.value, isImportant, syntax));\n\t\t\tnames.push(snippetObj.name);\n\t\t\t\n\t\t\tif (prefs.get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(names);\n\t\t\t\tresult = _.map(result, function(prop, i) {\n\t\t\t\t\treturn pads[i] + prop;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Same as <code>expand</code> method but transforms output into \n\t\t * Emmet snippet\n\t\t * @param {String} abbr\n\t\t * @param {String} syntax\n\t\t * @returns {String}\n\t\t */\n\t\texpandToSnippet: function(abbr, syntax) {\n\t\t\tvar snippet = this.expand(abbr, null, syntax);\n\t\t\tif (_.isArray(snippet)) {\n\t\t\t\treturn snippet.join('\\n');\n\t\t\t}\n\t\t\t\n\t\t\tif (!_.isString(snippet))\n\t\t\t\treturn snippet.data;\n\t\t\t\n\t\t\treturn String(snippet);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split snippet into a CSS property-value pair\n\t\t * @param {String} snippet\n\t\t */\n\t\tsplitSnippet: function(snippet) {\n\t\t\tvar utils = require('utils');\n\t\t\tsnippet = utils.trim(snippet);\n\t\t\tif (snippet.indexOf(':') == -1) {\n\t\t\t\treturn {\n\t\t\t\t\tname: snippet,\n\t\t\t\t\tvalue: defaultValue\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tvar pair = snippet.split(':');\n\t\t\t\n\t\t\treturn {\n\t\t\t\tname: utils.trim(pair.shift()),\n\t\t\t\t// replace ${0} tabstop to produce valid vendor-prefixed values\n\t\t\t\t// where possible\n\t\t\t\tvalue: utils.trim(pair.join(':')).replace(/^(\\$\\{0\\}|\\$0)(\\s*;?)$/, '${1}$2')\n\t\t\t};\n\t\t},\n\t\t\n\t\tgetSyntaxPreference: getSyntaxPreference,\n\t\ttransformSnippet: transformSnippet\n\t};\n});\n/**\n * 'Expand Abbreviation' handler that parses gradient definition from under \n * cursor and updates CSS rule with vendor-prefixed values.\n * \n * @memberOf __cssGradientHandlerDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssGradient', function(require, _) {\n\tvar defaultLinearDirections = ['top', 'to bottom', '0deg'];\n\t/** Back-reference to current module */\n\tvar module = null;\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus', 'styl'];\n\t\n\tvar reDeg = /\\d+deg/i;\n\tvar reKeyword = /top|bottom|left|right/i;\n\t\n\t// XXX define preferences\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('css.gradient.prefixes', 'webkit, moz, o',\n\t\t\t'A comma-separated list of vendor-prefixes for which values should ' \n\t\t\t+ 'be generated.');\n\t\n\tprefs.define('css.gradient.oldWebkit', true,\n\t\t\t'Generate gradient definition for old Webkit implementations');\n\t\n\tprefs.define('css.gradient.omitDefaultDirection', true,\n\t\t'Do not output default direction definition in generated gradients.');\n\t\n\tprefs.define('css.gradient.defaultProperty', 'background-image',\n\t\t'When gradient expanded outside CSS value context, it will produce '\n\t\t\t+ 'properties with this name.');\n\t\n\tprefs.define('css.gradient.fallback', false,\n\t\t\t'With this option enabled, CSS gradient generator will produce '\n\t\t\t+ '<code>background-color</code> property with gradient first color '\n\t\t\t+ 'as fallback for old browsers.');\n\t\n\tfunction normalizeSpace(str) {\n\t\treturn require('utils').trim(str).replace(/\\s+/g, ' ');\n\t}\n\t\n\t/**\n\t * Parses linear gradient definition\n\t * @param {String}\n\t */\n\tfunction parseLinearGradient(gradient) {\n\t\tvar direction = defaultLinearDirections[0];\n\t\t\n\t\t// extract tokens\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(require('utils').trim(gradient));\n\t\tvar colorStops = [], ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (stream.peek() == ',') {\n\t\t\t\tcolorStops.push(stream.current());\n\t\t\t\tstream.next();\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t} else if (ch == '(') { // color definition, like 'rgb(0,0,0)'\n\t\t\t\tstream.skipTo(')');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add last token\n\t\tcolorStops.push(stream.current());\n\t\tcolorStops = _.compact(_.map(colorStops, normalizeSpace));\n\t\t\n\t\tif (!colorStops.length)\n\t\t\treturn null;\n\t\t\n\t\t// let's see if the first color stop is actually a direction\n\t\tif (reDeg.test(colorStops[0]) || reKeyword.test(colorStops[0])) {\n\t\t\tdirection = colorStops.shift();\n\t\t}\n\t\t\n\t\treturn {\n\t\t\ttype: 'linear',\n\t\t\tdirection: direction,\n\t\t\tcolorStops: _.map(colorStops, parseColorStop)\n\t\t};\n\t}\n\t\n\t/**\n\t * Parses color stop definition\n\t * @param {String} colorStop\n\t * @returns {Object}\n\t */\n\tfunction parseColorStop(colorStop) {\n\t\tcolorStop = normalizeSpace(colorStop);\n\t\t\n\t\t// find color declaration\n\t\t// first, try complex color declaration, like rgb(0,0,0)\n\t\tvar color = null;\n\t\tcolorStop = colorStop.replace(/^(\\w+\\(.+?\\))\\s*/, function(str, c) {\n\t\t\tcolor = c;\n\t\t\treturn '';\n\t\t});\n\t\t\n\t\tif (!color) {\n\t\t\t// try simple declaration, like yellow, #fco, #ffffff, etc.\n\t\t\tvar parts = colorStop.split(' ');\n\t\t\tcolor = parts[0];\n\t\t\tcolorStop = parts[1] || '';\n\t\t}\n\t\t\n\t\tvar result = {\n\t\t\tcolor: color\n\t\t};\n\t\t\n\t\tif (colorStop) {\n\t\t\t// there's position in color stop definition\n\t\t\tcolorStop.replace(/^(\\-?[\\d\\.]+)([a-z%]+)?$/, function(str, pos, unit) {\n\t\t\t\tresult.position = pos;\n\t\t\t\tif (~pos.indexOf('.')) {\n\t\t\t\t\tunit = '';\n\t\t\t\t} else if (!unit) {\n\t\t\t\t\tunit = '%';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (unit)\n\t\t\t\t\tresult.unit = unit;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Resolves property name (abbreviation): searches for snippet definition in \n\t * 'resources' and returns new name of matched property\n\t */\n\tfunction resolvePropertyName(name, syntax) {\n\t\tvar res = require('resources');\n\t\tvar prefs = require('preferences');\n\t\tvar snippet = res.findSnippet(syntax, name);\n\t\t\n\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\tsnippet = res.fuzzyFindSnippet(syntax, name, \n\t\t\t\t\tparseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t}\n\t\t\n\t\tif (snippet) {\n\t\t\tif (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\treturn require('cssResolver').splitSnippet(snippet).name;\n\t\t}\n\t}\n\t\n\t/**\n\t * Fills-out implied positions in color-stops. This function is useful for\n\t * old Webkit gradient definitions\n\t */\n\tfunction fillImpliedPositions(colorStops) {\n\t\tvar from = 0;\n\t\t\n\t\t_.each(colorStops, function(cs, i) {\n\t\t\t// make sure that first and last positions are defined\n\t\t\tif (!i)\n\t\t\t\treturn cs.position = cs.position || 0;\n\t\t\t\n\t\t\tif (i == colorStops.length - 1 && !('position' in cs))\n\t\t\t\tcs.position = 1;\n\t\t\t\n\t\t\tif ('position' in cs) {\n\t\t\t\tvar start = colorStops[from].position || 0;\n\t\t\t\tvar step = (cs.position - start) / (i - from);\n\t\t\t\t_.each(colorStops.slice(from, i), function(cs2, j) {\n\t\t\t\t\tcs2.position = start + step * j;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfrom = i;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Returns textual version of direction expressed in degrees\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction textualDirection(direction) {\n\t\tvar angle = parseFloat(direction);\n\t\t\n\t\tif(!_.isNaN(angle)) {\n\t\t\tswitch(angle % 360) {\n\t\t\t\tcase 0:   return 'left';\n\t\t\t\tcase 90:  return 'bottom';\n\t\t\t\tcase 180: return 'right';\n\t\t\t\tcase 240: return 'top';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn direction;\n\t}\n\t\n\t/**\n\t * Creates direction definition for old Webkit gradients\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction oldWebkitDirection(direction) {\n\t\tdirection = textualDirection(direction);\n\t\t\n\t\tif(reDeg.test(direction))\n\t\t\tthrow \"The direction is an angle that can’t be converted.\";\n\t\t\n\t\tvar v = function(pos) {\n\t\t\treturn ~direction.indexOf(pos) ? '100%' : '0';\n\t\t};\n\t\t\n\t\treturn v('right') + ' ' + v('bottom') + ', ' + v('left') + ' ' + v('top');\n\t}\n\t\n\tfunction getPrefixedNames(name) {\n\t\tvar prefixes = prefs.getArray('css.gradient.prefixes');\n\t\tvar names = prefixes \n\t\t\t? _.map(prefixes, function(p) {\n\t\t\t\treturn '-' + p + '-' + name;\n\t\t\t}) \n\t\t\t: [];\n\t\t\n\t\tnames.push(name);\n\t\t\n\t\treturn names;\n\t}\n\t\n\t/**\n\t * Returns list of CSS properties with gradient\n\t * @param {Object} gradient\n\t * @param {String} propertyName Original CSS property name\n\t * @returns {Array}\n\t */\n\tfunction getPropertiesForGradient(gradient, propertyName) {\n\t\tvar props = [];\n\t\tvar css = require('cssResolver');\n\t\t\n\t\tif (prefs.get('css.gradient.fallback') && ~propertyName.toLowerCase().indexOf('background')) {\n\t\t\tprops.push({\n\t\t\t\tname: 'background-color',\n\t\t\t\tvalue: '${1:' + gradient.colorStops[0].color + '}'\n\t\t\t});\n\t\t}\n\t\t\n\t\t_.each(prefs.getArray('css.gradient.prefixes'), function(prefix) {\n\t\t\tvar name = css.prefixed(propertyName, prefix);\n\t\t\tif (prefix == 'webkit' && prefs.get('css.gradient.oldWebkit')) {\n\t\t\t\ttry {\n\t\t\t\t\tprops.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: module.oldWebkitLinearGradient(gradient)\n\t\t\t\t\t});\n\t\t\t\t} catch(e) {}\n\t\t\t}\n\t\t\t\n\t\t\tprops.push({\n\t\t\t\tname: name,\n\t\t\t\tvalue: module.toString(gradient, prefix)\n\t\t\t});\n\t\t});\n\t\t\n\t\treturn props.sort(function(a, b) {\n\t\t\treturn b.name.length - a.name.length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Pastes gradient definition into CSS rule with correct vendor-prefixes\n\t * @param {EditElement} property Matched CSS property\n\t * @param {Object} gradient Parsed gradient\n\t * @param {Range} valueRange If passed, only this range within property \n\t * value will be replaced with gradient. Otherwise, full value will be \n\t * replaced\n\t */\n\tfunction pasteGradient(property, gradient, valueRange) {\n\t\tvar rule = property.parent;\n\t\tvar utils = require('utils');\n\t\tvar alignVendor = require('preferences').get('css.alignVendor');\n\t\t\n\t\t// we may have aligned gradient definitions: find the smallest value\n\t\t// separator\n\t\tvar sep = property.styleSeparator;\n\t\tvar before = property.styleBefore;\n\t\t\n\t\t// first, remove all properties within CSS rule with the same name and\n\t\t// gradient definition\n\t\t_.each(rule.getAll(getPrefixedNames(property.name())), function(item) {\n\t\t\tif (item != property && /gradient/i.test(item.value())) {\n\t\t\t\tif (item.styleSeparator.length < sep.length) {\n\t\t\t\t\tsep = item.styleSeparator;\n\t\t\t\t}\n\t\t\t\tif (item.styleBefore.length < before.length) {\n\t\t\t\t\tbefore = item.styleBefore;\n\t\t\t\t}\n\t\t\t\trule.remove(item);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (alignVendor) {\n\t\t\t// update prefix\n\t\t\tif (before != property.styleBefore) {\n\t\t\t\tvar fullRange = property.fullRange();\n\t\t\t\trule._updateSource(before, fullRange.start, fullRange.start + property.styleBefore.length);\n\t\t\t\tproperty.styleBefore = before;\n\t\t\t}\n\t\t\t\n\t\t\t// update separator value\n\t\t\tif (sep != property.styleSeparator) {\n\t\t\t\trule._updateSource(sep, property.nameRange().end, property.valueRange().start);\n\t\t\t\tproperty.styleSeparator = sep;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar value = property.value();\n\t\tif (!valueRange)\n\t\t\tvalueRange = require('range').create(0, property.value());\n\t\t\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, valueRange);\n\t\t};\n\t\t\n\t\t// put vanilla-clean gradient definition into current rule\n\t\tproperty.value(val(module.toString(gradient)) + '${2}');\n\t\t\n\t\t// create list of properties to insert\n\t\tvar propsToInsert = getPropertiesForGradient(gradient, property.name());\n\t\t\n\t\t// align prefixed values\n\t\tif (alignVendor) {\n\t\t\tvar values = _.pluck(propsToInsert, 'value');\n\t\t\tvar names = _.pluck(propsToInsert, 'name');\n\t\t\tvalues.push(property.value());\n\t\t\tnames.push(property.name());\n\t\t\t\n\t\t\tvar valuePads = utils.getStringsPads(_.map(values, function(v) {\n\t\t\t\treturn v.substring(0, v.indexOf('('));\n\t\t\t}));\n\t\t\t\n\t\t\tvar namePads = utils.getStringsPads(names);\n\t\t\tproperty.name(_.last(namePads) + property.name());\n\t\t\t\n\t\t\t_.each(propsToInsert, function(prop, i) {\n\t\t\t\tprop.name = namePads[i] + prop.name;\n\t\t\t\tprop.value = valuePads[i] + prop.value;\n\t\t\t});\n\t\t\t\n\t\t\tproperty.value(_.last(valuePads) + property.value());\n\t\t}\n\t\t\n\t\t// put vendor-prefixed definitions before current rule\n\t\t_.each(propsToInsert, function(prop) {\n\t\t\trule.add(prop.name, prop.value, rule.indexOf(property));\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS property value\n\t */\n\tfunction findGradient(cssProp) {\n\t\tvar value = cssProp.value();\n\t\tvar gradient = null;\n\t\tvar matchedPart = _.find(cssProp.valueParts(), function(part) {\n\t\t\treturn gradient = module.parse(part.substring(value));\n\t\t});\n\t\t\n\t\tif (matchedPart && gradient) {\n\t\t\treturn {\n\t\t\t\tgradient: gradient,\n\t\t\t\tvalueRange: matchedPart\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Tries to expand gradient outside CSS value \n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t */\n\tfunction expandGradientOutsideValue(editor, syntax) {\n\t\tvar propertyName = prefs.get('css.gradient.defaultProperty');\n\t\t\n\t\tif (!propertyName)\n\t\t\treturn false;\n\t\t\n\t\t// assuming that gradient definition is written on new line,\n\t\t// do a simplified parsing\n\t\tvar content = String(editor.getContent());\n\t\t/** @type Range */\n\t\tvar lineRange = require('range').create(editor.getCurrentLineRange());\n\t\t\n\t\t// get line content and adjust range with padding\n\t\tvar line = lineRange.substring(content)\n\t\t\t.replace(/^\\s+/, function(pad) {\n\t\t\t\tlineRange.start += pad.length;\n\t\t\t\treturn '';\n\t\t\t})\n\t\t\t.replace(/\\s+$/, function(pad) {\n\t\t\t\tlineRange.end -= pad.length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\n\t\tvar css = require('cssResolver');\n\t\tvar gradient = module.parse(line);\n\t\tif (gradient) {\n\t\t\tvar props = getPropertiesForGradient(gradient, propertyName);\n\t\t\tprops.push({\n\t\t\t\tname: propertyName,\n\t\t\t\tvalue: module.toString(gradient) + '${2}'\n\t\t\t});\n\t\t\t\n\t\t\tvar sep = css.getSyntaxPreference('valueSeparator', syntax);\n\t\t\tvar end = css.getSyntaxPreference('propertyEnd', syntax);\n\t\t\t\n\t\t\tif (require('preferences').get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(_.map(props, function(prop) {\n\t\t\t\t\treturn prop.value.substring(0, prop.value.indexOf('('));\n\t\t\t\t}));\n\t\t\t\t_.each(props, function(prop, i) {\n\t\t\t\t\tprop.value = pads[i] + prop.value;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tprops = _.map(props, function(item) {\n\t\t\t\treturn item.name + sep + item.value + end;\n\t\t\t});\n\t\t\t\n\t\t\teditor.replaceContent(props.join('\\n'), lineRange.start, lineRange.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS value under cursor\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @returns {Object}\n\t */\n\tfunction findGradientFromPosition(content, pos) {\n\t\tvar cssProp = null;\n\t\t/** @type EditContainer */\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(content, pos, true);\n\t\t\n\t\tif (cssRule) {\n\t\t\tcssProp = cssRule.itemFromPosition(pos, true);\n\t\t\tif (!cssProp) {\n\t\t\t\t// in case user just started writing CSS property\n\t\t\t\t// and didn't include semicolon–try another approach\n\t\t\t\tcssProp = _.find(cssRule.list(), function(elem) {\n\t\t\t\t\treturn elem.range(true).end == pos;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn {\n\t\t\trule: cssRule,\n\t\t\tproperty: cssProp\n\t\t};\n\t}\n\t\n\t// XXX register expand abbreviation handler\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\trequire('expandAbbreviation').addHandler(function(editor, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tif (!_.include(cssSyntaxes, info.syntax))\n\t\t\treturn false;\n\t\t\n\t\t// let's see if we are expanding gradient definition\n\t\tvar caret = editor.getCaretPos();\n\t\tvar content = info.content;\n\t\tvar css = findGradientFromPosition(content, caret);\n\t\t\n\t\tif (css.property) {\n\t\t\t// make sure that caret is inside property value with gradient \n\t\t\t// definition\n\t\t\tvar g = findGradient(css.property);\n\t\t\tif (g) {\n\t\t\t\tvar ruleStart = css.rule.options.offset || 0;\n\t\t\t\tvar ruleEnd = ruleStart + css.rule.toString().length;\n\t\t\t\t\n\t\t\t\t// Handle special case:\n\t\t\t\t// user wrote gradient definition between existing CSS \n\t\t\t\t// properties and did not finished it with semicolon.\n\t\t\t\t// In this case, we have semicolon right after gradient \n\t\t\t\t// definition and re-parse rule again\n\t\t\t\tif (/[\\n\\r]/.test(css.property.value())) {\n\t\t\t\t\t// insert semicolon at the end of gradient definition\n\t\t\t\t\tvar insertPos = css.property.valueRange(true).start + g.valueRange.end;\n\t\t\t\t\tcontent = require('utils').replaceSubstring(content, ';', insertPos);\n\t\t\t\t\tvar newCss = findGradientFromPosition(content, caret);\n\t\t\t\t\tif (newCss.property) {\n\t\t\t\t\t\tg = findGradient(newCss.property);\n\t\t\t\t\t\tcss = newCss;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// make sure current property has terminating semicolon\n\t\t\t\tcss.property.end(';');\n\t\t\t\t\n\t\t\t\t// resolve CSS property name\n\t\t\t\tvar resolvedName = resolvePropertyName(css.property.name(), syntax);\n\t\t\t\tif (resolvedName) {\n\t\t\t\t\tcss.property.name(resolvedName);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpasteGradient(css.property, g.gradient, g.valueRange);\n\t\t\t\teditor.replaceContent(css.rule.toString(), ruleStart, ruleEnd, true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn expandGradientOutsideValue(editor, syntax);\n\t});\n\t\n\t// XXX register \"Reflect CSS Value\" action delegate\n\t/**\n\t * @param {EditElement} property\n\t */\n\trequire('reflectCSSValue').addHandler(function(property) {\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar g = findGradient(property);\n\t\tif (!g)\n\t\t\treturn false;\n\t\t\n\t\tvar value = property.value();\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, g.valueRange);\n\t\t};\n\t\t\n\t\t// reflect value for properties with the same name\n\t\t_.each(property.parent.getAll(getPrefixedNames(property.name())), function(prop) {\n\t\t\tif (prop === property)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t// check if property value starts with gradient definition\n\t\t\tvar m = prop.value().match(/^\\s*(\\-([a-z]+)\\-)?linear\\-gradient/);\n\t\t\tif (m) {\n\t\t\t\tprop.value(val(module.toString(g.gradient, m[2] || '')));\n\t\t\t} else if (m = prop.value().match(/\\s*\\-webkit\\-gradient/)) {\n\t\t\t\t// old webkit gradient definition\n\t\t\t\tprop.value(val(module.oldWebkitLinearGradient(g.gradient)));\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Parses gradient definition\n\t\t * @param {String} gradient\n\t\t * @returns {Object}\n\t\t */\n\t\tparse: function(gradient) {\n\t\t\tvar result = null;\n\t\t\trequire('utils').trim(gradient).replace(/^([\\w\\-]+)\\((.+?)\\)$/, function(str, type, definition) {\n\t\t\t\t// remove vendor prefix\n\t\t\t\ttype = type.toLowerCase().replace(/^\\-[a-z]+\\-/, '');\n\t\t\t\tif (type == 'linear-gradient' || type == 'lg') {\n\t\t\t\t\tresult = parseLinearGradient(definition);\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Produces linear gradient definition used in early Webkit \n\t\t * implementations\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @returns {String}\n\t\t */\n\t\toldWebkitLinearGradient: function(gradient) {\n\t\t\tif (_.isString(gradient))\n\t\t\t\tgradient = this.parse(gradient);\n\t\t\t\n\t\t\tif (!gradient)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tvar colorStops = _.map(gradient.colorStops, _.clone);\n\t\t\t\n\t\t\t// normalize color-stops position\n\t\t\t_.each(colorStops, function(cs) {\n\t\t\t\tif (!('position' in cs)) // implied position\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tif (~cs.position.indexOf('.') || cs.unit == '%') {\n\t\t\t\t\tcs.position = parseFloat(cs.position) / (cs.unit == '%' ? 100 : 1);\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"Can't convert color stop '\" + (cs.position + (cs.unit || '')) + \"'\";\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tfillImpliedPositions(colorStops);\n\t\t\t\n\t\t\t// transform color-stops into string representation\n\t\t\tcolorStops = _.map(colorStops, function(cs, i) {\n\t\t\t\tif (!cs.position && !i)\n\t\t\t\t\treturn 'from(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\tif (cs.position == 1 && i == colorStops.length - 1)\n\t\t\t\t\treturn 'to(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\treturn 'color-stop(' + (cs.position.toFixed(2).replace(/\\.?0+$/, '')) + ', ' + cs.color + ')';\n\t\t\t});\n\t\t\t\n\t\t\treturn '-webkit-gradient(linear, ' \n\t\t\t\t+ oldWebkitDirection(gradient.direction)\n\t\t\t\t+ ', '\n\t\t\t\t+ colorStops.join(', ')\n\t\t\t\t+ ')';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of parsed gradient\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @param {String} prefix Vendor prefix\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function(gradient, prefix) {\n\t\t\tif (gradient.type == 'linear') {\n\t\t\t\tvar fn = (prefix ? '-' + prefix + '-' : '') + 'linear-gradient';\n\t\t\t\t\n\t\t\t\t// transform color-stops\n\t\t\t\tvar colorStops = _.map(gradient.colorStops, function(cs) {\n\t\t\t\t\treturn cs.color + ('position' in cs \n\t\t\t\t\t\t\t? ' ' + cs.position + (cs.unit || '')\n\t\t\t\t\t\t\t: '');\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (gradient.direction \n\t\t\t\t\t\t&& (!prefs.get('css.gradient.omitDefaultDirection') \n\t\t\t\t\t\t|| !_.include(defaultLinearDirections, gradient.direction))) {\n\t\t\t\t\tcolorStops.unshift(gradient.direction);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn fn + '(' + colorStops.join(', ') + ')';\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Module adds support for generators: a regexp-based abbreviation resolver \n * that can produce custom output.\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type HandlerList */\n\tvar generators = require('handlerList').create();\n\tvar resources = require('resources');\n\t\n\t_.extend(resources, {\n\t\t/**\n\t\t * Add generator. A generator function <code>fn</code> will be called \n\t\t * only if current abbreviation matches <code>regexp</code> regular \n\t\t * expression and this function should return <code>null</code> if\n\t\t * abbreviation cannot be resolved\n\t\t * @param {RegExp} regexp Regular expression for abbreviation element name\n\t\t * @param {Function} fn Resolver function\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddGenerator: function(regexp, fn, options) {\n\t\t\tif (_.isString(regexp))\n\t\t\t\tregexp = new RegExp(regexp);\n\t\t\t\n\t\t\tgenerators.add(function(node, syntax) {\n\t\t\t\tvar m;\n\t\t\t\tif ((m = regexp.exec(node.name()))) {\n\t\t\t\t\treturn fn(m, node, syntax);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}, options);\n\t\t}\n\t});\n\t\n\tresources.addResolver(function(node, syntax) {\n\t\treturn generators.exec(null, _.toArray(arguments));\n\t});\n});/**\n * Module for resolving tag names: returns best matched tag name for child\n * element based on passed parent's tag name. Also provides utility function\n * for element type detection (inline, block-level, empty)\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('tagName', function(require, _) {\n\tvar elementTypes = {\n//\t\tempty: 'area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,keygen,command'.split(','),\n\t\tempty: [],\n\t\tblockLevel: 'address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,link,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,h1,h2,h3,h4,h5,h6'.split(','),\n\t\tinlineLevel: 'a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(',')\n\t};\n\t\n\tvar elementMap = {\n\t\t'p': 'span',\n\t\t'ul': 'li',\n\t\t'ol': 'li',\n\t\t'table': 'tr',\n\t\t'tr': 'td',\n\t\t'tbody': 'tr',\n\t\t'thead': 'tr',\n\t\t'tfoot': 'tr',\n\t\t'colgroup': 'col',\n\t\t'select': 'option',\n\t\t'optgroup': 'option',\n\t\t'audio': 'source',\n\t\t'video': 'source',\n\t\t'object': 'param',\n\t\t'map': 'area'\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Returns best matched child element name for passed parent's\n\t\t * tag name\n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t * @memberOf tagName\n\t\t */\n\t\tresolve: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\t\n\t\t\tif (name in elementMap)\n\t\t\t\treturn this.getMapping(name);\n\t\t\t\n\t\t\tif (this.isInlineLevel(name))\n\t\t\t\treturn 'span';\n\t\t\t\n\t\t\treturn 'div';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns mapped child element name for passed parent's name \n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t */\n\t\tgetMapping: function(name) {\n\t\t\treturn elementMap[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element name belongs to inline-level element\n\t\t * @param {String} name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'inlineLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element belongs to block-level element.\n\t\t * For better matching of unknown elements (for XML, for example), \n\t\t * you should use <code>!this.isInlineLevel(name)</code>\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisBlockLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'blockLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is void (i.e. should not have closing tag).\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisEmptyElement: function(name) {\n\t\t\treturn this.isTypeOf(name, 'empty');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Generic function for testing if element name belongs to specified\n\t\t * elements collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} type Collection name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisTypeOf: function(name, type) {\n\t\t\treturn _.include(elementTypes[type], name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new parent–child mapping\n\t\t * @param {String} parent\n\t\t * @param {String} child\n\t\t */\n\t\taddMapping: function(parent, child) {\n\t\t\telementMap[parent] = child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes parent-child mapping\n\t\t */\n\t\tremoveMapping: function(parent) {\n\t\t\tif (parent in elementMap)\n\t\t\t\tdelete elementMap[parent];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new element into collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t */\n\t\taddElementToCollection: function(name, collection) {\n\t\t\tif (!elementTypes[collection])\n\t\t\t\telementTypes[collection] = [];\n\t\t\t\n\t\t\tvar col = this.getCollection(collection);\n\t\t\tif (!_.include(col, name))\n\t\t\t\tcol.push(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes element name from specified collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t * @returns\n\t\t */\n\t\tremoveElementFromCollection: function(name, collection) {\n\t\t\tif (collection in elementTypes) {\n\t\t\t\telementTypes[collection] = _.without(this.getCollection(collection), name);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns elements name collection\n\t\t * @param {String} name Collection name\n\t\t * @returns {Array}\n\t\t */\n\t\tgetCollection: function(name) {\n\t\t\treturn elementTypes[name];\n\t\t}\n\t};\n});/**\n * Filter for aiding of writing elements with complex class names as described\n * in Yandex's BEM (Block, Element, Modifier) methodology. This filter will\n * automatically inherit block and element names from parent elements and insert\n * them into child element classes\n * @memberOf __bemFilterDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar prefs = require('preferences');\n\tprefs.define('bem.elementSeparator', '__', 'Class name’s element separator.');\n\tprefs.define('bem.modifierSeparator', '_', 'Class name’s modifier separator.');\n\tprefs.define('bem.shortElementPrefix', '-', \n\t\t\t'Symbol for describing short “block-element” notation. Class names '\n\t\t\t+ 'prefixed with this symbol will be treated as element name for parent‘s '\n\t\t\t+ 'block name. Each symbol instance traverses one level up in parsed ' \n\t\t\t+ 'tree for block name lookup. Empty value will disable short notation.');\n\t\n\tvar shouldRunHtmlFilter = false;\n\t\n\tfunction getSeparators() {\n\t\treturn {\n\t\t\telement: prefs.get('bem.elementSeparator'),\n\t\t\tmodifier: prefs.get('bem.modifierSeparator')\n\t\t};\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction bemParse(item) {\n\t\tif (require('abbreviationUtils').isSnippet(item))\n\t\t\treturn item;\n\t\t\n\t\t// save BEM stuff in cache for faster lookups\n\t\titem.__bem = {\n\t\t\tblock: '',\n\t\t\telement: '',\n\t\t\tmodifier: ''\n\t\t};\n\t\t\n\t\tvar classNames = normalizeClassName(item.attribute('class')).split(' ');\n\t\t\n\t\t// guess best match for block name\n\t\tvar reBlockName = /^[a-z]\\-/i;\n\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\treturn reBlockName.test(name);\n\t\t});\n\t\t\n\t\t// guessing doesn't worked, pick first class name as block name\n\t\tif (!item.__bem.block) {\n\t\t\treBlockName = /^[a-z]/i;\n\t\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\t\treturn reBlockName.test(name);\n\t\t\t}) || '';\n\t\t}\n\t\t\n\t\tclassNames = _.chain(classNames)\n\t\t\t.map(function(name) {return processClassName(name, item);})\n\t\t\t.flatten()\n\t\t\t.uniq()\n\t\t\t.value()\n\t\t\t.join(' ');\n\t\t\n\t\tif (classNames)\n\t\t\titem.attribute('class', classNames);\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * @param {String} className\n\t * @returns {String}\n\t */\n\tfunction normalizeClassName(className) {\n\t\tvar utils = require('utils');\n\t\tclassName = (' ' + (className || '') + ' ').replace(/\\s+/g, ' ');\n\t\t\n\t\tvar shortSymbol = prefs.get('bem.shortElementPrefix');\n\t\tif (shortSymbol) {\n\t\t\tvar re = new RegExp('\\\\s(' + utils.escapeForRegexp(shortSymbol) + '+)', 'g');\n\t\t\tclassName = className.replace(re, function(str, p1) {\n\t\t\t\treturn ' ' + utils.repeatString(getSeparators().element, p1.length);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn utils.trim(className);\n\t}\n\t\n\t/**\n\t * Processes class name\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @returns Processed class name. May return <code>Array</code> of\n\t * class names \n\t */\n\tfunction processClassName(name, item) {\n\t\tname = transformClassName(name, item, 'element');\n\t\tname = transformClassName(name, item, 'modifier');\n\t\t\n\t\t// expand class name\n\t\t// possible values:\n\t\t// * block__element\n\t\t// * block__element_modifier\n\t\t// * block__element_modifier1_modifier2\n\t\t// * block_modifier\n\t\tvar block = '', element = '', modifier = '';\n\t\tvar separators = getSeparators();\n\t\tif (~name.indexOf(separators.element)) {\n\t\t\tvar blockElem = name.split(separators.element);\n\t\t\tvar elemModifiers = blockElem[1].split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockElem[0];\n\t\t\telement = elemModifiers.shift();\n\t\t\tmodifier = elemModifiers.join(separators.modifier);\n\t\t} else if (~name.indexOf(separators.modifier)) {\n\t\t\tvar blockModifiers = name.split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockModifiers.shift();\n\t\t\tmodifier = blockModifiers.join(separators.modifier);\n\t\t}\n\t\t\n\t\tif (block || element || modifier) {\n\t\t\tif (!block) {\n\t\t\t\tblock = item.__bem.block;\n\t\t\t}\n\t\t\t\n\t\t\t// inherit parent bem element, if exists\n//\t\t\tif (item.parent && item.parent.__bem && item.parent.__bem.element)\n//\t\t\t\telement = item.parent.__bem.element + separators.element + element;\n\t\t\t\n\t\t\t// produce multiple classes\n\t\t\tvar prefix = block;\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tif (element) {\n\t\t\t\tprefix += separators.element + element;\n\t\t\t\tresult.push(prefix);\n\t\t\t} else {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t\t\n\t\t\tif (modifier) {\n\t\t\t\tresult.push(prefix + separators.modifier + modifier);\n\t\t\t}\n\t\t\t\n\t\t\titem.__bem.block = block;\n\t\t\titem.__bem.element = element;\n\t\t\titem.__bem.modifier = modifier;\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\t// ...otherwise, return processed or original class name\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Low-level function to transform user-typed class name into full BEM class\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @param {String} entityType Type of entity to be tried to transform \n\t * ('element' or 'modifier')\n\t * @returns {String} Processed class name or original one if it can't be\n\t * transformed\n\t */\n\tfunction transformClassName(name, item, entityType) {\n\t\tvar separators = getSeparators();\n\t\tvar reSep = new RegExp('^(' + separators[entityType] + ')+', 'g');\n\t\tif (reSep.test(name)) {\n\t\t\tvar depth = 0; // parent lookup depth\n\t\t\tvar cleanName = name.replace(reSep, function(str, p1) {\n\t\t\t\tdepth = str.length / separators[entityType].length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\t// find donor element\n\t\t\tvar donor = item;\n\t\t\twhile (donor.parent && depth--) {\n\t\t\t\tdonor = donor.parent;\n\t\t\t}\n\t\t\t\n\t\t\tif (!donor || !donor.__bem)\n\t\t\t\tdonor = item;\n\t\t\t\n\t\t\tif (donor && donor.__bem) {\n\t\t\t\tvar prefix = donor.__bem.block;\n\t\t\t\t\n\t\t\t\t// decide if we should inherit element name\n//\t\t\t\tif (entityType == 'element') {\n//\t\t\t\t\tvar curElem = cleanName.split(separators.modifier, 1)[0];\n//\t\t\t\t\tif (donor.__bem.element && donor.__bem.element != curElem)\n//\t\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n//\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (entityType == 'modifier' &&  donor.__bem.element)\n\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n\t\t\t\t\n\t\t\t\treturn prefix + separators[entityType] + cleanName;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Recursive function for processing tags, which extends class names \n\t * according to BEM specs: http://bem.github.com/bem-method/pages/beginning/beginning.ru.html\n\t * <br><br>\n\t * It does several things:<br>\n\t * <ul>\n\t * <li>Expands complex class name (according to BEM symbol semantics):\n\t * .block__elem_modifier → .block.block__elem.block__elem_modifier\n\t * </li>\n\t * <li>Inherits block name on child elements: \n\t * .b-block > .__el > .__el → .b-block > .b-block__el > .b-block__el__el\n\t * </li>\n\t * <li>Treats first dash symbol as '__'</li>\n\t * <li>Double underscore (or typographic '–') is also treated as an element \n\t * level lookup, e.g. ____el will search for element definition in parent’s \n\t * parent element:\n\t * .b-block > .__el1 > .____el2 → .b-block > .b-block__el1 > .b-block__el2\n\t * </li>\n\t * </ul>\n\t * \n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t */\n\tfunction process(tree, profile) {\n\t\tif (tree.name)\n\t\t\tbemParse(tree, profile);\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tprocess(item, profile);\n\t\t\tif (!abbrUtils.isSnippet(item) && item.start)\n\t\t\t\tshouldRunHtmlFilter = true;\n\t\t});\n\t\t\n\t\treturn tree;\n\t};\n\t\n\trequire('filters').add('bem', function(tree, profile) {\n\t\tshouldRunHtmlFilter = false;\n\t\ttree = process(tree, profile);\n\t\t// in case 'bem' filter is applied after 'html' filter: run it again\n\t\t// to update output\n\t\tif (shouldRunHtmlFilter) {\n\t\t\ttree = require('filters').apply(tree, 'html', profile);\n\t\t}\n\t\t\n\t\treturn tree;\n\t});\n});\n\n/**\n * Comment important tags (with 'id' and 'class' attributes)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __commentFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t// define some preferences\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\tprefs.define('filter.commentAfter', \n\t\t\t'\\n<!-- /<%= attr(\"id\", \"#\") %><%= attr(\"class\", \".\") %> -->',\n\t\t\t'A definition of comment that should be placed <i>after</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. This definition '\n\t\t\t+ 'is an ERB-style template passed to <code>_.template()</code> '\n\t\t\t+ 'function (see Underscore.js docs for details). In template context, '\n\t\t\t+ 'the following properties and functions are availabe:\\n'\n\t\t\t+ '<ul>'\n\t\t\t\n\t\t\t+ '<li><code>attr(name, before, after)</code> – a function that outputs' \n\t\t\t+ 'specified attribute value concatenated with <code>before</code> ' \n\t\t\t+ 'and <code>after</code> strings. If attribute doesn\\'t exists, the ' \n\t\t\t+ 'empty string will be returned.</li>'\n\t\t\t\n\t\t\t+ '<li><code>node</code> – current node (instance of <code>AbbreviationNode</code>)</li>'\n\t\t\t\n\t\t\t+ '<li><code>name</code> – name of current tag</li>'\n\t\t\t\n\t\t\t+ '<li><code>padding</code> – current string padding, can be used ' \n\t\t\t+ 'for formatting</li>'\n\t\t\t\n\t\t\t+'</ul>');\n\t\n\tprefs.define('filter.commentBefore', \n\t\t\t'',\n\t\t\t'A definition of comment that should be placed <i>before</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. '\n\t\t\t+ 'For more info, read description of <code>filter.commentAfter</code> '\n\t\t\t+ 'property');\n\t\n\tprefs.define('filter.commentTrigger', 'id, class',\n\t\t\t'A comma-separated list of attribute names that should exist in abbreviatoin '\n\t\t\t+ 'where comment should be added. If you wish to add comment for '\n\t\t\t+ 'every element, set this option to <code>*</code>');\n\t\n\t/**\n\t * Add comments to tag\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction addComments(node, templateBefore, templateAfter) {\n\t\tvar utils = require('utils');\n\t\t\n\t\t// check if comments should be added\n\t\tvar trigger = prefs.get('filter.commentTrigger');\n\t\tif (trigger != '*') {\n\t\t\tvar shouldAdd = _.find(trigger.split(','), function(name) {\n\t\t\t\treturn !!node.attribute(utils.trim(name));\n\t\t\t});\n\t\t\tif (!shouldAdd) return;\n\t\t}\n\t\t\n\t\tvar ctx = {\n\t\t\tnode: node,\n\t\t\tname: node.name(),\n\t\t\tpadding: node.parent ? node.parent.padding : '',\n\t\t\tattr: function(name, before, after) {\n\t\t\t\tvar attr = node.attribute(name);\n\t\t\t\tif (attr) {\n\t\t\t\t\treturn (before || '') + attr + (after || '');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar nodeBefore = utils.normalizeNewline(templateBefore ? templateBefore(ctx) : '');\n\t\tvar nodeAfter = utils.normalizeNewline(templateAfter ? templateAfter(ctx) : '');\n\t\t\n\t\tnode.start = node.start.replace(/</, nodeBefore + '<');\n\t\tnode.end = node.end.replace(/>/, '>' + nodeAfter);\n\t}\n\t\n\tfunction process(tree, before, after) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isBlock(item))\n\t\t\t\taddComments(item, before, after);\n\t\t\t\n\t\t\tprocess(item, before, after);\n\t\t});\n\t\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('c', function(tree) {\n\t\tvar templateBefore = _.template(prefs.get('filter.commentBefore'));\n\t\tvar templateAfter = _.template(prefs.get('filter.commentAfter'));\n\t\t\n\t\treturn process(tree, templateBefore, templateAfter);\n\t});\n});\n/**\n * Filter for escaping unsafe XML characters: <, >, &\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.exec(function(require, _) {\n\tvar charMap = {\n\t\t'<': '&lt;',\n\t\t'>': '&gt;',\n\t\t'&': '&amp;'\n\t};\n\t\n\tfunction escapeChars(str) {\n\t\treturn str.replace(/([<>&])/g, function(str, p1){\n\t\t\treturn charMap[p1];\n\t\t});\n\t}\n\t\n\trequire('filters').add('e', function process(tree) {\n\t\t_.each(tree.children, function(item) {\n\t\t\titem.start = escapeChars(item.start);\n\t\t\titem.end = escapeChars(item.end);\n\t\t\titem.content = escapeChars(item.content);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Generic formatting filter: creates proper indentation for each tree node,\n * placing \"%s\" placeholder where the actual output should be. You can use\n * this filter to preformat tree and then replace %s placeholder to whatever you\n * need. This filter should't be called directly from editor as a part \n * of abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __formatFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _){\n\tvar placeholder = '%s';\n\t\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('format.noIndentTags', 'html', \n\t\t\t'A comma-separated list of tag names that should not get inner indentation.');\n\t\n\tprefs.define('format.forceIndentationForTags', 'body', \n\t\t'A comma-separated list of tag names that should <em>always</em> get inner indentation.');\n\t\n\t/**\n\t * Get indentation for given node\n\t * @param {AbbreviationNode} node\n\t * @returns {String}\n\t */\n\tfunction getIndentation(node) {\n\t\tif (_.include(prefs.getArray('format.noIndentTags') || [], node.name())) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\treturn require('resources').getVariable('indentation');\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && require('abbreviationUtils').hasBlockChildren(item.parent);\n\t}\n\t\n\t/**\n\t * Test if passed item is very first child in parsed tree\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction isVeryFirstChild(item) {\n\t\treturn item.parent && !item.parent.parent && !item.index();\n\t}\n\t\n\t/**\n\t * Check if a newline should be added before element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldAddLineBreak(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tif (profile.tag_nl === true || abbrUtils.isBlock(node))\n\t\t\treturn true;\n\t\t\n\t\tif (!node.parent || !profile.inline_break)\n\t\t\treturn false;\n\t\t\n\t\t// check if there are required amount of adjacent inline element\n\t\treturn shouldFormatInline(node.parent, profile);\n}\n\t\n\t/**\n\t * Need to add newline because <code>item</code> has too many inline children\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction shouldBreakChild(node, profile) {\n\t\t// we need to test only one child element, because \n\t\t// hasBlockChildren() method will do the rest\n\t\treturn node.children.length && shouldAddLineBreak(node.children[0], profile);\n\t}\n\t\n\tfunction shouldFormatInline(node, profile) {\n\t\tvar nodeCount = 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\treturn !!_.find(node.children, function(child) {\n\t\t\tif (child.isTextNode() || !abbrUtils.isInline(child))\n\t\t\t\tnodeCount = 0;\n\t\t\telse if (abbrUtils.isInline(child))\n\t\t\t\tnodeCount++;\n\t\t\t\n\t\t\tif (nodeCount >= profile.inline_break)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\t\n\tfunction isRoot(item) {\n\t\treturn !item.parent;\n\t}\n\t\n\t/**\n\t * Processes element with matched resource of type <code>snippet</code>\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processSnippet(item, profile, level) {\n\t\titem.start = item.end = '';\n\t\tif (!isVeryFirstChild(item) && profile.tag_nl !== false && shouldAddLineBreak(item, profile)) {\n\t\t\t// check if we’re not inside inline element\n\t\t\tif (isRoot(item.parent) || !require('abbreviationUtils').isInline(item.parent)) {\n\t\t\t\titem.start = require('utils').getNewline() + item.start;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Check if we should add line breaks inside inline element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldBreakInsideInline(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar hasBlockElems = _.any(node.children, function(child) {\n\t\t\tif (abbrUtils.isSnippet(child))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn !abbrUtils.isInline(child);\n\t\t});\n\t\t\n\t\tif (!hasBlockElems) {\n\t\t\treturn shouldFormatInline(node, profile);\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\titem.start = item.end = placeholder;\n\t\tvar utils = require('utils');\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar nl = utils.getNewline();\n\t\tvar indent = getIndentation(item);\n\t\t\t\n\t\t// formatting output\n\t\tif (profile.tag_nl !== false) {\n\t\t\tvar forceNl = profile.tag_nl === true && (profile.tag_nl_leaf || item.children.length);\n\t\t\tif (!forceNl) {\n\t\t\t\tforceNl = _.include(prefs.getArray('format.forceIndentationForTags') || [], item.name());\n\t\t\t}\n\t\t\t\n\t\t\t// formatting block-level elements\n\t\t\tif (!item.isTextNode()) {\n\t\t\t\tif (shouldAddLineBreak(item, profile)) {\n\t\t\t\t\t// - do not indent the very first element\n\t\t\t\t\t// - do not indent first child of a snippet\n\t\t\t\t\tif (!isVeryFirstChild(item) && (!abbrUtils.isSnippet(item.parent) || item.index()))\n\t\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasBlockChildren(item) || shouldBreakChild(item, profile) || (forceNl && !isUnary))\n\t\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasTagsInContent(item) || (forceNl && !item.children.length && !isUnary))\n\t\t\t\t\t\titem.start += nl + indent;\n\t\t\t\t} else if (abbrUtils.isInline(item) && hasBlockSibling(item) && !isVeryFirstChild(item)) {\n\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t} else if (abbrUtils.isInline(item) && shouldBreakInsideInline(item, profile)) {\n\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.padding = indent;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('_format', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isSnippet(item))\n\t\t\t\tprocessSnippet(item, profile, level);\n\t\t\telse\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter for producing HAML code from abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __hamlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar childToken = '${child}';\n\t\n\tfunction transformClassName(className) {\n\t\treturn require('utils').trim(className).replace(/\\s+/g, '.');\n\t}\n\t\n\t/**\n\t * Creates HAML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} tag\n\t * @param {Object} profile\n\t */\n\tfunction makeAttributesString(tag, profile) {\n\t\tvar attrs = '';\n\t\tvar otherAttrs = [];\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\t_.each(tag.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\tswitch (attrName.toLowerCase()) {\n\t\t\t\t// use short notation for ID and CLASS attributes\n\t\t\t\tcase 'id':\n\t\t\t\t\tattrs += '#' + (a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'class':\n\t\t\t\t\tattrs += '.' + transformClassName(a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\t// process other attributes\n\t\t\t\tdefault:\n\t\t\t\t\totherAttrs.push(':' +attrName + ' => ' + attrQuote + (a.value || cursor) + attrQuote);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (otherAttrs.length)\n\t\t\tattrs += '{' + otherAttrs.join(', ') + '}';\n\t\t\n\t\treturn attrs;\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && item.parent.hasBlockChildren();\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent)\n\t\t\t// looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile);\n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar selfClosing = profile.self_closing_tag && isUnary ? '/' : '';\n\t\tvar start= '';\n\t\t\t\n\t\t// define tag name\n\t\tvar tagName = '%' + profile.tagName(item.name());\n\t\tif (tagName.toLowerCase() == '%div' && attrs && attrs.indexOf('{') == -1)\n\t\t\t// omit div tag\n\t\t\ttagName = '';\n\t\t\t\n\t\titem.end = '';\n\t\tstart = tagName + attrs + selfClosing + ' ';\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\t\n\t\tif (!item.children.length && !isUnary)\n\t\t\titem.start += cursor;\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('haml', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter that produces HTML tree\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __htmlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Creates HTML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction makeAttributesString(node, profile) {\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\treturn _.map(node.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\treturn ' ' + attrName + '=' + attrQuote + (a.value || cursor) + attrQuote;\n\t\t}).join('');\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent) // looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile); \n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar start= '';\n\t\tvar end = '';\n\t\t\t\n\t\t// define opening and closing tags\n\t\tif (!item.isTextNode()) {\n\t\t\tvar tagName = profile.tagName(item.name());\n\t\t\tif (isUnary) {\n\t\t\t\tstart = '<' + tagName + attrs + profile.selfClosing() + '>';\n\t\t\t\titem.end = '';\n\t\t\t} else {\n\t\t\t\tstart = '<' + tagName + attrs + '>';\n\t\t\t\tend = '</' + tagName + '>';\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\titem.end = utils.replaceSubstring(item.end, end, item.end.indexOf(placeholder), placeholder);\n\t\t\n\t\t// should we put caret placeholder after opening tag?\n\t\tif (\n\t\t\t\t!item.children.length \n\t\t\t\t&& !isUnary \n\t\t\t\t&& !~item.content.indexOf(cursor)\n\t\t\t\t&& !require('tabStops').extract(item.content).tabstops.length\n\t\t\t) {\n\t\t\titem.start += cursor;\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('html', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Output abbreviation on a single line (i.e. no line breaks)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __singleLineFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar rePad = /^\\s+/;\n\tvar reNl = /[\\n\\r]/g;\n\t\n\trequire('filters').add('s', function process(tree, profile, level) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)) {\n\t\t\t\t// remove padding from item \n\t\t\t\titem.start = item.start.replace(rePad, '');\n\t\t\t\titem.end = item.end.replace(rePad, '');\n\t\t\t}\n\t\t\t\n\t\t\t// remove newlines \n\t\t\titem.start = item.start.replace(reNl, '');\n\t\t\titem.end = item.end.replace(reNl, '');\n\t\t\titem.content = item.content.replace(reNl, '');\n\t\t\t\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});\n/**\n * Trim filter: removes characters at the beginning of the text\n * content that indicates lists: numbers, #, *, -, etc.\n * \n * Useful for wrapping lists with abbreviation.\n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __trimFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('preferences').define('filter.trimRegexp', '[\\\\s|\\\\u00a0]*[\\\\d|#|\\\\-|\\*|\\\\u2022]+\\\\.?\\\\s*',\n\t\t\t'Regular expression used to remove list markers (numbers, dashes, ' \n\t\t\t+ 'bullets, etc.) in <code>t</code> (trim) filter. The trim filter '\n\t\t\t+ 'is useful for wrapping with abbreviation lists, pased from other ' \n\t\t\t+ 'documents (for example, Word documents).');\n\t\n\tfunction process(tree, re) {\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (item.content)\n\t\t\t\titem.content = item.content.replace(re, '');\n\t\t\t\n\t\t\tprocess(item, re);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('t', function(tree) {\n\t\tvar re = new RegExp(require('preferences').get('filter.trimRegexp'));\n\t\treturn process(tree, re);\n\t});\n});\n/**\n * Filter for trimming \"select\" attributes from some tags that contains\n * child elements\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __xslFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar tags = {\n\t\t'xsl:variable': 1,\n\t\t'xsl:with-param': 1\n\t};\n\t\n\t/**\n\t * Removes \"select\" attribute from node\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction trimAttribute(node) {\n\t\tnode.start = node.start.replace(/\\s+select\\s*=\\s*(['\"]).*?\\1/, '');\n\t}\n\t\n\trequire('filters').add('xsl', function process(tree) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)\n\t\t\t\t\t&& (item.name() || '').toLowerCase() in tags \n\t\t\t\t\t&& item.children.length)\n\t\t\t\ttrimAttribute(item);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * \"Lorem ipsum\" text generator. Matches <code>lipsum(num)?</code> or \n * <code>lorem(num)?</code> abbreviation.\n * This code is based on Django's contribution: \n * https://code.djangoproject.com/browser/django/trunk/django/contrib/webdesign/lorem_ipsum.py\n * <br><br>\n * Examples to test:<br>\n * <code>lipsum</code> – generates 30 words text.<br>\n * <code>lipsum*6</code> – generates 6 paragraphs (autowrapped with &lt;p&gt; element) of text.<br>\n * <code>ol>lipsum10*5</code> — generates ordered list with 5 list items (autowrapped with &lt;li&gt; tag)\n * with text of 10 words on each line<br>\n * <code>span*3>lipsum20</code> – generates 3 paragraphs of 20-words text, each wrapped with &lt;span&gt; element .\n * Each paragraph phrase is unique   \n * @param {Function} require\n * @param {Underscore} _ \n * @constructor\n * @memberOf __loremIpsumGeneratorDefine\n */\nemmet.define('lorem', function(require, _) {\n\tvar langs = {\n\t\ten: {\n\t\t\tcommon: ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipisicing', 'elit'],\n\t\t\twords: ['exercitationem', 'perferendis', 'perspiciatis', 'laborum', 'eveniet',\n\t             'sunt', 'iure', 'nam', 'nobis', 'eum', 'cum', 'officiis', 'excepturi',\n\t             'odio', 'consectetur', 'quasi', 'aut', 'quisquam', 'vel', 'eligendi',\n\t             'itaque', 'non', 'odit', 'tempore', 'quaerat', 'dignissimos',\n\t             'facilis', 'neque', 'nihil', 'expedita', 'vitae', 'vero', 'ipsum',\n\t             'nisi', 'animi', 'cumque', 'pariatur', 'velit', 'modi', 'natus',\n\t             'iusto', 'eaque', 'sequi', 'illo', 'sed', 'ex', 'et', 'voluptatibus',\n\t             'tempora', 'veritatis', 'ratione', 'assumenda', 'incidunt', 'nostrum',\n\t             'placeat', 'aliquid', 'fuga', 'provident', 'praesentium', 'rem',\n\t             'necessitatibus', 'suscipit', 'adipisci', 'quidem', 'possimus',\n\t             'voluptas', 'debitis', 'sint', 'accusantium', 'unde', 'sapiente',\n\t             'voluptate', 'qui', 'aspernatur', 'laudantium', 'soluta', 'amet',\n\t             'quo', 'aliquam', 'saepe', 'culpa', 'libero', 'ipsa', 'dicta',\n\t             'reiciendis', 'nesciunt', 'doloribus', 'autem', 'impedit', 'minima',\n\t             'maiores', 'repudiandae', 'ipsam', 'obcaecati', 'ullam', 'enim',\n\t             'totam', 'delectus', 'ducimus', 'quis', 'voluptates', 'dolores',\n\t             'molestiae', 'harum', 'dolorem', 'quia', 'voluptatem', 'molestias',\n\t             'magni', 'distinctio', 'omnis', 'illum', 'dolorum', 'voluptatum', 'ea',\n\t             'quas', 'quam', 'corporis', 'quae', 'blanditiis', 'atque', 'deserunt',\n\t             'laboriosam', 'earum', 'consequuntur', 'hic', 'cupiditate',\n\t             'quibusdam', 'accusamus', 'ut', 'rerum', 'error', 'minus', 'eius',\n\t             'ab', 'ad', 'nemo', 'fugit', 'officia', 'at', 'in', 'id', 'quos',\n\t             'reprehenderit', 'numquam', 'iste', 'fugiat', 'sit', 'inventore',\n\t             'beatae', 'repellendus', 'magnam', 'recusandae', 'quod', 'explicabo',\n\t             'doloremque', 'aperiam', 'consequatur', 'asperiores', 'commodi',\n\t             'optio', 'dolor', 'labore', 'temporibus', 'repellat', 'veniam',\n\t             'architecto', 'est', 'esse', 'mollitia', 'nulla', 'a', 'similique',\n\t             'eos', 'alias', 'dolore', 'tenetur', 'deleniti', 'porro', 'facere',\n\t             'maxime', 'corrupti']\n\t\t},\n\t\tru: {\n\t\t\tcommon: ['далеко-далеко', 'за', 'словесными', 'горами', 'в стране', 'гласных', 'и согласных', 'живут', 'рыбные', 'тексты'],\n\t\t\twords: ['вдали', 'от всех', 'они', 'буквенных', 'домах', 'на берегу', 'семантика', \n\t\t            'большого', 'языкового', 'океана', 'маленький', 'ручеек', 'даль', \n\t\t            'журчит', 'по всей', 'обеспечивает', 'ее','всеми', 'необходимыми', \n\t\t            'правилами', 'эта', 'парадигматическая', 'страна', 'которой', 'жаренные', \n\t\t            'предложения', 'залетают', 'прямо', 'рот', 'даже', 'всемогущая', \n\t\t            'пунктуация', 'не', 'имеет', 'власти', 'над', 'рыбными', 'текстами', \n\t\t            'ведущими', 'безорфографичный', 'образ', 'жизни', 'однажды', 'одна', \n\t\t            'маленькая', 'строчка','рыбного', 'текста', 'имени', 'lorem', 'ipsum', \n\t\t            'решила', 'выйти', 'большой', 'мир', 'грамматики', 'великий', 'оксмокс', \n\t\t            'предупреждал', 'о', 'злых', 'запятых', 'диких', 'знаках', 'вопроса', \n\t\t            'коварных', 'точках', 'запятой', 'но', 'текст', 'дал', 'сбить', \n\t\t            'себя', 'толку', 'он', 'собрал', 'семь', 'своих', 'заглавных', 'букв', \n\t\t            'подпоясал', 'инициал', 'за', 'пояс', 'пустился', 'дорогу', \n\t\t            'взобравшись', 'первую', 'вершину', 'курсивных', 'гор', 'бросил', \n\t\t            'последний', 'взгляд', 'назад', 'силуэт', 'своего', 'родного', 'города', \n\t\t            'буквоград', 'заголовок', 'деревни', 'алфавит', 'подзаголовок', 'своего', \n\t\t            'переулка', 'грустный', 'реторический', 'вопрос', 'скатился', 'его', \n\t\t            'щеке', 'продолжил', 'свой', 'путь', 'дороге', 'встретил', 'рукопись', \n\t\t            'она', 'предупредила',  'моей', 'все', 'переписывается', 'несколько', \n\t\t            'раз', 'единственное', 'что', 'меня', 'осталось', 'это', 'приставка', \n\t\t            'возвращайся', 'ты', 'лучше', 'свою', 'безопасную', 'страну', 'послушавшись', \n\t\t            'рукописи', 'наш', 'продолжил', 'свой', 'путь', 'вскоре', 'ему', \n\t\t            'повстречался', 'коварный', 'составитель', 'рекламных', 'текстов', \n\t\t            'напоивший', 'языком', 'речью', 'заманивший', 'свое', 'агенство', \n\t\t            'которое', 'использовало', 'снова', 'снова', 'своих', 'проектах', \n\t\t            'если', 'переписали', 'то', 'живет', 'там', 'до', 'сих', 'пор']\n\t\t}\n\t};\n\n\tvar prefs = require('preferences');\n\tprefs.define('lorem.defaultLang', 'en');\n\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar re = /^(?:lorem|lipsum)([a-z]{2})?(\\d*)$/i, match;\n\t\t\n\t\t/** @param {AbbreviationNode} node */\n\t\ttree.findAll(function(node) {\n\t\t\tif (node._name && (match = node._name.match(re))) {\n\t\t\t\tvar wordCound = match[2] || 30;\n\t\t\t\tvar lang = match[1] || prefs.get('lorem.defaultLang') || 'en';\n\t\t\t\t\n\t\t\t\t// force node name resolving if node should be repeated\n\t\t\t\t// or contains attributes. In this case, node should be outputed\n\t\t\t\t// as tag, otherwise as text-only node\n\t\t\t\tnode._name = '';\n\t\t\t\tnode.data('forceNameResolving', node.isRepeating() || node.attributeList().length);\n\t\t\t\tnode.data('pasteOverwrites', true);\n\t\t\t\tnode.data('paste', function(i, content) {\n\t\t\t\t\treturn paragraph(lang, wordCound, !i);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\t\n\t/**\n\t * Returns random integer between <code>from</code> and <code>to</code> values\n\t * @param {Number} from\n\t * @param {Number} to\n\t * @returns {Number}\n\t */\n\tfunction randint(from, to) {\n\t\treturn Math.round(Math.random() * (to - from) + from);\n\t}\n\t\n\t/**\n\t * @param {Array} arr\n\t * @param {Number} count\n\t * @returns {Array}\n\t */\n\tfunction sample(arr, count) {\n\t\tvar len = arr.length;\n\t\tvar iterations = Math.min(len, count);\n\t\tvar result = [];\n\t\twhile (result.length < iterations) {\n\t\t\tvar randIx = randint(0, len - 1);\n\t\t\tif (!_.include(result, randIx))\n\t\t\t\tresult.push(randIx);\n\t\t}\n\t\t\n\t\treturn _.map(result, function(ix) {\n\t\t\treturn arr[ix];\n\t\t});\n\t}\n\t\n\tfunction choice(val) {\n\t\tif (_.isString(val))\n\t\t\treturn val.charAt(randint(0, val.length - 1));\n\t\t\n\t\treturn val[randint(0, val.length - 1)];\n\t}\n\t\n\tfunction sentence(words, end) {\n\t\tif (words.length) {\n\t\t\twords[0] = words[0].charAt(0).toUpperCase() + words[0].substring(1);\n\t\t}\n\t\t\n\t\treturn words.join(' ') + (end || choice('?!...')); // more dots that question marks\n\t}\n\t\n\t/**\n\t * Insert commas at randomly selected words. This function modifies values\n\t * inside <code>words</code> array \n\t * @param {Array} words\n\t */\n\tfunction insertCommas(words) {\n\t\tvar len = words.length;\n\t\tvar totalCommas = 0;\n\t\t\n\t\tif (len > 3 && len <= 6) {\n\t\t\ttotalCommas = randint(0, 1);\n\t\t} else if (len > 6 && len <= 12) {\n\t\t\ttotalCommas = randint(0, 2);\n\t\t} else {\n\t\t\ttotalCommas = randint(1, 4);\n\t\t}\n\n\t\t_.each(_.range(totalCommas), function(ix) {\n\t\t\tif (ix < words.length - 1) {\n\t\t\t\twords[ix] += ',';\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Generate a paragraph of \"Lorem ipsum\" text\n\t * @param {Number} wordCount Words count in paragraph\n\t * @param {Boolean} startWithCommon Should paragraph start with common \n\t * \"lorem ipsum\" sentence.\n\t * @returns {String}\n\t */\n\tfunction paragraph(lang, wordCount, startWithCommon) {\n\t\tvar data = langs[lang];\n\t\tif (!data) {\n\t\t\treturn '';\n\t\t}\n\n\t\tvar result = [];\n\t\tvar totalWords = 0;\n\t\tvar words;\n\t\t\n\t\twordCount = parseInt(wordCount, 10);\n\t\t\n\t\tif (startWithCommon && data.common) {\n\t\t\twords = data.common.slice(0, wordCount);\n\t\t\tif (words.length > 5)\n\t\t\t\twords[4] += ',';\n\t\t\ttotalWords += words.length;\n\t\t\tresult.push(sentence(words, '.'));\n\t\t}\n\t\t\n\t\twhile (totalWords < wordCount) {\n\t\t\twords = sample(data.words, Math.min(randint(3, 12) * randint(1, 5), wordCount - totalWords));\n\t\t\ttotalWords += words.length;\n\t\t\tinsertCommas(words);\n\t\t\tresult.push(sentence(words));\n\t\t}\n\t\t\n\t\treturn result.join(' ');\n\t}\n\n\treturn {\n\t\t/**\n\t\t * Adds new language words for Lorem Ipsum generator\n\t\t * @param {String} lang Two-letter lang definition\n\t\t * @param {Object} data Words for language. Maight be either a space-separated \n\t\t * list of words (String), Array of words or object with <code>text</code> and\n\t\t * <code>common</code> properties\n\t\t */\n\t\taddLang: function(lang, data) {\n\t\t\tif (_.isString(data)) {\n\t\t\t\tdata = {words: _.compact(data.split(' '))};\n\t\t\t} else if (_.isArray(data)) {\n\t\t\t\tdata = {words: data};\n\t\t\t}\n\n\t\t\tlangs[lang] = data;\n\t\t}\n\t}\n});/**\n * A back-end bootstrap module with commonly used methods for loading user data\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('bootstrap', function(require, _) {\nvar snippets = {\n\t\"variables\": {\n\t\t\"lang\": \"en\",\n\t\t\"locale\": \"en-US\",\n\t\t\"charset\": \"UTF-8\",\n\t\t\"indentation\": \"\\t\",\n\t\t\"newline\": \"\\n\"\n\t},\n\t\n\t\"css\": {\n\t\t\"filters\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"@i\": \"@import url(|);\",\n\t\t\t\"@import\": \"@import url(|);\",\n\t\t\t\"@m\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@media\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@f\": \"@font-face {\\n\\tfont-family:|;\\n\\tsrc:url(|);\\n}\",\n\t\t\t\"@f+\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\n\t\t\t\"@kf\": \"@-webkit-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-o-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-moz-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\",\n\n\n\t\t\t\"anim\": \"animation:|;\",\n\t\t\t\"anim-\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode};\",\n\t\t\t\"animdel\": \"animation-delay:${1:time};\",\n\t\t\t\n\t\t\t\"animdir\": \"animation-direction:${1:normal};\",\n\t\t\t\"animdir:n\": \"animation-direction:normal;\",\n\t\t\t\"animdir:r\": \"animation-direction:reverse;\",\n\t\t\t\"animdir:a\": \"animation-direction:alternate;\",\n\t\t\t\"animdir:ar\": \"animation-direction:alternate-reverse;\",\n\t\t\t\n\t\t\t\"animdur\": \"animation-duration:${1:0}s;\",\n\t\t\t\n\t\t\t\"animfm\": \"animation-fill-mode:${1:both};\",\n\t\t\t\"animfm:f\": \"animation-fill-mode:forwards;\",\n\t\t\t\"animfm:b\": \"animation-fill-mode:backwards;\",\n\t\t\t\"animfm:bt\": \"animation-fill-mode:both;\",\n\t\t\t\"animfm:bh\": \"animation-fill-mode:both;\",\n\t\t\t\n\t\t\t\"animic\": \"animation-iteration-count:${1:1};\",\n\t\t\t\"animic:i\": \"animation-iteration-count:infinite;\",\n\t\t\t\n\t\t\t\"animn\": \"animation-name:${1:none};\",\n\n\t\t\t\"animps\": \"animation-play-state:${1:running};\",\n\t\t\t\"animps:p\": \"animation-play-state:paused;\",\n\t\t\t\"animps:r\": \"animation-play-state:running;\",\n\n\t\t\t\"animtf\": \"animation-timing-function:${1:linear};\",\n\t\t\t\"animtf:e\": \"animation-timing-function:ease;\",\n\t\t\t\"animtf:ei\": \"animation-timing-function:ease-in;\",\n\t\t\t\"animtf:eo\": \"animation-timing-function:ease-out;\",\n\t\t\t\"animtf:eio\": \"animation-timing-function:ease-in-out;\",\n\t\t\t\"animtf:l\": \"animation-timing-function:linear;\",\n\t\t\t\"animtf:cb\": \"animation-timing-function:cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1});\",\n\t\t\t\n\t\t\t\"ap\": \"appearance:${none};\",\n\n\t\t\t\"!\": \"!important\",\n\t\t\t\"pos\": \"position:${1:relative};\",\n\t\t\t\"pos:s\": \"position:static;\",\n\t\t\t\"pos:a\": \"position:absolute;\",\n\t\t\t\"pos:r\": \"position:relative;\",\n\t\t\t\"pos:f\": \"position:fixed;\",\n\t\t\t\"t\": \"top:|;\",\n\t\t\t\"t:a\": \"top:auto;\",\n\t\t\t\"r\": \"right:|;\",\n\t\t\t\"r:a\": \"right:auto;\",\n\t\t\t\"b\": \"bottom:|;\",\n\t\t\t\"b:a\": \"bottom:auto;\",\n\t\t\t\"l\": \"left:|;\",\n\t\t\t\"l:a\": \"left:auto;\",\n\t\t\t\"z\": \"z-index:|;\",\n\t\t\t\"z:a\": \"z-index:auto;\",\n\t\t\t\"fl\": \"float:${1:left};\",\n\t\t\t\"fl:n\": \"float:none;\",\n\t\t\t\"fl:l\": \"float:left;\",\n\t\t\t\"fl:r\": \"float:right;\",\n\t\t\t\"cl\": \"clear:${1:both};\",\n\t\t\t\"cl:n\": \"clear:none;\",\n\t\t\t\"cl:l\": \"clear:left;\",\n\t\t\t\"cl:r\": \"clear:right;\",\n\t\t\t\"cl:b\": \"clear:both;\",\n\n\t\t\t\"colm\": \"columns:|;\",\n\t\t\t\"colmc\": \"column-count:|;\",\n\t\t\t\"colmf\": \"column-fill:|;\",\n\t\t\t\"colmg\": \"column-gap:|;\",\n\t\t\t\"colmr\": \"column-rule:|;\",\n\t\t\t\"colmrc\": \"column-rule-color:|;\",\n\t\t\t\"colmrs\": \"column-rule-style:|;\",\n\t\t\t\"colmrw\": \"column-rule-width:|;\",\n\t\t\t\"colms\": \"column-span:|;\",\n\t\t\t\"colmw\": \"column-width:|;\",\n\n\t\t\t\"d\": \"display:${1:block};\",\n\t\t\t\"d:n\": \"display:none;\",\n\t\t\t\"d:b\": \"display:block;\",\n\t\t\t\"d:i\": \"display:inline;\",\n\t\t\t\"d:ib\": \"display:inline-block;\",\n\t\t\t\"d:ib+\": \"display: inline-block;\\n*display: inline;\\n*zoom: 1;\",\n\t\t\t\"d:li\": \"display:list-item;\",\n\t\t\t\"d:ri\": \"display:run-in;\",\n\t\t\t\"d:cp\": \"display:compact;\",\n\t\t\t\"d:tb\": \"display:table;\",\n\t\t\t\"d:itb\": \"display:inline-table;\",\n\t\t\t\"d:tbcp\": \"display:table-caption;\",\n\t\t\t\"d:tbcl\": \"display:table-column;\",\n\t\t\t\"d:tbclg\": \"display:table-column-group;\",\n\t\t\t\"d:tbhg\": \"display:table-header-group;\",\n\t\t\t\"d:tbfg\": \"display:table-footer-group;\",\n\t\t\t\"d:tbr\": \"display:table-row;\",\n\t\t\t\"d:tbrg\": \"display:table-row-group;\",\n\t\t\t\"d:tbc\": \"display:table-cell;\",\n\t\t\t\"d:rb\": \"display:ruby;\",\n\t\t\t\"d:rbb\": \"display:ruby-base;\",\n\t\t\t\"d:rbbg\": \"display:ruby-base-group;\",\n\t\t\t\"d:rbt\": \"display:ruby-text;\",\n\t\t\t\"d:rbtg\": \"display:ruby-text-group;\",\n\t\t\t\"v\": \"visibility:${1:hidden};\",\n\t\t\t\"v:v\": \"visibility:visible;\",\n\t\t\t\"v:h\": \"visibility:hidden;\",\n\t\t\t\"v:c\": \"visibility:collapse;\",\n\t\t\t\"ov\": \"overflow:${1:hidden};\",\n\t\t\t\"ov:v\": \"overflow:visible;\",\n\t\t\t\"ov:h\": \"overflow:hidden;\",\n\t\t\t\"ov:s\": \"overflow:scroll;\",\n\t\t\t\"ov:a\": \"overflow:auto;\",\n\t\t\t\"ovx\": \"overflow-x:${1:hidden};\",\n\t\t\t\"ovx:v\": \"overflow-x:visible;\",\n\t\t\t\"ovx:h\": \"overflow-x:hidden;\",\n\t\t\t\"ovx:s\": \"overflow-x:scroll;\",\n\t\t\t\"ovx:a\": \"overflow-x:auto;\",\n\t\t\t\"ovy\": \"overflow-y:${1:hidden};\",\n\t\t\t\"ovy:v\": \"overflow-y:visible;\",\n\t\t\t\"ovy:h\": \"overflow-y:hidden;\",\n\t\t\t\"ovy:s\": \"overflow-y:scroll;\",\n\t\t\t\"ovy:a\": \"overflow-y:auto;\",\n\t\t\t\"ovs\": \"overflow-style:${1:scrollbar};\",\n\t\t\t\"ovs:a\": \"overflow-style:auto;\",\n\t\t\t\"ovs:s\": \"overflow-style:scrollbar;\",\n\t\t\t\"ovs:p\": \"overflow-style:panner;\",\n\t\t\t\"ovs:m\": \"overflow-style:move;\",\n\t\t\t\"ovs:mq\": \"overflow-style:marquee;\",\n\t\t\t\"zoo\": \"zoom:1;\",\n\t\t\t\"zm\": \"zoom:1;\",\n\t\t\t\"cp\": \"clip:|;\",\n\t\t\t\"cp:a\": \"clip:auto;\",\n\t\t\t\"cp:r\": \"clip:rect(${1:top} ${2:right} ${3:bottom} ${4:left});\",\n\t\t\t\"bxz\": \"box-sizing:${1:border-box};\",\n\t\t\t\"bxz:cb\": \"box-sizing:content-box;\",\n\t\t\t\"bxz:bb\": \"box-sizing:border-box;\",\n\t\t\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:color};\",\n\t\t\t\"bxsh:r\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:spread }rgb(${6:0}, ${7:0}, ${8:0});\",\n\t\t\t\"bxsh:ra\": \"box-shadow:${1:inset }${2:h} ${3:v} ${4:blur} ${5:spread }rgba(${6:0}, ${7:0}, ${8:0}, .${9:5});\",\n\t\t\t\"bxsh:n\": \"box-shadow:none;\",\n\t\t\t\"m\": \"margin:|;\",\n\t\t\t\"m:a\": \"margin:auto;\",\n\t\t\t\"mt\": \"margin-top:|;\",\n\t\t\t\"mt:a\": \"margin-top:auto;\",\n\t\t\t\"mr\": \"margin-right:|;\",\n\t\t\t\"mr:a\": \"margin-right:auto;\",\n\t\t\t\"mb\": \"margin-bottom:|;\",\n\t\t\t\"mb:a\": \"margin-bottom:auto;\",\n\t\t\t\"ml\": \"margin-left:|;\",\n\t\t\t\"ml:a\": \"margin-left:auto;\",\n\t\t\t\"p\": \"padding:|;\",\n\t\t\t\"pt\": \"padding-top:|;\",\n\t\t\t\"pr\": \"padding-right:|;\",\n\t\t\t\"pb\": \"padding-bottom:|;\",\n\t\t\t\"pl\": \"padding-left:|;\",\n\t\t\t\"w\": \"width:|;\",\n\t\t\t\"w:a\": \"width:auto;\",\n\t\t\t\"h\": \"height:|;\",\n\t\t\t\"h:a\": \"height:auto;\",\n\t\t\t\"maw\": \"max-width:|;\",\n\t\t\t\"maw:n\": \"max-width:none;\",\n\t\t\t\"mah\": \"max-height:|;\",\n\t\t\t\"mah:n\": \"max-height:none;\",\n\t\t\t\"miw\": \"min-width:|;\",\n\t\t\t\"mih\": \"min-height:|;\",\n\t\t\t\"mar\": \"max-resolution:${1:res};\",\n\t\t\t\"mir\": \"min-resolution:${1:res};\",\n\t\t\t\"ori\": \"orientation:|;\",\n\t\t\t\"ori:l\": \"orientation:landscape;\",\n\t\t\t\"ori:p\": \"orientation:portrait;\",\n\t\t\t\"ol\": \"outline:|;\",\n\t\t\t\"ol:n\": \"outline:none;\",\n\t\t\t\"olo\": \"outline-offset:|;\",\n\t\t\t\"olw\": \"outline-width:|;\",\n\t\t\t\"olw:tn\": \"outline-width:thin;\",\n\t\t\t\"olw:m\": \"outline-width:medium;\",\n\t\t\t\"olw:tc\": \"outline-width:thick;\",\n\t\t\t\"ols\": \"outline-style:|;\",\n\t\t\t\"ols:n\": \"outline-style:none;\",\n\t\t\t\"ols:dt\": \"outline-style:dotted;\",\n\t\t\t\"ols:ds\": \"outline-style:dashed;\",\n\t\t\t\"ols:s\": \"outline-style:solid;\",\n\t\t\t\"ols:db\": \"outline-style:double;\",\n\t\t\t\"ols:g\": \"outline-style:groove;\",\n\t\t\t\"ols:r\": \"outline-style:ridge;\",\n\t\t\t\"ols:i\": \"outline-style:inset;\",\n\t\t\t\"ols:o\": \"outline-style:outset;\",\n\t\t\t\"olc\": \"outline-color:#${1:000};\",\n\t\t\t\"olc:i\": \"outline-color:invert;\",\n\t\t\t\"bd\": \"border:|;\",\n\t\t\t\"bd+\": \"border:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bd:n\": \"border:none;\",\n\t\t\t\"bdbk\": \"border-break:${1:close};\",\n\t\t\t\"bdbk:c\": \"border-break:close;\",\n\t\t\t\"bdcl\": \"border-collapse:|;\",\n\t\t\t\"bdcl:c\": \"border-collapse:collapse;\",\n\t\t\t\"bdcl:s\": \"border-collapse:separate;\",\n\t\t\t\"bdc\": \"border-color:#${1:000};\",\n\t\t\t\"bdc:t\": \"border-color:transparent;\",\n\t\t\t\"bdi\": \"border-image:url(|);\",\n\t\t\t\"bdi:n\": \"border-image:none;\",\n\t\t\t\"bdti\": \"border-top-image:url(|);\",\n\t\t\t\"bdti:n\": \"border-top-image:none;\",\n\t\t\t\"bdri\": \"border-right-image:url(|);\",\n\t\t\t\"bdri:n\": \"border-right-image:none;\",\n\t\t\t\"bdbi\": \"border-bottom-image:url(|);\",\n\t\t\t\"bdbi:n\": \"border-bottom-image:none;\",\n\t\t\t\"bdli\": \"border-left-image:url(|);\",\n\t\t\t\"bdli:n\": \"border-left-image:none;\",\n\t\t\t\"bdci\": \"border-corner-image:url(|);\",\n\t\t\t\"bdci:n\": \"border-corner-image:none;\",\n\t\t\t\"bdci:c\": \"border-corner-image:continue;\",\n\t\t\t\"bdtli\": \"border-top-left-image:url(|);\",\n\t\t\t\"bdtli:n\": \"border-top-left-image:none;\",\n\t\t\t\"bdtli:c\": \"border-top-left-image:continue;\",\n\t\t\t\"bdtri\": \"border-top-right-image:url(|);\",\n\t\t\t\"bdtri:n\": \"border-top-right-image:none;\",\n\t\t\t\"bdtri:c\": \"border-top-right-image:continue;\",\n\t\t\t\"bdbri\": \"border-bottom-right-image:url(|);\",\n\t\t\t\"bdbri:n\": \"border-bottom-right-image:none;\",\n\t\t\t\"bdbri:c\": \"border-bottom-right-image:continue;\",\n\t\t\t\"bdbli\": \"border-bottom-left-image:url(|);\",\n\t\t\t\"bdbli:n\": \"border-bottom-left-image:none;\",\n\t\t\t\"bdbli:c\": \"border-bottom-left-image:continue;\",\n\t\t\t\"bdf\": \"border-fit:${1:repeat};\",\n\t\t\t\"bdf:c\": \"border-fit:clip;\",\n\t\t\t\"bdf:r\": \"border-fit:repeat;\",\n\t\t\t\"bdf:sc\": \"border-fit:scale;\",\n\t\t\t\"bdf:st\": \"border-fit:stretch;\",\n\t\t\t\"bdf:ow\": \"border-fit:overwrite;\",\n\t\t\t\"bdf:of\": \"border-fit:overflow;\",\n\t\t\t\"bdf:sp\": \"border-fit:space;\",\n\t\t\t\"bdlen\": \"border-length:|;\",\n\t\t\t\"bdlen:a\": \"border-length:auto;\",\n\t\t\t\"bdsp\": \"border-spacing:|;\",\n\t\t\t\"bds\": \"border-style:|;\",\n\t\t\t\"bds:n\": \"border-style:none;\",\n\t\t\t\"bds:h\": \"border-style:hidden;\",\n\t\t\t\"bds:dt\": \"border-style:dotted;\",\n\t\t\t\"bds:ds\": \"border-style:dashed;\",\n\t\t\t\"bds:s\": \"border-style:solid;\",\n\t\t\t\"bds:db\": \"border-style:double;\",\n\t\t\t\"bds:dtds\": \"border-style:dot-dash;\",\n\t\t\t\"bds:dtdtds\": \"border-style:dot-dot-dash;\",\n\t\t\t\"bds:w\": \"border-style:wave;\",\n\t\t\t\"bds:g\": \"border-style:groove;\",\n\t\t\t\"bds:r\": \"border-style:ridge;\",\n\t\t\t\"bds:i\": \"border-style:inset;\",\n\t\t\t\"bds:o\": \"border-style:outset;\",\n\t\t\t\"bdw\": \"border-width:|;\",\n\t\t\t\"bdtw\": \"border-top-width:|;\",\n\t\t\t\"bdrw\": \"border-right-width:|;\",\n\t\t\t\"bdbw\": \"border-bottom-width:|;\",\n\t\t\t\"bdlw\": \"border-left-width:|;\",\n\t\t\t\"bdt\": \"border-top:|;\",\n\t\t\t\"bt\": \"border-top:|;\",\n\t\t\t\"bdt+\": \"border-top:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdt:n\": \"border-top:none;\",\n\t\t\t\"bdts\": \"border-top-style:|;\",\n\t\t\t\"bdts:n\": \"border-top-style:none;\",\n\t\t\t\"bdtc\": \"border-top-color:#${1:000};\",\n\t\t\t\"bdtc:t\": \"border-top-color:transparent;\",\n\t\t\t\"bdr\": \"border-right:|;\",\n\t\t\t\"br\": \"border-right:|;\",\n\t\t\t\"bdr+\": \"border-right:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdr:n\": \"border-right:none;\",\n\t\t\t\"bdrst\": \"border-right-style:|;\",\n\t\t\t\"bdrst:n\": \"border-right-style:none;\",\n\t\t\t\"bdrc\": \"border-right-color:#${1:000};\",\n\t\t\t\"bdrc:t\": \"border-right-color:transparent;\",\n\t\t\t\"bdb\": \"border-bottom:|;\",\n\t\t\t\"bb\": \"border-bottom:|;\",\n\t\t\t\"bdb+\": \"border-bottom:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdb:n\": \"border-bottom:none;\",\n\t\t\t\"bdbs\": \"border-bottom-style:|;\",\n\t\t\t\"bdbs:n\": \"border-bottom-style:none;\",\n\t\t\t\"bdbc\": \"border-bottom-color:#${1:000};\",\n\t\t\t\"bdbc:t\": \"border-bottom-color:transparent;\",\n\t\t\t\"bdl\": \"border-left:|;\",\n\t\t\t\"bl\": \"border-left:|;\",\n\t\t\t\"bdl+\": \"border-left:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdl:n\": \"border-left:none;\",\n\t\t\t\"bdls\": \"border-left-style:|;\",\n\t\t\t\"bdls:n\": \"border-left-style:none;\",\n\t\t\t\"bdlc\": \"border-left-color:#${1:000};\",\n\t\t\t\"bdlc:t\": \"border-left-color:transparent;\",\n\t\t\t\"bdrs\": \"border-radius:|;\",\n\t\t\t\"bdtrrs\": \"border-top-right-radius:|;\",\n\t\t\t\"bdtlrs\": \"border-top-left-radius:|;\",\n\t\t\t\"bdbrrs\": \"border-bottom-right-radius:|;\",\n\t\t\t\"bdblrs\": \"border-bottom-left-radius:|;\",\n\t\t\t\"bg\": \"background:#${1:000};\",\n\t\t\t\"bg+\": \"background:${1:#fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};\",\n\t\t\t\"bg:n\": \"background:none;\",\n\t\t\t\"bg:ie\": \"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1:x}.png',sizingMethod='${2:crop}');\",\n\t\t\t\"bgc\": \"background-color:#${1:fff};\",\n\t\t\t\"bgc:t\": \"background-color:transparent;\",\n\t\t\t\"bgi\": \"background-image:url(|);\",\n\t\t\t\"bgi:n\": \"background-image:none;\",\n\t\t\t\"bgr\": \"background-repeat:|;\",\n\t\t\t\"bgr:n\": \"background-repeat:no-repeat;\",\n\t\t\t\"bgr:x\": \"background-repeat:repeat-x;\",\n\t\t\t\"bgr:y\": \"background-repeat:repeat-y;\",\n\t\t\t\"bgr:sp\": \"background-repeat:space;\",\n\t\t\t\"bgr:rd\": \"background-repeat:round;\",\n\t\t\t\"bga\": \"background-attachment:|;\",\n\t\t\t\"bga:f\": \"background-attachment:fixed;\",\n\t\t\t\"bga:s\": \"background-attachment:scroll;\",\n\t\t\t\"bgp\": \"background-position:${1:0} ${2:0};\",\n\t\t\t\"bgpx\": \"background-position-x:|;\",\n\t\t\t\"bgpy\": \"background-position-y:|;\",\n\t\t\t\"bgbk\": \"background-break:|;\",\n\t\t\t\"bgbk:bb\": \"background-break:bounding-box;\",\n\t\t\t\"bgbk:eb\": \"background-break:each-box;\",\n\t\t\t\"bgbk:c\": \"background-break:continuous;\",\n\t\t\t\"bgcp\": \"background-clip:${1:padding-box};\",\n\t\t\t\"bgcp:bb\": \"background-clip:border-box;\",\n\t\t\t\"bgcp:pb\": \"background-clip:padding-box;\",\n\t\t\t\"bgcp:cb\": \"background-clip:content-box;\",\n\t\t\t\"bgcp:nc\": \"background-clip:no-clip;\",\n\t\t\t\"bgo\": \"background-origin:|;\",\n\t\t\t\"bgo:pb\": \"background-origin:padding-box;\",\n\t\t\t\"bgo:bb\": \"background-origin:border-box;\",\n\t\t\t\"bgo:cb\": \"background-origin:content-box;\",\n\t\t\t\"bgsz\": \"background-size:|;\",\n\t\t\t\"bgsz:a\": \"background-size:auto;\",\n\t\t\t\"bgsz:ct\": \"background-size:contain;\",\n\t\t\t\"bgsz:cv\": \"background-size:cover;\",\n\t\t\t\"c\": \"color:#${1:000};\",\n\t\t\t\"c:r\": \"color:rgb(${1:0}, ${2:0}, ${3:0});\",\n\t\t\t\"c:ra\": \"color:rgba(${1:0}, ${2:0}, ${3:0}, .${4:5});\",\n\t\t\t\"cm\": \"/* |${child} */\",\n\t\t\t\"cnt\": \"content:'|';\",\n\t\t\t\"cnt:n\": \"content:normal;\",\n\t\t\t\"cnt:oq\": \"content:open-quote;\",\n\t\t\t\"cnt:noq\": \"content:no-open-quote;\",\n\t\t\t\"cnt:cq\": \"content:close-quote;\",\n\t\t\t\"cnt:ncq\": \"content:no-close-quote;\",\n\t\t\t\"cnt:a\": \"content:attr(|);\",\n\t\t\t\"cnt:c\": \"content:counter(|);\",\n\t\t\t\"cnt:cs\": \"content:counters(|);\",\n\n\n\t\t\t\"tbl\": \"table-layout:|;\",\n\t\t\t\"tbl:a\": \"table-layout:auto;\",\n\t\t\t\"tbl:f\": \"table-layout:fixed;\",\n\t\t\t\"cps\": \"caption-side:|;\",\n\t\t\t\"cps:t\": \"caption-side:top;\",\n\t\t\t\"cps:b\": \"caption-side:bottom;\",\n\t\t\t\"ec\": \"empty-cells:|;\",\n\t\t\t\"ec:s\": \"empty-cells:show;\",\n\t\t\t\"ec:h\": \"empty-cells:hide;\",\n\t\t\t\"lis\": \"list-style:|;\",\n\t\t\t\"lis:n\": \"list-style:none;\",\n\t\t\t\"lisp\": \"list-style-position:|;\",\n\t\t\t\"lisp:i\": \"list-style-position:inside;\",\n\t\t\t\"lisp:o\": \"list-style-position:outside;\",\n\t\t\t\"list\": \"list-style-type:|;\",\n\t\t\t\"list:n\": \"list-style-type:none;\",\n\t\t\t\"list:d\": \"list-style-type:disc;\",\n\t\t\t\"list:c\": \"list-style-type:circle;\",\n\t\t\t\"list:s\": \"list-style-type:square;\",\n\t\t\t\"list:dc\": \"list-style-type:decimal;\",\n\t\t\t\"list:dclz\": \"list-style-type:decimal-leading-zero;\",\n\t\t\t\"list:lr\": \"list-style-type:lower-roman;\",\n\t\t\t\"list:ur\": \"list-style-type:upper-roman;\",\n\t\t\t\"lisi\": \"list-style-image:|;\",\n\t\t\t\"lisi:n\": \"list-style-image:none;\",\n\t\t\t\"q\": \"quotes:|;\",\n\t\t\t\"q:n\": \"quotes:none;\",\n\t\t\t\"q:ru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C';\",\n\t\t\t\"q:en\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019';\",\n\t\t\t\"ct\": \"content:|;\",\n\t\t\t\"ct:n\": \"content:normal;\",\n\t\t\t\"ct:oq\": \"content:open-quote;\",\n\t\t\t\"ct:noq\": \"content:no-open-quote;\",\n\t\t\t\"ct:cq\": \"content:close-quote;\",\n\t\t\t\"ct:ncq\": \"content:no-close-quote;\",\n\t\t\t\"ct:a\": \"content:attr(|);\",\n\t\t\t\"ct:c\": \"content:counter(|);\",\n\t\t\t\"ct:cs\": \"content:counters(|);\",\n\t\t\t\"coi\": \"counter-increment:|;\",\n\t\t\t\"cor\": \"counter-reset:|;\",\n\t\t\t\"va\": \"vertical-align:${1:top};\",\n\t\t\t\"va:sup\": \"vertical-align:super;\",\n\t\t\t\"va:t\": \"vertical-align:top;\",\n\t\t\t\"va:tt\": \"vertical-align:text-top;\",\n\t\t\t\"va:m\": \"vertical-align:middle;\",\n\t\t\t\"va:bl\": \"vertical-align:baseline;\",\n\t\t\t\"va:b\": \"vertical-align:bottom;\",\n\t\t\t\"va:tb\": \"vertical-align:text-bottom;\",\n\t\t\t\"va:sub\": \"vertical-align:sub;\",\n\t\t\t\"ta\": \"text-align:${1:left};\",\n\t\t\t\"ta:l\": \"text-align:left;\",\n\t\t\t\"ta:c\": \"text-align:center;\",\n\t\t\t\"ta:r\": \"text-align:right;\",\n\t\t\t\"ta:j\": \"text-align:justify;\",\n\t\t\t\"ta-lst\": \"text-align-last:|;\",\n\t\t\t\"tal:a\": \"text-align-last:auto;\",\n\t\t\t\"tal:l\": \"text-align-last:left;\",\n\t\t\t\"tal:c\": \"text-align-last:center;\",\n\t\t\t\"tal:r\": \"text-align-last:right;\",\n\t\t\t\"td\": \"text-decoration:${1:none};\",\n\t\t\t\"td:n\": \"text-decoration:none;\",\n\t\t\t\"td:u\": \"text-decoration:underline;\",\n\t\t\t\"td:o\": \"text-decoration:overline;\",\n\t\t\t\"td:l\": \"text-decoration:line-through;\",\n\t\t\t\"te\": \"text-emphasis:|;\",\n\t\t\t\"te:n\": \"text-emphasis:none;\",\n\t\t\t\"te:ac\": \"text-emphasis:accent;\",\n\t\t\t\"te:dt\": \"text-emphasis:dot;\",\n\t\t\t\"te:c\": \"text-emphasis:circle;\",\n\t\t\t\"te:ds\": \"text-emphasis:disc;\",\n\t\t\t\"te:b\": \"text-emphasis:before;\",\n\t\t\t\"te:a\": \"text-emphasis:after;\",\n\t\t\t\"th\": \"text-height:|;\",\n\t\t\t\"th:a\": \"text-height:auto;\",\n\t\t\t\"th:f\": \"text-height:font-size;\",\n\t\t\t\"th:t\": \"text-height:text-size;\",\n\t\t\t\"th:m\": \"text-height:max-size;\",\n\t\t\t\"ti\": \"text-indent:|;\",\n\t\t\t\"ti:-\": \"text-indent:-9999px;\",\n\t\t\t\"tj\": \"text-justify:|;\",\n\t\t\t\"tj:a\": \"text-justify:auto;\",\n\t\t\t\"tj:iw\": \"text-justify:inter-word;\",\n\t\t\t\"tj:ii\": \"text-justify:inter-ideograph;\",\n\t\t\t\"tj:ic\": \"text-justify:inter-cluster;\",\n\t\t\t\"tj:d\": \"text-justify:distribute;\",\n\t\t\t\"tj:k\": \"text-justify:kashida;\",\n\t\t\t\"tj:t\": \"text-justify:tibetan;\",\n\t\t\t\"tov\": \"text-overflow:${ellipsis};\",\n\t\t\t\"tov:e\": \"text-overflow:ellipsis;\",\n\t\t\t\"tov:c\": \"text-overflow:clip;\",\n\t\t\t\"to\": \"text-outline:|;\",\n\t\t\t\"to+\": \"text-outline:${1:0} ${2:0} ${3:#000};\",\n\t\t\t\"to:n\": \"text-outline:none;\",\n\t\t\t\"tr\": \"text-replace:|;\",\n\t\t\t\"tr:n\": \"text-replace:none;\",\n\t\t\t\"tt\": \"text-transform:${1:uppercase};\",\n\t\t\t\"tt:n\": \"text-transform:none;\",\n\t\t\t\"tt:c\": \"text-transform:capitalize;\",\n\t\t\t\"tt:u\": \"text-transform:uppercase;\",\n\t\t\t\"tt:l\": \"text-transform:lowercase;\",\n\t\t\t\"tw\": \"text-wrap:|;\",\n\t\t\t\"tw:n\": \"text-wrap:normal;\",\n\t\t\t\"tw:no\": \"text-wrap:none;\",\n\t\t\t\"tw:u\": \"text-wrap:unrestricted;\",\n\t\t\t\"tw:s\": \"text-wrap:suppress;\",\n\t\t\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000};\",\n\t\t\t\"tsh:r\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgb(${4:0}, ${5:0}, ${6:0});\",\n\t\t\t\"tsh:ra\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgba(${4:0}, ${5:0}, ${6:0}, .${7:5});\",\n\t\t\t\"tsh+\": \"text-shadow:${1:0} ${2:0} ${3:0} ${4:#000};\",\n\t\t\t\"tsh:n\": \"text-shadow:none;\",\n\t\t\t\"trf\": \"transform:|;\",\n\t\t\t\"trf:skx\": \"transform: skewX(${1:angle});\",\n\t\t\t\"trf:sky\": \"transform: skewY(${1:angle});\",\n\t\t\t\"trf:sc\": \"transform: scale(${1:x}, ${2:y});\",\n\t\t\t\"trf:scx\": \"transform: scaleX(${1:x});\",\n\t\t\t\"trf:scy\": \"transform: scaleY(${1:y});\",\n\t\t\t\"trf:r\": \"transform: rotate(${1:angle});\",\n\t\t\t\"trf:t\": \"transform: translate(${1:x}, ${2:y});\",\n\t\t\t\"trf:tx\": \"transform: translateX(${1:x});\",\n\t\t\t\"trf:ty\": \"transform: translateY(${1:y});\",\n\t\t\t\"trfo\": \"transform-origin:|;\",\n\t\t\t\"trfs\": \"transform-style:${1:preserve-3d};\",\n\t\t\t\"trs\": \"transition:${1:prop} ${2:time};\",\n\t\t\t\"trsde\": \"transition-delay:${1:time};\",\n\t\t\t\"trsdu\": \"transition-duration:${1:time};\",\n\t\t\t\"trsp\": \"transition-property:${1:prop};\",\n\t\t\t\"trstf\": \"transition-timing-function:${1:tfunc};\",\n\t\t\t\"lh\": \"line-height:|;\",\n\t\t\t\"whs\": \"white-space:|;\",\n\t\t\t\"whs:n\": \"white-space:normal;\",\n\t\t\t\"whs:p\": \"white-space:pre;\",\n\t\t\t\"whs:nw\": \"white-space:nowrap;\",\n\t\t\t\"whs:pw\": \"white-space:pre-wrap;\",\n\t\t\t\"whs:pl\": \"white-space:pre-line;\",\n\t\t\t\"whsc\": \"white-space-collapse:|;\",\n\t\t\t\"whsc:n\": \"white-space-collapse:normal;\",\n\t\t\t\"whsc:k\": \"white-space-collapse:keep-all;\",\n\t\t\t\"whsc:l\": \"white-space-collapse:loose;\",\n\t\t\t\"whsc:bs\": \"white-space-collapse:break-strict;\",\n\t\t\t\"whsc:ba\": \"white-space-collapse:break-all;\",\n\t\t\t\"wob\": \"word-break:|;\",\n\t\t\t\"wob:n\": \"word-break:normal;\",\n\t\t\t\"wob:k\": \"word-break:keep-all;\",\n\t\t\t\"wob:ba\": \"word-break:break-all;\",\n\t\t\t\"wos\": \"word-spacing:|;\",\n\t\t\t\"wow\": \"word-wrap:|;\",\n\t\t\t\"wow:nm\": \"word-wrap:normal;\",\n\t\t\t\"wow:n\": \"word-wrap:none;\",\n\t\t\t\"wow:u\": \"word-wrap:unrestricted;\",\n\t\t\t\"wow:s\": \"word-wrap:suppress;\",\n\t\t\t\"wow:b\": \"word-wrap:break-word;\",\n\t\t\t\"wm\": \"writing-mode:${1:lr-tb};\",\n\t\t\t\"wm:lrt\": \"writing-mode:lr-tb;\",\n\t\t\t\"wm:lrb\": \"writing-mode:lr-bt;\",\n\t\t\t\"wm:rlt\": \"writing-mode:rl-tb;\",\n\t\t\t\"wm:rlb\": \"writing-mode:rl-bt;\",\n\t\t\t\"wm:tbr\": \"writing-mode:tb-rl;\",\n\t\t\t\"wm:tbl\": \"writing-mode:tb-lr;\",\n\t\t\t\"wm:btl\": \"writing-mode:bt-lr;\",\n\t\t\t\"wm:btr\": \"writing-mode:bt-rl;\",\n\t\t\t\"lts\": \"letter-spacing:|;\",\n\t\t\t\"lts-n\": \"letter-spacing:normal;\",\n\t\t\t\"f\": \"font:|;\",\n\t\t\t\"f+\": \"font:${1:1em} ${2:Arial,sans-serif};\",\n\t\t\t\"fw\": \"font-weight:|;\",\n\t\t\t\"fw:n\": \"font-weight:normal;\",\n\t\t\t\"fw:b\": \"font-weight:bold;\",\n\t\t\t\"fw:br\": \"font-weight:bolder;\",\n\t\t\t\"fw:lr\": \"font-weight:lighter;\",\n\t\t\t\"fs\": \"font-style:${italic};\",\n\t\t\t\"fs:n\": \"font-style:normal;\",\n\t\t\t\"fs:i\": \"font-style:italic;\",\n\t\t\t\"fs:o\": \"font-style:oblique;\",\n\t\t\t\"fv\": \"font-variant:|;\",\n\t\t\t\"fv:n\": \"font-variant:normal;\",\n\t\t\t\"fv:sc\": \"font-variant:small-caps;\",\n\t\t\t\"fz\": \"font-size:|;\",\n\t\t\t\"fza\": \"font-size-adjust:|;\",\n\t\t\t\"fza:n\": \"font-size-adjust:none;\",\n\t\t\t\"ff\": \"font-family:|;\",\n\t\t\t\"ff:s\": \"font-family:serif;\",\n\t\t\t\"ff:ss\": \"font-family:sans-serif;\",\n\t\t\t\"ff:c\": \"font-family:cursive;\",\n\t\t\t\"ff:f\": \"font-family:fantasy;\",\n\t\t\t\"ff:m\": \"font-family:monospace;\",\n\t\t\t\"ff:a\": \"font-family: Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif;\",\n\t\t\t\"ff:t\": \"font-family: \\\"Times New Roman\\\", Times, Baskerville, Georgia, serif;\",\n\t\t\t\"ff:v\": \"font-family: Verdana, Geneva, sans-serif;\",\n\t\t\t\"fef\": \"font-effect:|;\",\n\t\t\t\"fef:n\": \"font-effect:none;\",\n\t\t\t\"fef:eg\": \"font-effect:engrave;\",\n\t\t\t\"fef:eb\": \"font-effect:emboss;\",\n\t\t\t\"fef:o\": \"font-effect:outline;\",\n\t\t\t\"fem\": \"font-emphasize:|;\",\n\t\t\t\"femp\": \"font-emphasize-position:|;\",\n\t\t\t\"femp:b\": \"font-emphasize-position:before;\",\n\t\t\t\"femp:a\": \"font-emphasize-position:after;\",\n\t\t\t\"fems\": \"font-emphasize-style:|;\",\n\t\t\t\"fems:n\": \"font-emphasize-style:none;\",\n\t\t\t\"fems:ac\": \"font-emphasize-style:accent;\",\n\t\t\t\"fems:dt\": \"font-emphasize-style:dot;\",\n\t\t\t\"fems:c\": \"font-emphasize-style:circle;\",\n\t\t\t\"fems:ds\": \"font-emphasize-style:disc;\",\n\t\t\t\"fsm\": \"font-smooth:|;\",\n\t\t\t\"fsm:a\": \"font-smooth:auto;\",\n\t\t\t\"fsm:n\": \"font-smooth:never;\",\n\t\t\t\"fsm:aw\": \"font-smooth:always;\",\n\t\t\t\"fst\": \"font-stretch:|;\",\n\t\t\t\"fst:n\": \"font-stretch:normal;\",\n\t\t\t\"fst:uc\": \"font-stretch:ultra-condensed;\",\n\t\t\t\"fst:ec\": \"font-stretch:extra-condensed;\",\n\t\t\t\"fst:c\": \"font-stretch:condensed;\",\n\t\t\t\"fst:sc\": \"font-stretch:semi-condensed;\",\n\t\t\t\"fst:se\": \"font-stretch:semi-expanded;\",\n\t\t\t\"fst:e\": \"font-stretch:expanded;\",\n\t\t\t\"fst:ee\": \"font-stretch:extra-expanded;\",\n\t\t\t\"fst:ue\": \"font-stretch:ultra-expanded;\",\n\t\t\t\"op\": \"opacity:|;\",\n\t\t\t\"op+\": \"opacity: $1;\\nfilter: alpha(opacity=$2);\",\n\t\t\t\"op:ie\": \"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);\",\n\t\t\t\"op:ms\": \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';\",\n\t\t\t\"rsz\": \"resize:|;\",\n\t\t\t\"rsz:n\": \"resize:none;\",\n\t\t\t\"rsz:b\": \"resize:both;\",\n\t\t\t\"rsz:h\": \"resize:horizontal;\",\n\t\t\t\"rsz:v\": \"resize:vertical;\",\n\t\t\t\"cur\": \"cursor:${pointer};\",\n\t\t\t\"cur:a\": \"cursor:auto;\",\n\t\t\t\"cur:d\": \"cursor:default;\",\n\t\t\t\"cur:c\": \"cursor:crosshair;\",\n\t\t\t\"cur:ha\": \"cursor:hand;\",\n\t\t\t\"cur:he\": \"cursor:help;\",\n\t\t\t\"cur:m\": \"cursor:move;\",\n\t\t\t\"cur:p\": \"cursor:pointer;\",\n\t\t\t\"cur:t\": \"cursor:text;\",\n\t\t\t\"pgbb\": \"page-break-before:|;\",\n\t\t\t\"pgbb:au\": \"page-break-before:auto;\",\n\t\t\t\"pgbb:al\": \"page-break-before:always;\",\n\t\t\t\"pgbb:l\": \"page-break-before:left;\",\n\t\t\t\"pgbb:r\": \"page-break-before:right;\",\n\t\t\t\"pgbi\": \"page-break-inside:|;\",\n\t\t\t\"pgbi:au\": \"page-break-inside:auto;\",\n\t\t\t\"pgbi:av\": \"page-break-inside:avoid;\",\n\t\t\t\"pgba\": \"page-break-after:|;\",\n\t\t\t\"pgba:au\": \"page-break-after:auto;\",\n\t\t\t\"pgba:al\": \"page-break-after:always;\",\n\t\t\t\"pgba:l\": \"page-break-after:left;\",\n\t\t\t\"pgba:r\": \"page-break-after:right;\",\n\t\t\t\"orp\": \"orphans:|;\",\n\t\t\t\"us\": \"user-select:${none};\",\n\t\t\t\"wid\": \"widows:|;\",\n\t\t\t\"wfsm\": \"-webkit-font-smoothing:${antialiased};\",\n\t\t\t\"wfsm:a\": \"-webkit-font-smoothing:antialiased;\",\n\t\t\t\"wfsm:s\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:sa\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:n\": \"-webkit-font-smoothing:none;\"\n\t\t}\n\t},\n\t\n\t\"html\": {\n\t\t\"filters\": \"html\",\n\t\t\"profile\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"!!!\":    \"<!doctype html>\",\n\t\t\t\"!!!4t\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\",\n\t\t\t\"!!!4s\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\",\n\t\t\t\"!!!xt\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\",\n\t\t\t\"!!!xs\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\",\n\t\t\t\"!!!xxs\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\",\n\n\t\t\t\"c\": \"<!-- |${child} -->\",\n\t\t\t\"cc:ie6\": \"<!--[if lte IE 6]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:ie\": \"<!--[if IE]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:noie\": \"<!--[if !IE]><!-->\\n\\t${child}|\\n<!--<![endif]-->\"\n\t\t},\n\t\t\n\t\t\"abbreviations\": {\n\t\t\t\"!\": \"html:5\",\n\t\t\t\"a\": \"<a href=\\\"\\\">\",\n\t\t\t\"a:link\": \"<a href=\\\"http://|\\\">\",\n\t\t\t\"a:mail\": \"<a href=\\\"mailto:|\\\">\",\n\t\t\t\"abbr\": \"<abbr title=\\\"\\\">\",\n\t\t\t\"acronym\": \"<acronym title=\\\"\\\">\",\n\t\t\t\"base\": \"<base href=\\\"\\\" />\",\n\t\t\t\"basefont\": \"<basefont/>\",\n\t\t\t\"br\": \"<br/>\",\n\t\t\t\"frame\": \"<frame/>\",\n\t\t\t\"hr\": \"<hr/>\",\n\t\t\t\"bdo\": \"<bdo dir=\\\"\\\">\",\n\t\t\t\"bdo:r\": \"<bdo dir=\\\"rtl\\\">\",\n\t\t\t\"bdo:l\": \"<bdo dir=\\\"ltr\\\">\",\n\t\t\t\"col\": \"<col/>\",\n\t\t\t\"link\": \"<link rel=\\\"stylesheet\\\" href=\\\"\\\" />\",\n\t\t\t\"link:css\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:style}.css\\\" />\",\n\t\t\t\"link:print\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:print}.css\\\" media=\\\"print\\\" />\",\n\t\t\t\"link:favicon\": \"<link rel=\\\"shortcut icon\\\" type=\\\"image/x-icon\\\" href=\\\"${1:favicon.ico}\\\" />\",\n\t\t\t\"link:touch\": \"<link rel=\\\"apple-touch-icon\\\" href=\\\"${1:favicon.png}\\\" />\",\n\t\t\t\"link:rss\": \"<link rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"RSS\\\" href=\\\"${1:rss.xml}\\\" />\",\n\t\t\t\"link:atom\": \"<link rel=\\\"alternate\\\" type=\\\"application/atom+xml\\\" title=\\\"Atom\\\" href=\\\"${1:atom.xml}\\\" />\",\n\t\t\t\"meta\": \"<meta/>\",\n\t\t\t\"meta:utf\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=UTF-8\\\" />\",\n\t\t\t\"meta:win\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=windows-1251\\\" />\",\n\t\t\t\"meta:vp\": \"<meta name=\\\"viewport\\\" content=\\\"width=${1:device-width}, user-scalable=${2:no}, initial-scale=${3:1.0}, maximum-scale=${4:1.0}, minimum-scale=${5:1.0}\\\" />\",\n\t\t\t\"meta:compat\": \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"${1:IE=7}\\\" />\",\n\t\t\t\"style\": \"<style>\",\n\t\t\t\"script\": \"<script>\",\n\t\t\t\"script:src\": \"<script src=\\\"\\\">\",\n\t\t\t\"img\": \"<img src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"iframe\": \"<iframe src=\\\"\\\" frameborder=\\\"0\\\">\",\n\t\t\t\"embed\": \"<embed src=\\\"\\\" type=\\\"\\\" />\",\n\t\t\t\"object\": \"<object data=\\\"\\\" type=\\\"\\\">\",\n\t\t\t\"param\": \"<param name=\\\"\\\" value=\\\"\\\" />\",\n\t\t\t\"map\": \"<map name=\\\"\\\">\",\n\t\t\t\"area\": \"<area shape=\\\"\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:d\": \"<area shape=\\\"default\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:c\": \"<area shape=\\\"circle\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:r\": \"<area shape=\\\"rect\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:p\": \"<area shape=\\\"poly\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"form\": \"<form action=\\\"\\\">\",\n\t\t\t\"form:get\": \"<form action=\\\"\\\" method=\\\"get\\\">\",\n\t\t\t\"form:post\": \"<form action=\\\"\\\" method=\\\"post\\\">\",\n\t\t\t\"label\": \"<label for=\\\"\\\">\",\n\t\t\t\"input\": \"<input type=\\\"${1:text}\\\" />\",\n\t\t\t\"inp\": \"<input type=\\\"${1:text}\\\" name=\\\"\\\" id=\\\"\\\" />\",\n\t\t\t\"input:hidden\": \"input[type=hidden name]\",\n\t\t\t\"input:h\": \"input:hidden\",\n\t\t\t\"input:text\": \"inp\",\n\t\t\t\"input:t\": \"inp\",\n\t\t\t\"input:search\": \"inp[type=search]\",\n\t\t\t\"input:email\": \"inp[type=email]\",\n\t\t\t\"input:url\": \"inp[type=url]\",\n\t\t\t\"input:password\": \"inp[type=password]\",\n\t\t\t\"input:p\": \"input:password\",\n\t\t\t\"input:datetime\": \"inp[type=datetime]\",\n\t\t\t\"input:date\": \"inp[type=date]\",\n\t\t\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\t\t\"input:month\": \"inp[type=month]\",\n\t\t\t\"input:week\": \"inp[type=week]\",\n\t\t\t\"input:time\": \"inp[type=time]\",\n\t\t\t\"input:number\": \"inp[type=number]\",\n\t\t\t\"input:color\": \"inp[type=color]\",\n\t\t\t\"input:checkbox\": \"inp[type=checkbox]\",\n\t\t\t\"input:c\": \"input:checkbox\",\n\t\t\t\"input:radio\": \"inp[type=radio]\",\n\t\t\t\"input:r\": \"input:radio\",\n\t\t\t\"input:range\": \"inp[type=range]\",\n\t\t\t\"input:file\": \"inp[type=file]\",\n\t\t\t\"input:f\": \"input:file\",\n\t\t\t\"input:submit\": \"<input type=\\\"submit\\\" value=\\\"\\\" />\",\n\t\t\t\"input:s\": \"input:submit\",\n\t\t\t\"input:image\": \"<input type=\\\"image\\\" src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"input:i\": \"input:image\",\n\t\t\t\"input:button\": \"<input type=\\\"button\\\" value=\\\"\\\" />\",\n\t\t\t\"input:b\": \"input:button\",\n\t\t\t\"isindex\": \"<isindex/>\",\n\t\t\t\"input:reset\": \"input:button[type=reset]\",\n\t\t\t\"select\": \"<select name=\\\"\\\" id=\\\"\\\">\",\n\t\t\t\"select:disabled\": \"select[disabled]\",\n\t\t\t\"select:d\": \"select[disabled]\",\n\t\t\t\"option\": \"<option value=\\\"\\\">\",\n\t\t\t\"textarea\": \"<textarea name=\\\"\\\" id=\\\"\\\" cols=\\\"${1:30}\\\" rows=\\\"${2:10}\\\">\",\n\t\t\t\"marquee\": \"<marquee behavior=\\\"\\\" direction=\\\"\\\">\",\n\t\t\t\"menu:context\": \"menu[type=context]>\",\n\t\t\t\"menu:c\": \"menu:context\",\n\t\t\t\"menu:toolbar\": \"menu[type=toolbar]>\",\n\t\t\t\"menu:t\": \"menu:toolbar\",\n\t\t\t\"video\": \"<video src=\\\"\\\">\",\n\t\t\t\"audio\": \"<audio src=\\\"\\\">\",\n\t\t\t\"html:xml\": \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\",\n\t\t\t\"keygen\": \"<keygen/>\",\n\t\t\t\"command\": \"<command/>\",\n\t\t\t\"button:submit\" : \"button[type=submit]\",\n\t\t\t\"button:s\" : \"button[type=submit]\",\n\t\t\t\"button:reset\" : \"button[type=reset]\",\n\t\t\t\"button:r\" : \"button[type=reset]\",\n\t\t\t\"button:disabled\" : \"button[disabled]\",\n\t\t\t\"button:d\" : \"button[disabled]\",\n\t\t\t\"fieldset:disabled\" : \"fieldset[disabled]\",\n\t\t\t\"fieldset:d\" : \"fieldset[disabled]\",\n\t\t\t\n\t\t\t\"bq\": \"blockquote\",\n\t\t\t\"acr\": \"acronym\",\n\t\t\t\"fig\": \"figure\",\n\t\t\t\"figc\": \"figcaption\",\n\t\t\t\"ifr\": \"iframe\",\n\t\t\t\"emb\": \"embed\",\n\t\t\t\"obj\": \"object\",\n\t\t\t\"src\": \"source\",\n\t\t\t\"cap\": \"caption\",\n\t\t\t\"colg\": \"colgroup\",\n\t\t\t\"fst\": \"fieldset\",\n\t\t\t\"fst:d\": \"fieldset[disabled]\",\n\t\t\t\"btn\": \"button\",\n\t\t\t\"btn:b\": \"button[type=button]\",\n\t\t\t\"btn:r\": \"button[type=reset]\",\n\t\t\t\"btn:s\": \"button[type=submit]\",\n\t\t\t\"btn:d\": \"button[disabled]\",\n\t\t\t\"optg\": \"optgroup\",\n\t\t\t\"opt\": \"option\",\n\t\t\t\"tarea\": \"textarea\",\n\t\t\t\"leg\": \"legend\",\n\t\t\t\"sect\": \"section\",\n\t\t\t\"art\": \"article\",\n\t\t\t\"hdr\": \"header\",\n\t\t\t\"ftr\": \"footer\",\n\t\t\t\"adr\": \"address\",\n\t\t\t\"dlg\": \"dialog\",\n\t\t\t\"str\": \"strong\",\n\t\t\t\"prog\": \"progress\",\n\t\t\t\"fset\": \"fieldset\",\n\t\t\t\"fset:d\": \"fieldset[disabled]\",\n\t\t\t\"datag\": \"datagrid\",\n\t\t\t\"datal\": \"datalist\",\n\t\t\t\"kg\": \"keygen\",\n\t\t\t\"out\": \"output\",\n\t\t\t\"det\": \"details\",\n\t\t\t\"cmd\": \"command\",\n\t\t\t\"doc\": \"html>(head>meta[charset=UTF-8]+title{${1:Document}})+body\",\n\t\t\t\"doc4\": \"html>(head>meta[http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=${charset}\\\"]+title{${1:Document}})+body\",\n\n\t\t\t\"html:4t\":  \"!!!4t+doc4[lang=${lang}]\",\n\t\t\t\"html:4s\":  \"!!!4s+doc4[lang=${lang}]\",\n\t\t\t\"html:xt\":  \"!!!xt+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xs\":  \"!!!xs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xxs\": \"!!!xxs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:5\":   \"!!!+doc[lang=${lang}]\",\n\t\t\t\n\t\t\t\"ol+\": \"ol>li\",\n\t\t\t\"ul+\": \"ul>li\",\n\t\t\t\"dl+\": \"dl>dt+dd\",\n\t\t\t\"map+\": \"map>area\",\n\t\t\t\"table+\": \"table>tr>td\",\n\t\t\t\"colgroup+\": \"colgroup>col\",\n\t\t\t\"colg+\": \"colgroup>col\",\n\t\t\t\"tr+\": \"tr>td\",\n\t\t\t\"select+\": \"select>option\",\n\t\t\t\"optgroup+\": \"optgroup>option\",\n\t\t\t\"optg+\": \"optgroup>option\"\n\t\t}\n\t},\n\t\n\t\"xml\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html\"\n\t},\n\t\n\t\"xsl\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html, xsl\",\n\t\t\"abbreviations\": {\n\t\t\t\"tm\": \"<xsl:template match=\\\"\\\" mode=\\\"\\\">\",\n\t\t\t\"tmatch\": \"tm\",\n\t\t\t\"tn\": \"<xsl:template name=\\\"\\\">\",\n\t\t\t\"tname\": \"tn\",\n\t\t\t\"call\": \"<xsl:call-template name=\\\"\\\"/>\",\n\t\t\t\"ap\": \"<xsl:apply-templates select=\\\"\\\" mode=\\\"\\\"/>\",\n\t\t\t\"api\": \"<xsl:apply-imports/>\",\n\t\t\t\"imp\": \"<xsl:import href=\\\"\\\"/>\",\n\t\t\t\"inc\": \"<xsl:include href=\\\"\\\"/>\",\n\n\t\t\t\"ch\": \"<xsl:choose>\",\n\t\t\t\"xsl:when\": \"<xsl:when test=\\\"\\\">\",\n\t\t\t\"wh\": \"xsl:when\",\n\t\t\t\"ot\": \"<xsl:otherwise>\",\n\t\t\t\"if\": \"<xsl:if test=\\\"\\\">\",\n\n\t\t\t\"par\": \"<xsl:param name=\\\"\\\">\",\n\t\t\t\"pare\": \"<xsl:param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"var\": \"<xsl:variable name=\\\"\\\">\",\n\t\t\t\"vare\": \"<xsl:variable name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"wp\": \"<xsl:with-param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"key\": \"<xsl:key name=\\\"\\\" match=\\\"\\\" use=\\\"\\\"/>\",\n\n\t\t\t\"elem\": \"<xsl:element name=\\\"\\\">\",\n\t\t\t\"attr\": \"<xsl:attribute name=\\\"\\\">\",\n\t\t\t\"attrs\": \"<xsl:attribute-set name=\\\"\\\">\",\n\n\t\t\t\"cp\": \"<xsl:copy select=\\\"\\\"/>\",\n\t\t\t\"co\": \"<xsl:copy-of select=\\\"\\\"/>\",\n\t\t\t\"val\": \"<xsl:value-of select=\\\"\\\"/>\",\n\t\t\t\"each\": \"<xsl:for-each select=\\\"\\\">\",\n\t\t\t\"for\": \"each\",\n\t\t\t\"tex\": \"<xsl:text></xsl:text>\",\n\n\t\t\t\"com\": \"<xsl:comment>\",\n\t\t\t\"msg\": \"<xsl:message terminate=\\\"no\\\">\",\n\t\t\t\"fall\": \"<xsl:fallback>\",\n\t\t\t\"num\": \"<xsl:number value=\\\"\\\"/>\",\n\t\t\t\"nam\": \"<namespace-alias stylesheet-prefix=\\\"\\\" result-prefix=\\\"\\\"/>\",\n\t\t\t\"pres\": \"<xsl:preserve-space elements=\\\"\\\"/>\",\n\t\t\t\"strip\": \"<xsl:strip-space elements=\\\"\\\"/>\",\n\t\t\t\"proc\": \"<xsl:processing-instruction name=\\\"\\\">\",\n\t\t\t\"sort\": \"<xsl:sort select=\\\"\\\" order=\\\"\\\"/>\",\n\n\t\t\t\"choose+\": \"xsl:choose>xsl:when+xsl:otherwise\",\n\t\t\t\"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\"\n\t\t}, \n\t\t\"snippets\": {\n\t\t\t\"!!!\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n\t\t}\n\t},\n\t\n\t\"haml\": {\n\t\t\"filters\": \"haml\",\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\"\n\t},\n\t\n\t\"scss\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"sass\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"less\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"stylus\": {\n\t\t\"extends\": \"css\"\n\t},\n\n\t\"styl\": {\n\t\t\"extends\": \"stylus\"\n\t}\n}\n;\nvar res = require('resources');\nvar userData = res.getVocabulary('user') || {};\nres.setVocabulary(require('utils').deepMerge(userData, snippets), 'user');\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/28.1039ff1ec8f39b3a1cff.js","//     Underscore.js 1.3.3\n//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\nvar _ = (function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root['_'] = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.3.3';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (_.has(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    if (obj.length === +obj.length) results.length = obj.length;\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError('Reduce of empty array with no initial value');\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = _.toArray(obj).reverse();\n    if (context && !initial) iterator = _.bind(iterator, context);\n    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    found = any(obj, function(value) {\n      return value === target;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array.\n  _.shuffle = function(obj) {\n    var shuffled = [], rand;\n    each(obj, function(value, index, list) {\n      rand = Math.floor(Math.random() * (index + 1));\n      shuffled[index] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, val, context) {\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      if (a === void 0) return 1;\n      if (b === void 0) return -1;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = function(obj, val) {\n    var result = {};\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    each(obj, function(value, index) {\n      var key = iterator(value, index);\n      (result[key] || (result[key] = [])).push(value);\n    });\n    return result;\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(obj) {\n    if (!obj)                                     return [];\n    if (_.isArray(obj))                           return slice.call(obj);\n    if (_.isArguments(obj))                       return slice.call(obj);\n    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the last entry of the array. Especcialy useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if ((n != null) && !guard) {\n      return slice.call(array, Math.max(array.length - n, 0));\n    } else {\n      return array[array.length - 1];\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array, shallow) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator) {\n    var initial = iterator ? _.map(array, iterator) : array;\n    var results = [];\n    // The `isSorted` flag is irrelevant if the array only contains two elements.\n    if (array.length < 3) isSorted = true;\n    _.reduce(initial, function (memo, value, index) {\n      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {\n        memo.push(value);\n        results.push(array[index]);\n      }\n      return memo;\n    }, []);\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\n  _.intersection = _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = _.flatten(slice.call(arguments, 1), true);\n    return _.filter(array, function(value){ return !_.include(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n  _.bind = function bind(func, context) {\n    var bound, args;\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    var context, args, timeout, throttling, more, result;\n    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);\n    return function() {\n      context = this; args = arguments;\n      var later = function() {\n        timeout = null;\n        if (more) func.apply(context, args);\n        whenDone();\n      };\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (throttling) {\n        more = true;\n      } else {\n        result = func.apply(context, args);\n      }\n      whenDone();\n      throttling = true;\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      if (immediate && !timeout) func.apply(context, args);\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments, 0));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    if (times <= 0) return func();\n    return function() {\n      if (--times < 1) { return func.apply(this, arguments); }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var result = {};\n    each(_.flatten(slice.call(arguments, 1)), function(key) {\n      if (key in obj) result[key] = obj[key];\n    });\n    return result;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function.\n  function eq(a, b, stack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // Invoke a custom `isEqual` method if one is provided.\n    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);\n    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = stack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (stack[length] == a) return true;\n    }\n    // Add the first object to the stack of traversed objects.\n    stack.push(a);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          // Ensure commutative equality for sparse arrays.\n          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;\n        }\n      }\n    } else {\n      // Objects with different constructors are not equivalent.\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    stack.pop();\n    return result;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return toString.call(obj) == '[object Arguments]';\n  };\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return toString.call(obj) == '[object Function]';\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return toString.call(obj) == '[object String]';\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return toString.call(obj) == '[object Number]';\n  };\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return _.isNumber(obj) && isFinite(obj);\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    // `NaN` is the only value for which `===` is not reflexive.\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Has own property?\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Escape a string for HTML interpolation.\n  _.escape = function(string) {\n    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g,'&#x2F;');\n  };\n\n  // If the value of the named property is a function then invoke it;\n  // otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return null;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /.^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    'r': '\\r',\n    'n': '\\n',\n    't': '\\t',\n    'u2028': '\\u2028',\n    'u2029': '\\u2029'\n  };\n\n  for (var p in escapes) escapes[escapes[p]] = p;\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n  var unescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\n\n  // Within an interpolation, evaluation, or escaping, remove HTML escaping\n  // that had been previously added.\n  var unescape = function(code) {\n    return code.replace(unescaper, function(match, escape) {\n      return escapes[escape];\n    });\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    settings = _.defaults(settings || {}, _.templateSettings);\n\n    // Compile the template source, taking care to escape characters that\n    // cannot be included in a string literal and then unescape them in code\n    // blocks.\n    var source = \"__p+='\" + text\n      .replace(escaper, function(match) {\n        return '\\\\' + escapes[match];\n      })\n      .replace(settings.escape || noMatch, function(match, code) {\n        return \"'+\\n_.escape(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.interpolate || noMatch, function(match, code) {\n        return \"'+\\n(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.evaluate || noMatch, function(match, code) {\n        return \"';\\n\" + unescape(code) + \"\\n;__p+='\";\n      }) + \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __p='';\" +\n      \"var print=function(){__p+=Array.prototype.join.call(arguments, '')};\\n\" +\n      source + \"return __p;\\n\";\n\n    var render = new Function(settings.variable || 'obj', '_', source);\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for build time\n    // precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' +\n      source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      var wrapped = this._wrapped;\n      method.apply(wrapped, arguments);\n      var length = wrapped.length;\n      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];\n      return result(wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n  return _;\n}).call({});\n/**\n * Core Emmet object, available in global scope\n */\nvar emmet = (function(global) {\n\tvar defaultSyntax = 'html';\n\tvar defaultProfile = 'plain';\n\t\n\tif (typeof _ == 'undefined') {\n\t\ttry {\n\t\t\t// avoid collisions with RequireJS loader\n\t\t\t// also, JS obfuscators tends to translate\n\t\t\t// a[\"name\"] to a.name, which also breaks RequireJS\n\t\t\t_ = global[['require'][0]]('underscore'); // node.js\n\t\t} catch (e) {}\n\t}\n\n\tif (typeof _ == 'undefined') {\n\t\tthrow 'Cannot access to Underscore.js lib';\n\t}\n\n\t/** List of registered modules */\n\tvar modules = {\n\t\t_ : _\n\t};\n\t\n\t/**\n\t * Shared empty constructor function to aid in prototype-chain creation.\n\t */\n\tvar ctor = function(){};\n\t\n\t/**\n\t * Helper function to correctly set up the prototype chain, for subclasses.\n\t * Similar to `goog.inherits`, but uses a hash of prototype properties and\n\t * class properties to be extended.\n\t * Took it from Backbone.\n\t * @param {Object} parent\n\t * @param {Object} protoProps\n\t * @param {Object} staticProps\n\t * @returns {Object}\n\t */\n\tfunction inherits(parent, protoProps, staticProps) {\n\t\tvar child;\n\n\t\t// The constructor function for the new subclass is either defined by\n\t\t// you (the \"constructor\" property in your `extend` definition), or\n\t\t// defaulted by us to simply call the parent's constructor.\n\t\tif (protoProps && protoProps.hasOwnProperty('constructor')) {\n\t\t\tchild = protoProps.constructor;\n\t\t} else {\n\t\t\tchild = function() {\n\t\t\t\tparent.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\t// Inherit class (static) properties from parent.\n\t\t_.extend(child, parent);\n\n\t\t// Set the prototype chain to inherit from `parent`, without calling\n\t\t// `parent`'s constructor function.\n\t\tctor.prototype = parent.prototype;\n\t\tchild.prototype = new ctor();\n\n\t\t// Add prototype properties (instance properties) to the subclass,\n\t\t// if supplied.\n\t\tif (protoProps)\n\t\t\t_.extend(child.prototype, protoProps);\n\n\t\t// Add static properties to the constructor function, if supplied.\n\t\tif (staticProps)\n\t\t\t_.extend(child, staticProps);\n\n\t\t// Correctly set child's `prototype.constructor`.\n\t\tchild.prototype.constructor = child;\n\n\t\t// Set a convenience property in case the parent's prototype is needed\n\t\t// later.\n\t\tchild.__super__ = parent.prototype;\n\n\t\treturn child;\n\t};\n\t\n\t/**\n\t * @type Function Function that loads module definition if it's not defined\n\t */\n\tvar moduleLoader = null;\n\t\n\t/**\n\t * Generic Emmet module loader (actually, it doesn’t load anything, just \n\t * returns module reference). Not using `require` name to avoid conflicts\n\t * with Node.js and RequireJS\n\t */\n\tfunction r(name) {\n\t\tif (!(name in modules) && moduleLoader)\n\t\t\tmoduleLoader(name);\n\t\t\n\t\treturn modules[name];\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Simple, AMD-like module definition. The module will be added into\n\t\t * <code>emmet</code> object and will be available via\n\t\t * <code>emmet.require(name)</code> or <code>emmet[name]</code>\n\t\t * @param {String} name\n\t\t * @param {Function} factory\n\t\t * @memberOf emmet\n\t\t */\n\t\tdefine: function(name, factory) {\n\t\t\t// do not let redefine existing properties\n\t\t\tif (!(name in modules)) {\n\t\t\t\tmodules[name] = _.isFunction(factory) \n\t\t\t\t\t? this.exec(factory)\n\t\t\t\t\t: factory;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to Emmet module\n\t\t * @param {String} name Module name\n\t\t */\n\t\trequire: r,\n\t\t\n\t\t/**\n\t\t * Helper method that just executes passed function but with all \n\t\t * important arguments like 'require' and '_'\n\t\t * @param {Function} fn\n\t\t * @param {Object} context Execution context\n\t\t */\n\t\texec: function(fn, context) {\n\t\t\treturn fn.call(context || global, _.bind(r, this), _, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * The self-propagating extend function for classes.\n\t\t * Took it from Backbone \n\t\t * @param {Object} protoProps\n\t\t * @param {Object} classProps\n\t\t * @returns {Object}\n\t\t */\n\t\textend: function(protoProps, classProps) {\n\t\t\tvar child = inherits(this, protoProps, classProps);\n\t\t\tchild.extend = this.extend;\n\t\t\t// a hack required to WSH inherit `toString` method\n\t\t\tif (protoProps.hasOwnProperty('toString'))\n\t\t\t\tchild.prototype.toString = protoProps.toString;\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * The essential function that expands Emmet abbreviation\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {String} syntax Abbreviation's context syntax\n\t\t * @param {String} profile Output profile (or its name)\n\t\t * @param {Object} contextNode Contextual node where abbreviation is\n\t\t * written\n\t\t * @return {String}\n\t\t */\n\t\texpandAbbreviation: function(abbr, syntax, profile, contextNode) {\n\t\t\tif (!abbr) return '';\n\t\t\t\n\t\t\tsyntax = syntax || defaultSyntax;\n//\t\t\tprofile = profile || defaultProfile;\n\t\t\t\n\t\t\tvar filters = r('filters');\n\t\t\tvar parser = r('abbreviationParser');\n\t\t\t\n\t\t\tprofile = r('profile').get(profile, syntax);\n\t\t\tr('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar outputTree = parser.parse(data[0], {\n\t\t\t\tsyntax: syntax, \n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\t\n\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\tfilters.apply(outputTree, filtersList, profile);\n\t\t\treturn outputTree.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default syntax name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultSyntax: function() {\n\t\t\treturn defaultSyntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default profile name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultProfile: function() {\n\t\t\treturn defaultProfile;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Log message into console if it exists\n\t\t */\n\t\tlog: function() {\n\t\t\tif (global.console && global.console.log)\n\t\t\t\tglobal.console.log.apply(global.console, arguments);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Setups function that should synchronously load undefined modules\n\t\t * @param {Function} fn\n\t\t */\n\t\tsetModuleLoader: function(fn) {\n\t\t\tmoduleLoader = fn;\n\t\t}\n\t};\n})(this);\n\n// export core for Node.JS\nif (typeof exports !== 'undefined') {\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\texports = module.exports = emmet;\n\t}\n\texports.emmet = emmet;\n}\n\n// export as Require.js module\nif (typeof define !== 'undefined') {\n\tdefine('emmet', [], emmet);\n}/**\n * Emmet abbreviation parser.\n * Takes string abbreviation and recursively parses it into a tree. The parsed \n * tree can be transformed into a string representation with \n * <code>toString()</code> method. Note that string representation is defined\n * by custom processors (called <i>filters</i>), not by abbreviation parser \n * itself.\n * \n * This module can be extended with custom pre-/post-processors to shape-up\n * final tree or its representation. Actually, many features of abbreviation \n * engine are defined in other modules as tree processors\n * \n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @memberOf __abbreviationParser\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationParser', function(require, _) {\n\tvar reValidName = /^[\\w\\-\\$\\:@\\!%]+\\+?$/i;\n\tvar reWord = /[\\w\\-:\\$@]/;\n\t\n\tvar pairs = {\n\t\t'[': ']',\n\t\t'(': ')',\n\t\t'{': '}'\n\t};\n\t\n\tvar spliceFn = Array.prototype.splice;\n\t\n\tvar preprocessors = [];\n\tvar postprocessors = [];\n\tvar outputProcessors = [];\n\t\n\t/**\n\t * @type AbbreviationNode\n\t */\n\tfunction AbbreviationNode(parent) {\n\t\t/** @type AbbreviationNode */\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis._attributes = [];\n\t\t\n\t\t/** @type String Raw abbreviation for current node */\n\t\tthis.abbreviation = '';\n\t\tthis.counter = 1;\n\t\tthis._name = null;\n\t\tthis._text = '';\n\t\tthis.repeatCount = 1;\n\t\tthis.hasImplicitRepeat = false;\n\t\t\n\t\t/** Custom data dictionary */\n\t\tthis._data = {};\n\t\t\n\t\t// output properties\n\t\tthis.start = '';\n\t\tthis.end = '';\n\t\tthis.content = '';\n\t\tthis.padding = '';\n\t}\n\t\n\tAbbreviationNode.prototype = {\n\t\t/**\n\t\t * Adds passed node as child or creates new child\n\t\t * @param {AbbreviationNode} child\n\t\t * @param {Number} position Index in children array where child should \n\t\t * be inserted\n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\taddChild: function(child, position) {\n\t\t\tchild = child || new AbbreviationNode;\n\t\t\tchild.parent = this;\n\t\t\t\n\t\t\tif (_.isUndefined(position)) {\n\t\t\t\tthis.children.push(child);\n\t\t\t} else {\n\t\t\t\tthis.children.splice(position, 0, child);\n\t\t\t}\n\t\t\t\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a deep copy of current node\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tclone: function() {\n\t\t\tvar node = new AbbreviationNode();\n\t\t\tvar attrs = ['abbreviation', 'counter', '_name', '_text', 'repeatCount', 'hasImplicitRepeat', 'start', 'end', 'content', 'padding'];\n\t\t\t_.each(attrs, function(a) {\n\t\t\t\tnode[a] = this[a];\n\t\t\t}, this);\n\t\t\t\n\t\t\t// clone attributes\n\t\t\tnode._attributes = _.map(this._attributes, function(attr) {\n\t\t\t\treturn _.clone(attr);\n\t\t\t});\n\t\t\t\n\t\t\tnode._data = _.clone(this._data);\n\t\t\t\n\t\t\t// clone children\n\t\t\tnode.children = _.map(this.children, function(child) {\n\t\t\t\tchild = child.clone();\n\t\t\t\tchild.parent = node;\n\t\t\t\treturn child;\n\t\t\t});\n\t\t\t\n\t\t\treturn node;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes current node from parent‘s child list\n\t\t * @returns {AbbreviationNode} Current node itself\n\t\t */\n\t\tremove: function() {\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.children = _.without(this.parent.children, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces current node in parent‘s children list with passed nodes\n\t\t * @param {AbbreviationNode} node Replacement node or array of nodes\n\t\t */\n\t\treplace: function() {\n\t\t\tvar parent = this.parent;\n\t\t\tvar ix = _.indexOf(parent.children, this);\n\t\t\tvar items = _.flatten(arguments);\n\t\t\tspliceFn.apply(parent.children, [ix, 1].concat(items));\n\t\t\t\n\t\t\t// update parent\n\t\t\t_.each(items, function(item) {\n\t\t\t\titem.parent = parent;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively sets <code>property</code> to <code>value</code> of current\n\t\t * node and its children \n\t\t * @param {String} name Property to update\n\t\t * @param {Object} value New property value\n\t\t */\n\t\tupdateProperty: function(name, value) {\n\t\t\tthis[name] = value;\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tchild.updateProperty(name, value);\n\t\t\t});\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds first child node that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tfind: function(fn) {\n\t\t\treturn this.findAll(fn)[0];\n//\t\t\tif (!_.isFunction(fn)) {\n//\t\t\t\tvar elemName = fn.toLowerCase();\n//\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n//\t\t\t}\n//\t\t\t\n//\t\t\tvar result = null;\n//\t\t\t_.find(this.children, function(child) {\n//\t\t\t\tif (fn(child)) {\n//\t\t\t\t\treturn result = child;\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t\treturn result = child.find(fn);\n//\t\t\t});\n//\t\t\t\n//\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds all child nodes that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {Array}\n\t\t */\n\t\tfindAll: function(fn) {\n\t\t\tif (!_.isFunction(fn)) {\n\t\t\t\tvar elemName = fn.toLowerCase();\n\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n\t\t\t}\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tif (fn(child))\n\t\t\t\t\tresult.push(child);\n\t\t\t\t\n\t\t\t\tresult = result.concat(child.findAll(fn));\n\t\t\t});\n\t\t\t\n\t\t\treturn _.compact(result);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets/gets custom data\n\t\t * @param {String} name\n\t\t * @param {Object} value\n\t\t * @returns {Object}\n\t\t */\n\t\tdata: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tthis._data[name] = value;\n\t\t\t\t\n\t\t\t\tif (name == 'resource' && require('elements').is(value, 'snippet')) {\n\t\t\t\t\t// setting snippet as matched resource: update `content`\n\t\t\t\t\t// property with snippet value\n\t\t\t\t\tthis.content = value.data;\n\t\t\t\t\tif (this._text) {\n\t\t\t\t\t\tthis.content = require('abbreviationUtils')\n\t\t\t\t\t\t\t.insertChildContent(value.data, this._text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this._data[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name of current node\n\t\t * @returns {String}\n\t\t */\n\t\tname: function() {\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element')) {\n\t\t\t\treturn res.name;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of attributes for current node\n\t\t * @returns {Array}\n\t\t */\n\t\tattributeList: function() {\n\t\t\tvar attrs = [];\n\t\t\t\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element') && _.isArray(res.attributes)) {\n\t\t\t\tattrs = attrs.concat(res.attributes);\n\t\t\t}\n\t\t\t\n\t\t\treturn optimizeAttributes(attrs.concat(this._attributes));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or sets attribute value\n\t\t * @param {String} name Attribute name\n\t\t * @param {String} value New attribute value\n\t\t * @returns {String}\n\t\t */\n\t\tattribute: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\t// modifying attribute\n\t\t\t\tvar ix = _.indexOf(_.pluck(this._attributes, 'name'), name.toLowerCase());\n\t\t\t\tif (~ix) {\n\t\t\t\t\tthis._attributes[ix].value = value;\n\t\t\t\t} else {\n\t\t\t\t\tthis._attributes.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn (_.find(this.attributeList(), function(attr) {\n\t\t\t\treturn attr.name == name;\n\t\t\t}) || {}).value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to the matched <code>element</code>, if any.\n\t\t * See {@link elements} module for a list of available elements\n\t\t * @returns {Object}\n\t\t */\n\t\tmatchedResource: function() {\n\t\t\treturn this.data('resource');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of current node in parent‘s children list\n\t\t * @returns {Number}\n\t\t */\n\t\tindex: function() {\n\t\t\treturn this.parent ? _.indexOf(this.parent.children, this) : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets how many times current element should be repeated\n\t\t * @private\n\t\t */\n\t\t_setRepeat: function(count) {\n\t\t\tif (count) {\n\t\t\t\tthis.repeatCount = parseInt(count, 10) || 1;\n\t\t\t} else {\n\t\t\t\tthis.hasImplicitRepeat = true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets abbreviation that belongs to current node\n\t\t * @param {String} abbr\n\t\t */\n\t\tsetAbbreviation: function(abbr) {\n\t\t\tabbr = abbr || '';\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\t// find multiplier\n\t\t\tabbr = abbr.replace(/\\*(\\d+)?$/, function(str, repeatCount) {\n\t\t\t\tthat._setRepeat(repeatCount);\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\tthis.abbreviation = abbr;\n\t\t\t\n\t\t\tvar abbrText = extractText(abbr);\n\t\t\tif (abbrText) {\n\t\t\t\tabbr = abbrText.element;\n\t\t\t\tthis.content = this._text = abbrText.text;\n\t\t\t}\n\t\t\t\n\t\t\tvar abbrAttrs = parseAttributes(abbr);\n\t\t\tif (abbrAttrs) {\n\t\t\t\tabbr = abbrAttrs.element;\n\t\t\t\tthis._attributes = abbrAttrs.attributes;\n\t\t\t}\n\t\t\t\n\t\t\tthis._name = abbr;\n\t\t\t\n\t\t\t// validate name\n\t\t\tif (this._name && !reValidName.test(this._name)) {\n\t\t\t\tthrow 'Invalid abbreviation';\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of current node\n\t\t * @return {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar start = this.start;\n\t\t\tvar end = this.end;\n\t\t\tvar content = this.content;\n\t\t\t\n\t\t\t// apply output processors\n\t\t\tvar node = this;\n\t\t\t_.each(outputProcessors, function(fn) {\n\t\t\t\tstart = fn(start, node, 'start');\n\t\t\t\tcontent = fn(content, node, 'content');\n\t\t\t\tend = fn(end, node, 'end');\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\tvar innerContent = _.map(this.children, function(child) {\n\t\t\t\treturn child.toString();\n\t\t\t}).join('');\n\t\t\t\n\t\t\tcontent = require('abbreviationUtils').insertChildContent(content, innerContent, {\n\t\t\t\tkeepVariable: false\n\t\t\t});\n\t\t\t\n\t\t\treturn start + utils.padString(content, this.padding) + end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node contains children with empty <code>expr</code>\n\t\t * property\n\t\t * @return {Boolean}\n\t\t */\n\t\thasEmptyChildren: function() {\n\t\t\treturn !!_.find(this.children, function(child) {\n\t\t\t\treturn child.isEmpty();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node has implied name that should be resolved\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasImplicitName: function() {\n\t\t\treturn !this._name && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current element is a grouping one, e.g. has no \n\t\t * representation but serves as a container for other nodes\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisGroup: function() {\n\t\t\treturn !this.abbreviation;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates empty node (i.e. without abbreviation). It may be a \n\t\t * grouping node and should not be outputted\n\t\t * @return {Boolean}\n\t\t */\n\t\tisEmpty: function() {\n\t\t\treturn !this.abbreviation && !this.children.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current node should be repeated\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisRepeating: function() {\n\t\t\treturn this.repeatCount > 1 || this.hasImplicitRepeat;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node is a text-only node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisTextNode: function() {\n\t\t\treturn !this.name() && !this.attributeList().length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates whether this node may be used to build elements or snippets\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisElement: function() {\n\t\t\treturn !this.isEmpty() && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns latest and deepest child of current tree\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tdeepestChild: function() {\n\t\t\tif (!this.children.length)\n\t\t\t\treturn null;\n\t\t\t\t\n\t\t\tvar deepestChild = this;\n\t\t\twhile (deepestChild.children.length) {\n\t\t\t\tdeepestChild = _.last(deepestChild.children);\n\t\t\t}\n\t\t\t\n\t\t\treturn deepestChild;\n\t\t}\n\t};\n\t\n\t/**\n\t * Returns stripped string: a string without first and last character.\n\t * Used for “unquoting” strings\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction stripped(str) {\n\t\treturn str.substring(1, str.length - 1);\n\t}\n\t\n\tfunction consumeQuotedValue(stream, quote) {\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch === quote)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (ch == '\\\\')\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Parses abbreviation into a tree\n\t * @param {String} abbr\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction parseAbbreviation(abbr) {\n\t\tabbr = require('utils').trim(abbr);\n\t\t\n\t\tvar root = new AbbreviationNode;\n\t\tvar context = root.addChild(), ch;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\tvar loopProtector = 1000, multiplier;\n\t\t\n\t\twhile (!stream.eol() && --loopProtector > 0) {\n\t\t\tch = stream.peek();\n\t\t\t\n\t\t\tswitch (ch) {\n\t\t\t\tcase '(': // abbreviation group\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (stream.skipToPair('(', ')')) {\n\t\t\t\t\t\tvar inner = parseAbbreviation(stripped(stream.current()));\n\t\t\t\t\t\tif (multiplier = stream.match(/^\\*(\\d+)?/, true)) {\n\t\t\t\t\t\t\tcontext._setRepeat(multiplier[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t_.each(inner.children, function(child) {\n\t\t\t\t\t\t\tcontext.addChild(child);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \")\" found for character at ' + stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '>': // child operator\n\t\t\t\t\tcontext = context.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '+': // sibling operator\n\t\t\t\t\tcontext = context.parent.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '^': // climb up operator\n\t\t\t\t\tvar parent = context.parent || context;\n\t\t\t\t\tcontext = (parent.parent || parent).addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tdefault: // consume abbreviation\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(function(c) {\n\t\t\t\t\t\tif (c == '[' || c == '{') {\n\t\t\t\t\t\t\tif (stream.skipToPair(c, pairs[c])) {\n\t\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \"' + pairs[c] + '\" found for character at ' + stream.pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (c == '+') {\n\t\t\t\t\t\t\t// let's see if this is an expando marker\n\t\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\t\tvar isMarker = stream.eol() ||  ~'+>^*'.indexOf(stream.peek());\n\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\treturn isMarker;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn c != '(' && isAllowedChar(c);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcontext.setAbbreviation(stream.current());\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (loopProtector < 1)\n\t\t\tthrow 'Endless loop detected';\n\t\t\n\t\treturn root;\n\t}\n\t\n\t/**\n\t * Extract attributes and their values from attribute set: \n\t * <code>[attr col=3 title=\"Quoted string\"]</code>\n\t * @param {String} attrSet\n\t * @returns {Array}\n\t */\n\tfunction extractAttributes(attrSet, attrs) {\n\t\tattrSet = require('utils').trim(attrSet);\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(attrSet);\n\t\tstream.eatSpace();\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tstream.start = stream.pos;\n\t\t\tif (stream.eatWhile(reWord)) {\n\t\t\t\tvar attrName = stream.current();\n\t\t\t\tvar attrValue = '';\n\t\t\t\tif (stream.peek() == '=') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tvar quote = stream.peek();\n\t\t\t\t\t\n\t\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\tif (consumeQuotedValue(stream, quote)) {\n\t\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t\t\t// strip quotes\n\t\t\t\t\t\t\tattrValue = attrValue.substring(1, attrValue.length - 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (stream.eatWhile(/[^\\s\\]]/)) {\n\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult.push({\n\t\t\t\t\tname: attrName, \n\t\t\t\t\tvalue: attrValue\n\t\t\t\t});\n\t\t\t\tstream.eatSpace();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Parses tag attributes extracted from abbreviation. If attributes found, \n\t * returns object with <code>element</code> and <code>attributes</code>\n\t * properties\n\t * @param {String} abbr\n\t * @returns {Object} Returns <code>null</code> if no attributes found in \n\t * abbreviation\n\t */\n\tfunction parseAttributes(abbr) {\n\t\t/*\n\t\t * Example of incoming data:\n\t\t * #header\n\t\t * .some.data\n\t\t * .some.data#header\n\t\t * [attr]\n\t\t * #item[attr=Hello other=\"World\"].class\n\t\t */\n\t\tvar result = [];\n\t\tvar attrMap = {'#': 'id', '.': 'class'};\n\t\tvar nameEnd = null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '#': // id\n\t\t\t\tcase '.': // class\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tvar attrName = attrMap[stream.peek()];\n\t\t\t\t\t\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(reWord);\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tname: attrName, \n\t\t\t\t\t\tvalue: stream.current()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase '[': //begin attribute set\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (!stream.skipToPair('[', ']')) \n\t\t\t\t\t\tthrow 'Invalid attribute set definition';\n\t\t\t\t\t\n\t\t\t\t\tresult = result.concat(\n\t\t\t\t\t\textractAttributes(stripped(stream.current()))\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!result.length)\n\t\t\treturn null;\n\t\t\n\t\treturn {\n\t\t\telement: abbr.substring(0, nameEnd),\n\t\t\tattributes: optimizeAttributes(result)\n\t\t};\n\t}\n\t\n\t/**\n\t * Optimize attribute set: remove duplicates and merge class attributes\n\t * @param attrs\n\t */\n\tfunction optimizeAttributes(attrs) {\n\t\t// clone all attributes to make sure that original objects are \n\t\t// not modified\n\t\tattrs  = _.map(attrs, function(attr) {\n\t\t\treturn _.clone(attr);\n\t\t});\n\t\t\n\t\tvar lookup = {};\n\t\treturn _.filter(attrs, function(attr) {\n\t\t\tif (!(attr.name in lookup)) {\n\t\t\t\treturn lookup[attr.name] = attr;\n\t\t\t}\n\t\t\t\n\t\t\tvar la = lookup[attr.name];\n\t\t\t\n\t\t\tif (attr.name.toLowerCase() == 'class') {\n\t\t\t\tla.value += (la.value.length ? ' ' : '') + attr.value;\n\t\t\t} else {\n\t\t\t\tla.value = attr.value;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\t/**\n\t * Extract text data from abbreviation: if <code>a{hello}</code> abbreviation\n\t * is passed, returns object <code>{element: 'a', text: 'hello'}</code>.\n\t * If nothing found, returns <code>null</code>\n\t * @param {String} abbr\n\t * \n\t */\n\tfunction extractText(abbr) {\n\t\tif (!~abbr.indexOf('{'))\n\t\t\treturn null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '[':\n\t\t\t\tcase '(':\n\t\t\t\t\tstream.skipToPair(stream.peek(), pairs[stream.peek()]); break;\n\t\t\t\t\t\n\t\t\t\tcase '{':\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: abbr.substring(0, stream.start),\n\t\t\t\t\t\ttext: stripped(stream.current())\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * “Un-rolls“ contents of current node: recursively replaces all repeating \n\t * children with their repeated clones\n\t * @param {AbbreviationNode} node\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction unroll(node) {\n\t\tfor (var i = node.children.length - 1, j, child, maxCount; i >= 0; i--) {\n\t\t\tchild = node.children[i];\n\t\t\t\n\t\t\tif (child.isRepeating()) {\n\t\t\t\tmaxCount = j = child.repeatCount;\n\t\t\t\tchild.repeatCount = 1;\n\t\t\t\tchild.updateProperty('counter', 1);\n\t\t\t\tchild.updateProperty('maxCount', maxCount);\n\t\t\t\twhile (--j > 0) {\n\t\t\t\t\tchild.parent.addChild(child.clone(), i + 1)\n\t\t\t\t\t\t.updateProperty('counter', j + 1)\n\t\t\t\t\t\t.updateProperty('maxCount', maxCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// to keep proper 'counter' property, we need to walk\n\t\t// on children once again\n\t\t_.each(node.children, unroll);\n\t\t\n\t\treturn node;\n\t}\n\t\n\t/**\n\t * Optimizes tree node: replaces empty nodes with their children\n\t * @param {AbbreviationNode} node\n\t * @return {AbbreviationNode}\n\t */\n\tfunction squash(node) {\n\t\tfor (var i = node.children.length - 1; i >= 0; i--) {\n\t\t\t/** @type AbbreviationNode */\n\t\t\tvar n = node.children[i];\n\t\t\tif (n.isGroup()) {\n\t\t\t\tn.replace(squash(n).children);\n\t\t\t} else if (n.isEmpty()) {\n\t\t\t\tn.remove();\n\t\t\t}\n\t\t}\n\t\t\n\t\t_.each(node.children, squash);\n\t\t\n\t\treturn node;\n\t}\n\t\n\tfunction isAllowedChar(ch) {\n\t\tvar charCode = ch.charCodeAt(0);\n\t\tvar specialChars = '#.*:$-_!@|%';\n\t\t\n\t\treturn (charCode > 64 && charCode < 91)       // uppercase letter\n\t\t\t\t|| (charCode > 96 && charCode < 123)  // lowercase letter\n\t\t\t\t|| (charCode > 47 && charCode < 58)   // number\n\t\t\t\t|| specialChars.indexOf(ch) != -1;    // special character\n\t}\n\t\n\t// XXX add counter replacer function as output processor\n\toutputProcessors.push(function(text, node) {\n\t\treturn require('utils').replaceCounter(text, node.counter, node.maxCount);\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses abbreviation into tree with respect of groups, \n\t\t * text nodes and attributes. Each node of the tree is a single \n\t\t * abbreviation. Tree represents actual structure of the outputted \n\t\t * result\n\t\t * @memberOf abbreviationParser\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {Object} options Additional options for parser and processors\n\t\t * \n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\tparse: function(abbr, options) {\n\t\t\toptions = options || {};\n\t\t\t\n\t\t\tvar tree = parseAbbreviation(abbr);\n\t\t\t\n\t\t\tif (options.contextNode) {\n\t\t\t\t// add info about context node –\n\t\t\t\t// a parent XHTML node in editor inside which abbreviation is \n\t\t\t\t// expanded\n\t\t\t\ttree._name = options.contextNode.name;\n\t\t\t\tvar attrLookup = {};\n\t\t\t\t_.each(tree._attributes, function(attr) {\n\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t_.each(options.contextNode.attributes, function(attr) {\n\t\t\t\t\tif (attr.name in attrLookup) {\n\t\t\t\t\t\tattrLookup[attr.name].value = attr.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tattr = _.clone(attr);\n\t\t\t\t\t\ttree._attributes.push(attr);\n\t\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// apply preprocessors\n\t\t\t_.each(preprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\ttree = squash(unroll(tree));\n\t\t\t\n\t\t\t// apply postprocessors\n\t\t\t_.each(postprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\tAbbreviationNode: AbbreviationNode,\n\t\t\n\t\t/**\n\t\t * Add new abbreviation preprocessor. <i>Preprocessor</i> is a function\n\t\t * that applies to a parsed abbreviation tree right after it get parsed.\n\t\t * The passed tree is in unoptimized state.\n\t\t * @param {Function} fn Preprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPreprocessor: function(fn) {\n\t\t\tif (!_.include(preprocessors, fn))\n\t\t\t\tpreprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered preprocessor\n\t\t */\n\t\tremoveFilter: function(fn) {\n\t\t\tpreprocessor = _.without(preprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new abbreviation postprocessor. <i>Postprocessor</i> is a \n\t\t * functinon that applies to <i>optimized</i> parsed abbreviation tree\n\t\t * right before it returns from <code>parse()</code> method\n\t\t * @param {Function} fn Postprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPostprocessor: function(fn) {\n\t\t\tif (!_.include(postprocessors, fn))\n\t\t\t\tpostprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered postprocessor function\n\t\t */\n\t\tremovePostprocessor: function(fn) {\n\t\t\tpostprocessors = _.without(postprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers output postprocessor. <i>Output processor</i> is a \n\t\t * function that applies to output part (<code>start</code>, \n\t\t * <code>end</code> and <code>content</code>) when \n\t\t * <code>AbbreviationNode.toString()</code> method is called\n\t\t */\n\t\taddOutputProcessor: function(fn) {\n\t\t\tif (!_.include(outputProcessors, fn))\n\t\t\t\toutputProcessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered output processor\n\t\t */\n\t\tremoveOutputProcessor: function(fn) {\n\t\t\toutputProcessors = _.without(outputProcessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is valid symbol for abbreviation expression\n\t\t * @param {String} ch\n\t\t * @return {Boolean}\n\t\t */\n\t\tisAllowedChar: function(ch) {\n\t\t\tch = String(ch); // convert Java object to JS\n\t\t\treturn isAllowedChar(ch) || ~'>+^[](){}'.indexOf(ch);\n\t\t}\n\t};\n});/**\n * Processor function that matches parsed <code>AbbreviationNode</code>\n * against resources defined in <code>resource</code> module\n * @param {Function} require\n * @param {Underscore} _\n */ \nemmet.exec(function(require, _) {\n\t/**\n\t * Finds matched resources for child nodes of passed <code>node</code> \n\t * element. A matched resource is a reference to <i>snippets.json</i> entry\n\t * that describes output of parsed node \n\t * @param {AbbreviationNode} node\n\t * @param {String} syntax\n\t */\n\tfunction matchResources(node, syntax) {\n\t\tvar resources = require('resources');\n\t\tvar elements = require('elements');\n\t\tvar parser = require('abbreviationParser');\n\t\t\n\t\t// do a shallow copy because the children list can be modified during\n\t\t// resource matching\n\t\t_.each(_.clone(node.children), /** @param {AbbreviationNode} child */ function(child) {\n\t\t\tvar r = resources.getMatchedResource(child, syntax);\n\t\t\tif (_.isString(r)) {\n\t\t\t\tchild.data('resource', elements.create('snippet', r));\n\t\t\t} else if (elements.is(r, 'reference')) {\n\t\t\t\t// it’s a reference to another abbreviation:\n\t\t\t\t// parse it and insert instead of current child\n\t\t\t\t/** @type AbbreviationNode */\n\t\t\t\tvar subtree = parser.parse(r.data, {\n\t\t\t\t\tsyntax: syntax\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// if context element should be repeated, check if we need to \n\t\t\t\t// transfer repeated element to specific child node\n\t\t\t\tif (child.repeatCount > 1) {\n\t\t\t\t\tvar repeatedChildren = subtree.findAll(function(node) {\n\t\t\t\t\t\treturn node.hasImplicitRepeat;\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t_.each(repeatedChildren, function(node) {\n\t\t\t\t\t\tnode.repeatCount = child.repeatCount;\n\t\t\t\t\t\tnode.hasImplicitRepeat = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// move child‘s children into the deepest child of new subtree\n\t\t\t\tvar deepestChild = subtree.deepestChild();\n\t\t\t\tif (deepestChild) {\n\t\t\t\t\t_.each(child.children, function(c) {\n\t\t\t\t\t\tdeepestChild.addChild(c);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// copy current attributes to children\n\t\t\t\t_.each(subtree.children, function(node) {\n\t\t\t\t\t_.each(child.attributeList(), function(attr) {\n\t\t\t\t\t\tnode.attribute(attr.name, attr.value);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tchild.replace(subtree.children);\n\t\t\t} else {\n\t\t\t\tchild.data('resource', r);\n\t\t\t}\n\t\t\t\n\t\t\tmatchResources(child, syntax);\n\t\t});\n\t}\n\t\n\t// XXX register abbreviation filter that creates references to resources\n\t// on abbreviation nodes\n\t/**\n\t * @param {AbbreviationNode} tree\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar syntax = options.syntax || emmet.defaultSyntax();\n\t\tmatchResources(tree, syntax);\n\t});\n\t\n});/**\n * Pasted content abbreviation processor. A pasted content is a content that\n * should be inserted into implicitly repeated abbreviation nodes.\n * This processor powers “Wrap With Abbreviation” action\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar parser = require('abbreviationParser');\n\tvar outputPlaceholder = '$#';\n\t\n\t/**\n\t * Locates output placeholders inside text\n\t * @param {String} text\n\t * @returns {Array} Array of ranges of output placeholder in text\n\t */\n\tfunction locateOutputPlaceholder(text) {\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(text);\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tif (stream.peek() == '\\\\') {\n\t\t\t\tstream.next();\n\t\t\t} else {\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tif (stream.match(outputPlaceholder, true)) {\n\t\t\t\t\tresult.push(range.create(stream.start, outputPlaceholder));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Replaces output placeholders inside <code>source</code> with \n\t * <code>value</code>\n\t * @param {String} source\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction replaceOutputPlaceholders(source, value) {\n\t\tvar utils = require('utils');\n\t\tvar ranges = locateOutputPlaceholder(source);\n\t\t\n\t\tranges.reverse();\n\t\t_.each(ranges, function(r) {\n\t\t\tsource = utils.replaceSubstring(source, value, r);\n\t\t});\n\t\t\n\t\treturn source;\n\t}\n\t\n\t/**\n\t * Check if parsed node contains output placeholder – a target where\n\t * pasted content should be inserted\n\t * @param {AbbreviationNode} node\n\t * @returns {Boolean}\n\t */\n\tfunction hasOutputPlaceholder(node) {\n\t\tif (locateOutputPlaceholder(node.content).length)\n\t\t\treturn true;\n\t\t\n\t\t// check if attributes contains placeholder\n\t\treturn !!_.find(node.attributeList(), function(attr) {\n\t\t\treturn !!locateOutputPlaceholder(attr.value).length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Insert pasted content into correct positions of parsed node\n\t * @param {AbbreviationNode} node\n\t * @param {String} content\n\t * @param {Boolean} overwrite Overwrite node content if no value placeholders\n\t * found instead of appending to existing content\n\t */\n\tfunction insertPastedContent(node, content, overwrite) {\n\t\tvar nodesWithPlaceholders = node.findAll(function(item) {\n\t\t\treturn hasOutputPlaceholder(item);\n\t\t});\n\t\t\n\t\tif (hasOutputPlaceholder(node))\n\t\t\tnodesWithPlaceholders.unshift(node);\n\t\t\n\t\tif (nodesWithPlaceholders.length) {\n\t\t\t_.each(nodesWithPlaceholders, function(item) {\n\t\t\t\titem.content = replaceOutputPlaceholders(item.content, content);\n\t\t\t\t_.each(item._attributes, function(attr) {\n\t\t\t\t\tattr.value = replaceOutputPlaceholders(attr.value, content);\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// on output placeholders in subtree, insert content in the deepest\n\t\t\t// child node\n\t\t\tvar deepest = node.deepestChild() || node;\n\t\t\tif (overwrite) {\n\t\t\t\tdeepest.content = content;\n\t\t\t} else {\n\t\t\t\tdeepest.content = require('abbreviationUtils').insertChildContent(deepest.content, content);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPreprocessor(function(tree, options) {\n\t\tif (options.pastedContent) {\n\t\t\tvar utils = require('utils');\n\t\t\tvar lines = _.map(utils.splitByLines(options.pastedContent, true), utils.trim);\n\t\t\t\n\t\t\t// set repeat count for implicitly repeated elements before\n\t\t\t// tree is unrolled\n\t\t\ttree.findAll(function(item) {\n\t\t\t\tif (item.hasImplicitRepeat) {\n\t\t\t\t\titem.data('paste', lines);\n\t\t\t\t\treturn item.repeatCount = lines.length;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPostprocessor(function(tree, options) {\n\t\t// for each node with pasted content, update text data\n\t\tvar targets = tree.findAll(function(item) {\n\t\t\tvar pastedContentObj = item.data('paste');\n\t\t\tvar pastedContent = '';\n\t\t\tif (_.isArray(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj[item.counter - 1];\n\t\t\t} else if (_.isFunction(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj(item.counter - 1, item.content);\n\t\t\t} else if (pastedContentObj) {\n\t\t\t\tpastedContent = pastedContentObj;\n\t\t\t}\n\t\t\t\n\t\t\tif (pastedContent) {\n\t\t\t\tinsertPastedContent(item, pastedContent, !!item.data('pasteOverwrites'));\n\t\t\t}\n\t\t\t\n\t\t\titem.data('paste', null);\n\t\t\treturn !!pastedContentObj;\n\t\t});\n\t\t\n\t\tif (!targets.length && options.pastedContent) {\n\t\t\t// no implicitly repeated elements, put pasted content in\n\t\t\t// the deepest child\n\t\t\tinsertPastedContent(tree, options.pastedContent);\n\t\t}\n\t});\n});/**\n * Resolves tag names in abbreviations with implied name\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Resolves implicit node names in parsed tree\n\t * @param {AbbreviationNode} tree\n\t */\n\tfunction resolveNodeNames(tree) {\n\t\tvar tagName = require('tagName');\n\t\t_.each(tree.children, function(node) {\n\t\t\tif (node.hasImplicitName() || node.data('forceNameResolving')) {\n\t\t\t\tnode._name = tagName.resolve(node.parent.name());\n\t\t\t}\n\t\t\tresolveNodeNames(node);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('abbreviationParser').addPostprocessor(resolveNodeNames);\n});/**\n * @author Stoyan Stefanov\n * @link https://github.com/stoyan/etc/tree/master/cssex\n */\n\nemmet.define('cssParser', function(require, _) {\nvar walker, tokens = [], isOp, isNameChar, isDigit;\n    \n    // walks around the source\n    walker = {\n        lines: null,\n        total_lines: 0,\n        linenum: -1,\n        line: '',\n        ch: '',\n        chnum: -1,\n        init: function (source) {\n            var me = walker;\n        \n            // source, yumm\n            me.lines = source\n                .replace(/\\r\\n/g, '\\n')\n                .replace(/\\r/g, '\\n')\n                .split('\\n');\n            me.total_lines = me.lines.length;\n        \n            // reset\n            me.chnum = -1;\n            me.linenum = -1;\n            me.ch = '';\n            me.line = '';\n        \n            // advance\n            me.nextLine();\n            me.nextChar();\n        },\n        nextLine: function () {\n            var me = this;\n            me.linenum += 1;\n            if (me.total_lines <= me.linenum) {\n                me.line = false;\n            } else {\n                me.line = me.lines[me.linenum];\n            }\n            if (me.chnum !== -1) {\n                me.chnum = 0;\n            }\n            return me.line;\n        }, \n        nextChar: function () {\n            var me = this;\n            me.chnum += 1;\n            while (me.line.charAt(me.chnum) === '') {\n                if (this.nextLine() === false) {\n                    me.ch = false;\n                    return false; // end of source\n                }\n                me.chnum = -1;\n                me.ch = '\\n';\n                return '\\n';\n            }\n            me.ch = me.line.charAt(me.chnum);\n            return me.ch;\n        },\n        peek: function() {\n            return this.line.charAt(this.chnum + 1);\n        }\n    };\n\n    // utility helpers\n    isNameChar = function (c) {\n    \t// be more tolerate for name tokens: allow & character for LESS syntax\n        return (c == '&' || c === '_' || c === '-' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));\n    };\n\n    isDigit = function (ch) {\n        return (ch !== false && ch >= '0' && ch <= '9');\n    };  \n\n    isOp = (function () {\n        var opsa = \"{}[]()+*=.,;:>~|\\\\%$#@^!\".split(''),\n            opsmatcha = \"*^|$~\".split(''),\n            ops = {},\n            opsmatch = {},\n            i = 0;\n        for (; i < opsa.length; i += 1) {\n            ops[opsa[i]] = true;\n        }\n        for (i = 0; i < opsmatcha.length; i += 1) {\n            opsmatch[opsmatcha[i]] = true;\n        }\n        return function (ch, matchattr) {\n            if (matchattr) {\n                return !!opsmatch[ch];\n            }\n            return !!ops[ch];\n        };\n    }());\n    \n    // shorthands\n    function isset(v) {\n        return typeof v !== 'undefined';\n    }\n    function getConf() {\n        return {\n            'char': walker.chnum,\n            line: walker.linenum\n        };\n    }\n\n\n    // creates token objects and pushes them to a list\n    function tokener(value, type, conf) {\n        var w = walker, c = conf || {};\n        tokens.push({\n            charstart: isset(c['char']) ? c['char'] : w.chnum,\n            charend:   isset(c.charend) ? c.charend : w.chnum,\n            linestart: isset(c.line)    ? c.line    : w.linenum,\n            lineend:   isset(c.lineend) ? c.lineend : w.linenum,\n            value:     value,\n            type:      type || value\n        });\n    }\n    \n    // oops\n    function error(m, config) { \n        var w = walker,\n            conf = config || {},\n            c = isset(conf['char']) ? conf['char'] : w.chnum,\n            l = isset(conf.line) ? conf.line : w.linenum;\n        return {\n            name: \"ParseError\",\n            message: m + \" at line \" + (l + 1) + ' char ' + (c + 1),\n            walker: w,\n            tokens: tokens\n        };\n    }\n\n\n    // token handlers follow for:\n    // white space, comment, string, identifier, number, operator\n    function white() {\n    \n        var c = walker.ch,\n            token = '',\n            conf = getConf();\n    \n        while (c === \" \" || c === \"\\t\") {\n            token += c;\n            c = walker.nextChar();\n        }\n    \n        tokener(token, 'white', conf);\n    \n    }\n\n    function comment() {\n    \n        var w = walker,\n            c = w.ch,\n            token = c,\n            cnext,\n            conf = getConf();    \n     \n        cnext = w.nextChar();\n\n        if (cnext === '/') {\n            // inline comment in SCSS and such\n            token += cnext;\n            var pk = w.peek();\n            while (pk && pk !== '\\n') {\n                token += cnext;\n                cnext = w.nextChar();\n                pk = w.peek();\n            }\n        } else if (cnext === '*') {\n            // multiline CSS commment\n            while (!(c === \"*\" && cnext === \"/\")) {\n                token += cnext;\n                c = cnext;\n                cnext = w.nextChar();        \n            }            \n        } else {\n            // oops, not a comment, just a /\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, token, conf);\n        }\n        \n        token += cnext;\n        w.nextChar();\n        tokener(token, 'comment', conf);\n    }\n\n    function str() {\n        var w = walker,\n            c = w.ch,\n            q = c,\n            token = c,\n            cnext,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== q) {\n            \n            if (c === '\\n') {\n                cnext = w.nextChar();\n                if (cnext === \"\\\\\") {\n                    token += c + cnext;\n                } else {\n                    // end of line with no \\ escape = bad\n                    throw error(\"Unterminated string\", conf);\n                }\n            } else {\n                if (c === \"\\\\\") {\n                    token += c + w.nextChar();\n                } else {\n                    token += c;\n                }\n            }\n        \n            c = w.nextChar();\n        \n        }\n        token += c;\n        w.nextChar();\n        tokener(token, 'string', conf);\n    }\n    \n    function brace() {\n        var w = walker,\n            c = w.ch,\n            depth = 0,\n            token = c,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== ')' && !depth) {\n        \tif (c === '(') {\n        \t\tdepth++;\n        \t} else if (c === ')') {\n        \t\tdepth--;\n        \t} else if (c === false) {\n        \t\tthrow error(\"Unterminated brace\", conf);\n        \t}\n        \t\n        \ttoken += c;\n            c = w.nextChar();\n        }\n        \n        token += c;\n        w.nextChar();\n        tokener(token, 'brace', conf);\n    }\n\n    function identifier(pre) {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = (pre) ? pre + c : c;\n            \n        c = w.nextChar();\n    \n        if (pre) { // adjust token position\n        \tconf['char'] -= pre.length;\n        }\n        \n        while (isNameChar(c) || isDigit(c)) {\n            token += c;\n            c = w.nextChar();\n        }\n    \n        tokener(token, 'identifier', conf);    \n    }\n\n    function num() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            point = token === '.',\n            nondigit;\n        \n        c = w.nextChar();\n        nondigit = !isDigit(c);\n    \n        // .2px or .classname?\n        if (point && nondigit) {\n            // meh, NaN, could be a class name, so it's an operator for now\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, '.', conf);    \n        }\n        \n        // -2px or -moz-something\n        if (token === '-' && nondigit) {\n            return identifier('-');\n        }\n    \n        while (c !== false && (isDigit(c) || (!point && c === '.'))) { // not end of source && digit or first instance of .\n            if (c === '.') {\n                point = true;\n            }\n            token += c;\n            c = w.nextChar();\n        }\n\n        tokener(token, 'number', conf);    \n    \n    }\n\n    function op() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            next = w.nextChar();\n            \n        if (next === \"=\" && isOp(token, true)) {\n            token += next;\n            tokener(token, 'match', conf);\n            w.nextChar();\n            return;\n        } \n        \n        conf.charend = conf['char'] + 1;\n        conf.lineend = conf.line;    \n        tokener(token, token, conf);\n    }\n\n\n    // call the appropriate handler based on the first character in a token suspect\n    function tokenize() {\n\n        var ch = walker.ch;\n    \n        if (ch === \" \" || ch === \"\\t\") {\n            return white();\n        }\n\n        if (ch === '/') {\n            return comment();\n        } \n\n        if (ch === '\"' || ch === \"'\") {\n            return str();\n        }\n        \n        if (ch === '(') {\n            return brace();\n        }\n    \n        if (ch === '-' || ch === '.' || isDigit(ch)) { // tricky - char: minus (-1px) or dash (-moz-stuff)\n            return num();\n        }\n    \n        if (isNameChar(ch)) {\n            return identifier();\n        }\n\n        if (isOp(ch)) {\n            return op();\n        }\n        \n        if (ch === \"\\n\") {\n            tokener(\"line\");\n            walker.nextChar();\n            return;\n        }\n        \n        throw error(\"Unrecognized character\");\n    }\n    \n    /**\n\t * Returns newline character at specified position in content\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @return {String}\n\t */\n\tfunction getNewline(content, pos) {\n\t\treturn content.charAt(pos) == '\\r' && content.charAt(pos + 1) == '\\n' \n\t\t\t? '\\r\\n' \n\t\t\t: content.charAt(pos);\n\t}\n\n    return {\n    \t/**\n    \t * @param source\n    \t * @returns\n    \t * @memberOf emmet.cssParser\n    \t */\n        lex: function (source) {\n            walker.init(source);\n            tokens = [];\n            while (walker.ch !== false) {\n                tokenize();            \n            }\n            return tokens;\n        },\n        \n        /**\n         * Tokenizes CSS source\n         * @param {String} source\n         * @returns {Array}\n         */\n        parse: function(source) {\n        \t// transform tokens\n\t \t\tvar pos = 0;\n\t \t\treturn _.map(this.lex(source), function(token) {\n\t \t\t\tif (token.type == 'line') {\n\t \t\t\t\ttoken.value = getNewline(source, pos);\n\t \t\t\t}\n\t \t\t\t\n\t \t\t\treturn {\n\t \t\t\t\ttype: token.type,\n\t \t\t\t\tstart: pos,\n\t \t\t\t\tend: (pos += token.value.length)\n\t \t\t\t};\n\t\t\t});\n\t\t},\n        \n        toSource: function (toks) {\n            var i = 0, max = toks.length, t, src = '';\n            for (; i < max; i += 1) {\n                t = toks[i];\n                if (t.type === 'line') {\n                    src += '\\n';\n                } else {\n                    src += t.value;\n                }\n            }\n            return src;\n        }\n    };\n});/**\n * HTML tokenizer by Marijn Haverbeke\n * http://codemirror.net/\n * @constructor\n * @memberOf __xmlParseDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('xmlParser', function(require, _) {\n\tvar Kludges = {\n\t\tautoSelfClosers : {},\n\t\timplicitlyClosed : {},\n\t\tcontextGrabbers : {},\n\t\tdoNotIndent : {},\n\t\tallowUnquoted : true,\n\t\tallowMissing : true\n\t};\n\n\t// Return variables for tokenizers\n\tvar tagName = null, type = null;\n\n\tfunction inText(stream, state) {\n\t\tfunction chain(parser) {\n\t\t\tstate.tokenize = parser;\n\t\t\treturn parser(stream, state);\n\t\t}\n\n\t\tvar ch = stream.next();\n\t\tif (ch == \"<\") {\n\t\t\tif (stream.eat(\"!\")) {\n\t\t\t\tif (stream.eat(\"[\")) {\n\t\t\t\t\tif (stream.match(\"CDATA[\"))\n\t\t\t\t\t\treturn chain(inBlock(\"atom\", \"]]>\"));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn null;\n\t\t\t\t} else if (stream.match(\"--\"))\n\t\t\t\t\treturn chain(inBlock(\"comment\", \"-->\"));\n\t\t\t\telse if (stream.match(\"DOCTYPE\", true, true)) {\n\t\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\t\treturn chain(doctype(1));\n\t\t\t\t} else\n\t\t\t\t\treturn null;\n\t\t\t} else if (stream.eat(\"?\")) {\n\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\tstate.tokenize = inBlock(\"meta\", \"?>\");\n\t\t\t\treturn \"meta\";\n\t\t\t} else {\n\t\t\t\ttype = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n\t\t\t\tstream.eatSpace();\n\t\t\t\ttagName = \"\";\n\t\t\t\tvar c;\n\t\t\t\twhile ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)))\n\t\t\t\t\ttagName += c;\n\t\t\t\tstate.tokenize = inTag;\n\t\t\t\treturn \"tag\";\n\t\t\t}\n\t\t} else if (ch == \"&\") {\n\t\t\tvar ok;\n\t\t\tif (stream.eat(\"#\")) {\n\t\t\t\tif (stream.eat(\"x\")) {\n\t\t\t\t\tok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n\t\t\t\t} else {\n\t\t\t\t\tok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n\t\t\t}\n\t\t\treturn ok ? \"atom\" : \"error\";\n\t\t} else {\n\t\t\tstream.eatWhile(/[^&<]/);\n\t\t\treturn \"text\";\n\t\t}\n\t}\n\n\tfunction inTag(stream, state) {\n\t\tvar ch = stream.next();\n\t\tif (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n\t\t\tstate.tokenize = inText;\n\t\t\ttype = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n\t\t\treturn \"tag\";\n\t\t} else if (ch == \"=\") {\n\t\t\ttype = \"equals\";\n\t\t\treturn null;\n\t\t} else if (/[\\'\\\"]/.test(ch)) {\n\t\t\tstate.tokenize = inAttribute(ch);\n\t\t\treturn state.tokenize(stream, state);\n\t\t} else {\n\t\t\tstream.eatWhile(/[^\\s\\u00a0=<>\\\"\\'\\/?]/);\n\t\t\treturn \"word\";\n\t\t}\n\t}\n\n\tfunction inAttribute(quote) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.next() == quote) {\n\t\t\t\t\tstate.tokenize = inTag;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"string\";\n\t\t};\n\t}\n\n\tfunction inBlock(style, terminator) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.match(terminator)) {\n\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstream.next();\n\t\t\t}\n\t\t\treturn style;\n\t\t};\n\t}\n\t\n\tfunction doctype(depth) {\n\t\treturn function(stream, state) {\n\t\t\tvar ch;\n\t\t\twhile ((ch = stream.next()) != null) {\n\t\t\t\tif (ch == \"<\") {\n\t\t\t\t\tstate.tokenize = doctype(depth + 1);\n\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t} else if (ch == \">\") {\n\t\t\t\t\tif (depth == 1) {\n\t\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.tokenize = doctype(depth - 1);\n\t\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"meta\";\n\t\t};\n\t}\n\n\tvar curState = null, setStyle;\n\tfunction pass() {\n\t\tfor (var i = arguments.length - 1; i >= 0; i--)\n\t\t\tcurState.cc.push(arguments[i]);\n\t}\n\t\n\tfunction cont() {\n\t\tpass.apply(null, arguments);\n\t\treturn true;\n\t}\n\n\tfunction pushContext(tagName, startOfLine) {\n\t\tvar noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) \n\t\t\t|| (curState.context && curState.context.noIndent);\n\t\tcurState.context = {\n\t\t\tprev : curState.context,\n\t\t\ttagName : tagName,\n\t\t\tindent : curState.indented,\n\t\t\tstartOfLine : startOfLine,\n\t\t\tnoIndent : noIndent\n\t\t};\n\t}\n\t\n\tfunction popContext() {\n\t\tif (curState.context)\n\t\t\tcurState.context = curState.context.prev;\n\t}\n\n\tfunction element(type) {\n\t\tif (type == \"openTag\") {\n\t\t\tcurState.tagName = tagName;\n\t\t\treturn cont(attributes, endtag(curState.startOfLine));\n\t\t} else if (type == \"closeTag\") {\n\t\t\tvar err = false;\n\t\t\tif (curState.context) {\n\t\t\t\tif (curState.context.tagName != tagName) {\n\t\t\t\t\tif (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {\n\t\t\t\t\t\tpopContext();\n\t\t\t\t\t}\n\t\t\t\t\terr = !curState.context || curState.context.tagName != tagName;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(endclosetag(err));\n\t\t}\n\t\treturn cont();\n\t}\n\t\n\tfunction endtag(startOfLine) {\n\t\treturn function(type) {\n\t\t\tif (type == \"selfcloseTag\"\n\t\t\t\t\t|| (type == \"endTag\" && Kludges.autoSelfClosers\n\t\t\t\t\t\t\t.hasOwnProperty(curState.tagName\n\t\t\t\t\t\t\t\t\t.toLowerCase()))) {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\tpushContext(curState.tagName, startOfLine);\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\treturn cont();\n\t\t};\n\t}\n\t\n\tfunction endclosetag(err) {\n\t\treturn function(type) {\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tpopContext();\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(arguments.callee);\n\t\t};\n\t}\n\t\n\tfunction maybePopContext(nextTagName) {\n\t\tvar parentTagName;\n\t\twhile (true) {\n\t\t\tif (!curState.context) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparentTagName = curState.context.tagName.toLowerCase();\n\t\t\tif (!Kludges.contextGrabbers.hasOwnProperty(parentTagName)\n\t\t\t\t\t|| !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpopContext();\n\t\t}\n\t}\n\n\tfunction attributes(type) {\n\t\tif (type == \"word\") {\n\t\t\tsetStyle = \"attribute\";\n\t\t\treturn cont(attribute, attributes);\n\t\t}\n\t\tif (type == \"endTag\" || type == \"selfcloseTag\")\n\t\t\treturn pass();\n\t\tsetStyle = \"error\";\n\t\treturn cont(attributes);\n\t}\n\t\n\tfunction attribute(type) {\n\t\tif (type == \"equals\")\n\t\t\treturn cont(attvalue, attributes);\n\t\tif (!Kludges.allowMissing)\n\t\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfcloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvalue(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\tif (type == \"word\" && Kludges.allowUnquoted) {\n\t\t\tsetStyle = \"string\";\n\t\t\treturn cont();\n\t\t}\n\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfCloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvaluemaybe(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\telse\n\t\t\treturn pass();\n\t}\n\t\n\tfunction startState() {\n\t\treturn {\n\t\t\ttokenize : inText,\n\t\t\tcc : [],\n\t\t\tindented : 0,\n\t\t\tstartOfLine : true,\n\t\t\ttagName : null,\n\t\t\tcontext : null\n\t\t};\n\t}\n\t\n\tfunction token(stream, state) {\n\t\tif (stream.sol()) {\n\t\t\tstate.startOfLine = true;\n\t\t\tstate.indented = 0;\n\t\t}\n\t\t\n\t\tif (stream.eatSpace())\n\t\t\treturn null;\n\n\t\tsetStyle = type = tagName = null;\n\t\tvar style = state.tokenize(stream, state);\n\t\tstate.type = type;\n\t\tif ((style || type) && style != \"comment\") {\n\t\t\tcurState = state;\n\t\t\twhile (true) {\n\t\t\t\tvar comb = state.cc.pop() || element;\n\t\t\t\tif (comb(type || style))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstate.startOfLine = false;\n\t\treturn setStyle || style;\n\t}\n\n\treturn {\n\t\t/**\n\t\t * @memberOf emmet.xmlParser\n\t\t * @returns\n\t\t */\n\t\tparse: function(data, offset) {\n\t\t\toffset = offset || 0;\n\t\t\tvar state = startState();\n\t\t\tvar stream = require('stringStream').create(data);\n\t\t\tvar tokens = [];\n\t\t\twhile (!stream.eol()) {\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: token(stream, state),\n\t\t\t\t\tstart: stream.start + offset,\n\t\t\t\t\tend: stream.pos + offset\n\t\t\t\t});\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn tokens;\n\t\t}\t\t\n\t};\n});\n/*!\n * string_score.js: String Scoring Algorithm 0.1.10 \n *\n * http://joshaven.com/string_score\n * https://github.com/joshaven/string_score\n *\n * Copyright (C) 2009-2011 Joshaven Potter <yourtech@gmail.com>\n * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\n * MIT license: http://www.opensource.org/licenses/mit-license.php\n *\n * Date: Tue Mar 1 2011\n*/\n\n/**\n * Scores a string against another string.\n *  'Hello World'.score('he');     //=> 0.5931818181818181\n *  'Hello World'.score('Hello');  //=> 0.7318181818181818\n */\nemmet.define('string-score', function(require, _) {\n\treturn {\n\t\tscore: function(string, abbreviation, fuzziness) {\n\t\t\t// If the string is equal to the abbreviation, perfect match.\n\t\t\t  if (string == abbreviation) {return 1;}\n\t\t\t  //if it's not a perfect match and is empty return 0\n\t\t\t  if(abbreviation == \"\") {return 0;}\n\n\t\t\t  var total_character_score = 0,\n\t\t\t      abbreviation_length = abbreviation.length,\n\t\t\t      string_length = string.length,\n\t\t\t      start_of_string_bonus,\n\t\t\t      abbreviation_score,\n\t\t\t      fuzzies=1,\n\t\t\t      final_score;\n\t\t\t  \n\t\t\t  // Walk through abbreviation and add up scores.\n\t\t\t  for (var i = 0,\n\t\t\t         character_score/* = 0*/,\n\t\t\t         index_in_string/* = 0*/,\n\t\t\t         c/* = ''*/,\n\t\t\t         index_c_lowercase/* = 0*/,\n\t\t\t         index_c_uppercase/* = 0*/,\n\t\t\t         min_index/* = 0*/;\n\t\t\t     i < abbreviation_length;\n\t\t\t     ++i) {\n\t\t\t    \n\t\t\t    // Find the first case-insensitive match of a character.\n\t\t\t    c = abbreviation.charAt(i);\n\t\t\t    \n\t\t\t    index_c_lowercase = string.indexOf(c.toLowerCase());\n\t\t\t    index_c_uppercase = string.indexOf(c.toUpperCase());\n\t\t\t    min_index = Math.min(index_c_lowercase, index_c_uppercase);\n\t\t\t    index_in_string = (min_index > -1) ? min_index : Math.max(index_c_lowercase, index_c_uppercase);\n\t\t\t    \n\t\t\t    if (index_in_string === -1) { \n\t\t\t      if (fuzziness) {\n\t\t\t        fuzzies += 1-fuzziness;\n\t\t\t        continue;\n\t\t\t      } else {\n\t\t\t        return 0;\n\t\t\t      }\n\t\t\t    } else {\n\t\t\t      character_score = 0.1;\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Set base score for matching 'c'.\n\t\t\t    \n\t\t\t    // Same case bonus.\n\t\t\t    if (string[index_in_string] === c) { \n\t\t\t      character_score += 0.1; \n\t\t\t    }\n\t\t\t    \n\t\t\t    // Consecutive letter & start-of-string Bonus\n\t\t\t    if (index_in_string === 0) {\n\t\t\t      // Increase the score when matching first character of the remainder of the string\n\t\t\t      character_score += 0.6;\n\t\t\t      if (i === 0) {\n\t\t\t        // If match is the first character of the string\n\t\t\t        // & the first character of abbreviation, add a\n\t\t\t        // start-of-string match bonus.\n\t\t\t        start_of_string_bonus = 1; //true;\n\t\t\t      }\n\t\t\t    }\n\t\t\t    else {\n\t\t\t  // Acronym Bonus\n\t\t\t  // Weighing Logic: Typing the first character of an acronym is as if you\n\t\t\t  // preceded it with two perfect character matches.\n\t\t\t  if (string.charAt(index_in_string - 1) === ' ') {\n\t\t\t    character_score += 0.8; // * Math.min(index_in_string, 5); // Cap bonus at 0.4 * 5\n\t\t\t  }\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Left trim the already matched part of the string\n\t\t\t    // (forces sequential matching).\n\t\t\t    string = string.substring(index_in_string + 1, string_length);\n\t\t\t    \n\t\t\t    total_character_score += character_score;\n\t\t\t  } // end of for loop\n\t\t\t  \n\t\t\t  // Uncomment to weigh smaller words higher.\n\t\t\t  // return total_character_score / string_length;\n\t\t\t  \n\t\t\t  abbreviation_score = total_character_score / abbreviation_length;\n\t\t\t  //percentage_of_matched_string = abbreviation_length / string_length;\n\t\t\t  //word_score = abbreviation_score * percentage_of_matched_string;\n\t\t\t  \n\t\t\t  // Reduce penalty for longer strings.\n\t\t\t  //final_score = (word_score + abbreviation_score) / 2;\n\t\t\t  final_score = ((abbreviation_score * (abbreviation_length / string_length)) + abbreviation_score) / 2;\n\t\t\t  \n\t\t\t  final_score = final_score / fuzzies;\n\t\t\t  \n\t\t\t  if (start_of_string_bonus && (final_score + 0.15 < 1)) {\n\t\t\t    final_score += 0.15;\n\t\t\t  }\n\t\t\t  \n\t\t\t  return final_score;\n\t\t}\n\t};\n});/**\n * Utility module for Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('utils', function(require, _) {\n\t/** \n\t * Special token used as a placeholder for caret positions inside \n\t * generated output \n\t */\n\tvar caretPlaceholder = '${0}';\n\t\n\t/**\n\t * A simple string builder, optimized for faster text concatenation\n\t * @param {String} value Initial value\n\t */\n\tfunction StringBuilder(value) {\n\t\tthis._data = [];\n\t\tthis.length = 0;\n\t\t\n\t\tif (value)\n\t\t\tthis.append(value);\n\t}\n\t\n\tStringBuilder.prototype = {\n\t\t/**\n\t\t * Append string\n\t\t * @param {String} text\n\t\t */\n\t\tappend: function(text) {\n\t\t\tthis._data.push(text);\n\t\t\tthis.length += text.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this._data.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/** @memberOf utils */\n\t\treTag: /<\\/?[\\w:\\-]+(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*\\s*(\\/?)>$/,\n\t\t\n\t\t/**\n\t\t * Test if passed string ends with XHTML tag. This method is used for testing\n\t\t * '>' character: it belongs to tag or it's a part of abbreviation? \n\t\t * @param {String} str\n\t\t * @return {Boolean}\n\t\t */\n\t\tendsWithTag: function(str) {\n\t\t\treturn this.reTag.test(str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is a number\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisNumeric: function(ch) {\n\t\t\tif (typeof(ch) == 'string')\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t\n\t\t\treturn (ch && ch > 47 && ch < 58);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Trim whitespace from string\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrim: function(text) {\n\t\t\treturn (text || \"\").replace(/^\\s+|\\s+$/g, \"\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns newline character\n\t\t * @returns {String}\n\t\t */\n\t\tgetNewline: function() {\n\t\t\tvar res = require('resources');\n\t\t\tif (!res) {\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t\t\n\t\t\tvar nl = res.getVariable('newline');\n\t\t\treturn _.isString(nl) ? nl : '\\n';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new newline character that will be used in output\n\t\t * @param {String} str\n\t\t */\n\t\tsetNewline: function(str) {\n\t\t\tvar res = require('resources');\n\t\t\tres.setVariable('newline', str);\n\t\t\tres.setVariable('nl', str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split text into lines. Set <code>remove_empty</code> to true to filter\n\t\t * empty lines\n\t\t * @param {String} text Text to split\n\t\t * @param {Boolean} removeEmpty Remove empty lines from result\n\t\t * @return {Array}\n\t\t */\n\t\tsplitByLines: function(text, removeEmpty) {\n\t\t\t// IE fails to split string by regexp, \n\t\t\t// need to normalize newlines first\n\t\t\t// Also, Mozilla's Rhiho JS engine has a weird newline bug\n\t\t\tvar nl = this.getNewline();\n\t\t\tvar lines = (text || '')\n\t\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t\t.replace(/\\n\\r/g, '\\n')\n\t\t\t\t.replace(/\\r/g, '\\n')\n\t\t\t\t.replace(/\\n/g, nl)\n\t\t\t\t.split(nl);\n\t\t\t\n\t\t\tif (removeEmpty) {\n\t\t\t\tlines = _.filter(lines, function(line) {\n\t\t\t\t\treturn line.length && !!this.trim(line);\n\t\t\t\t}, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes newline character: replaces newlines in <code>text</code> \n\t\t * with newline defined in preferences\n\t\t * @param {String} text\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeNewline: function(text) {\n\t\t\treturn this.splitByLines(text).join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeats string <code>howMany</code> times\n\t\t * @param {String} str\n\t\t * @param {Number} how_many\n\t\t * @return {String}\n\t\t */\n\t\trepeatString: function(str, howMany) {\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < howMany; i++) \n\t\t\t\tresult.push(str);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of paddings that should be used to align passed string\n\t\t * @param {Array} strings\n\t\t * @returns {Array}\n\t\t */\n\t\tgetStringsPads: function(strings) {\n\t\t\tvar lengths = _.map(strings, function(s) {\n\t\t\t\treturn _.isString(s) ? s.length : +s;\n\t\t\t});\n\t\t\t\n\t\t\tvar max = _.max(lengths);\n\t\t\treturn _.map(lengths, function(l) {\n\t\t\t\tvar pad = max - l;\n\t\t\t\treturn pad ? this.repeatString(' ', pad) : '';\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indents text with padding\n\t\t * @param {String} text Text to indent\n\t\t * @param {String} pad Padding size (number) or padding itself (string)\n\t\t * @return {String}\n\t\t */\n\t\tpadString: function(text, pad) {\n\t\t\tvar padStr = (_.isNumber(pad)) \n\t\t\t\t? this.repeatString(require('resources').getVariable('indentation') || '\\t', pad) \n\t\t\t\t: pad;\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tvar nl = this.getNewline();\n\t\t\t\t\n\t\t\tresult.push(lines[0]);\n\t\t\tfor (var j = 1; j < lines.length; j++) \n\t\t\t\tresult.push(nl + padStr + lines[j]);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Pad string with zeroes\n\t\t * @param {String} str String to pad\n\t\t * @param {Number} pad Desired string length\n\t\t * @return {String}\n\t\t */\n\t\tzeroPadString: function(str, pad) {\n\t\t\tvar padding = '';\n\t\t\tvar il = str.length;\n\t\t\t\t\n\t\t\twhile (pad > il++) padding += '0';\n\t\t\treturn padding + str; \n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes padding at the beginning of each text's line\n\t\t * @param {String} text\n\t\t * @param {String} pad\n\t\t */\n\t\tunindentString: function(text, pad) {\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].search(pad) == 0)\n\t\t\t\t\tlines[i] = lines[i].substr(pad.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines.join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces unescaped symbols in <code>str</code>. For example, the '$' symbol\n\t\t * will be replaced in 'item$count', but not in 'item\\$count'.\n\t\t * @param {String} str Original string\n\t\t * @param {String} symbol Symbol to replace\n\t\t * @param {String} replace Symbol replacement. Might be a function that \n\t\t * returns new value\n\t\t * @return {String}\n\t\t */\n\t\treplaceUnescapedSymbol: function(str, symbol, replace) {\n\t\t\tvar i = 0;\n\t\t\tvar il = str.length;\n\t\t\tvar sl = symbol.length;\n\t\t\tvar matchCount = 0;\n\t\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tif (str.charAt(i) == '\\\\') {\n\t\t\t\t\t// escaped symbol, skip next character\n\t\t\t\t\ti += sl + 1;\n\t\t\t\t} else if (str.substr(i, sl) == symbol) {\n\t\t\t\t\t// have match\n\t\t\t\t\tvar curSl = sl;\n\t\t\t\t\tmatchCount++;\n\t\t\t\t\tvar newValue = replace;\n\t\t\t\t\tif (_.isFunction(replace)) {\n\t\t\t\t\t\tvar replaceData = replace(str, symbol, i, matchCount);\n\t\t\t\t\t\tif (replaceData) {\n\t\t\t\t\t\t\tcurSl = replaceData[0].length;\n\t\t\t\t\t\t\tnewValue = replaceData[1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === false) { // skip replacement\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstr = str.substring(0, i) + newValue + str.substring(i + curSl);\n\t\t\t\t\t// adjust indexes\n\t\t\t\t\til = str.length;\n\t\t\t\t\ti += newValue.length;\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn str;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace variables like ${var} in string\n\t\t * @param {String} str\n\t\t * @param {Object} vars Variable set (defaults to variables defined in \n\t\t * <code>snippets.json</code>) or variable resolver (<code>Function</code>)\n\t\t * @return {String}\n\t\t */\n\t\treplaceVariables: function(str, vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar resolver = _.isFunction(vars) ? vars : function(str, p1) {\n\t\t\t\treturn p1 in vars ? vars[p1] : null;\n\t\t\t};\n\t\t\t\n\t\t\tvar res = require('resources');\n\t\t\treturn require('tabStops').processText(str, {\n\t\t\t\tvariable: function(data) {\n\t\t\t\t\tvar newValue = resolver(data.token, data.name, data);\n\t\t\t\t\tif (newValue === null) {\n\t\t\t\t\t\t// try to find variable in resources\n\t\t\t\t\t\tnewValue = res.getVariable(data.name);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === null || _.isUndefined(newValue))\n\t\t\t\t\t\t// nothing found, return token itself\n\t\t\t\t\t\tnewValue = data.token;\n\t\t\t\t\treturn newValue;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces '$' character in string assuming it might be escaped with '\\'\n\t\t * @param {String} str String where character should be replaced\n\t\t * @param {String} value New value\n\t\t * @return {String}\n\t\t */\n\t\treplaceCounter: function(str, value, total) {\n\t\t\tvar symbol = '$';\n\t\t\t// in case we received strings from Java, convert the to native strings\n\t\t\tstr = String(str);\n\t\t\tvalue = String(value);\n\t\t\t\n\t\t\tif (/^\\-?\\d+$/.test(value)) {\n\t\t\t\tvalue = +value;\n\t\t\t}\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\treturn this.replaceUnescapedSymbol(str, symbol, function(str, symbol, pos, matchNum){\n\t\t\t\tif (str.charAt(pos + 1) == '{' || that.isNumeric(str.charAt(pos + 1)) ) {\n\t\t\t\t\t// it's a variable, skip it\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// replace sequense of $ symbols with padded number  \n\t\t\t\tvar j = pos + 1;\n\t\t\t\twhile(str.charAt(j) == '$' && str.charAt(j + 1) != '{') j++;\n\t\t\t\tvar pad = j - pos;\n\t\t\t\t\n\t\t\t\t// get counter base\n\t\t\t\tvar base = 0, decrement = false, m;\n\t\t\t\tif (m = str.substr(j).match(/^@(\\-?)(\\d*)/)) {\n\t\t\t\t\tj += m[0].length;\n\t\t\t\t\t\n\t\t\t\t\tif (m[1]) {\n\t\t\t\t\t\tdecrement = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbase = parseInt(m[2] || 1) - 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (decrement && total && _.isNumber(value)) {\n\t\t\t\t\tvalue = total - value + 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue += base;\n\t\t\t\t\n\t\t\t\treturn [str.substring(pos, j), that.zeroPadString(value + '', pad)];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if string matches against <code>reTag</code> regexp. This \n\t\t * function may be used to test if provided string contains HTML tags\n\t\t * @param {String} str\n\t\t * @returns {Boolean}\n\t\t */\n\t\tmatchesTag: function(str) {\n\t\t\treturn this.reTag.test(str || '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escapes special characters used in Emmet, like '$', '|', etc.\n\t\t * Use this method before passing to actions like \"Wrap with Abbreviation\"\n\t\t * to make sure that existing special characters won't be altered\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tescapeText: function(text) {\n\t\t\treturn text.replace(/([\\$\\\\])/g, '\\\\$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unescapes special characters used in Emmet, like '$', '|', etc.\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunescapeText: function(text) {\n\t\t\treturn text.replace(/\\\\(.)/g, '$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns caret placeholder\n\t\t * @returns {String}\n\t\t */\n\t\tgetCaretPlaceholder: function() {\n\t\t\treturn _.isFunction(caretPlaceholder) \n\t\t\t\t? caretPlaceholder.apply(this, arguments)\n\t\t\t\t: caretPlaceholder;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new representation for carets in generated output\n\t\t * @param {String} value New caret placeholder. Might be a \n\t\t * <code>Function</code>\n\t\t */\n\t\tsetCaretPlaceholder: function(value) {\n\t\t\tcaretPlaceholder = value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns line padding\n\t\t * @param {String} line\n\t\t * @return {String}\n\t\t */\n\t\tgetLinePadding: function(line) {\n\t\t\treturn (line.match(/^(\\s+)/) || [''])[0];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that returns padding of line of <code>pos</code>\n\t\t * position in <code>content</code>\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @returns {String}\n\t\t */\n\t\tgetLinePaddingFromPosition: function(content, pos) {\n\t\t\tvar lineRange = this.findNewlineBounds(content, pos);\n\t\t\treturn this.getLinePadding(lineRange.substring(content));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escape special regexp chars in string, making it usable for creating dynamic\n\t\t * regular expressions\n\t\t * @param {String} str\n\t\t * @return {String}\n\t\t */\n\t\tescapeForRegexp: function(str) {\n\t\t\tvar specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", \"g\"); // .*+?|()[]{}\\\n\t\t\treturn str.replace(specials, \"\\\\$&\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Make decimal number look good: convert it to fixed precision end remove\n\t\t * traling zeroes \n\t\t * @param {Number} num\n\t\t * @param {Number} fracion Fraction numbers (default is 2)\n\t\t * @return {String}\n\t\t */\n\t\tprettifyNumber: function(num, fraction) {\n\t\t\treturn num.toFixed(typeof fraction == 'undefined' ? 2 : fraction).replace(/\\.?0+$/, '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * A simple mutable string shim, optimized for faster text concatenation\n\t\t * @param {String} value Initial value\n\t\t * @returns {StringBuilder}\n\t\t */\n\t\tstringBuilder: function(value) {\n\t\t\treturn new StringBuilder(value);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace substring of <code>str</code> with <code>value</code>\n\t\t * @param {String} str String where to replace substring\n\t\t * @param {String} value New substring value\n\t\t * @param {Number} start Start index of substring to replace. May also\n\t\t * be a <code>Range</code> object: in this case, the <code>end</code>\n\t\t * argument is not required\n\t\t * @param {Number} end End index of substring to replace. If ommited, \n\t\t * <code>start</code> argument is used\n\t\t */\n\t\treplaceSubstring: function(str, value, start, end) {\n\t\t\tif (_.isObject(start) && 'end' in start) {\n\t\t\t\tend = start.end;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(end))\n\t\t\t\tend = start + end.length;\n\t\t\t\n\t\t\tif (_.isUndefined(end))\n\t\t\t\tend = start;\n\t\t\t\n\t\t\tif (start < 0 || start > str.length)\n\t\t\t\treturn str;\n\t\t\t\n\t\t\treturn str.substring(0, start) + value + str.substring(end);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Narrows down text range, adjusting selection to non-space characters\n\t\t * @param {String} text\n\t\t * @param {Number} start Starting range in <code>text</code> where \n\t\t * slection should be adjusted. Can also be any object that is accepted\n\t\t * by <code>Range</code> class\n\t\t * @return {Range}\n\t\t */\n\t\tnarrowToNonSpace: function(text, start, end) {\n\t\t\tvar range = require('range').create(start, end);\n\t\t\t\n\t\t\tvar reSpace = /[\\s\\n\\r\\u00a0]/;\n\t\t\t// narrow down selection until first non-space character\n\t\t\twhile (range.start < range.end) {\n\t\t\t\tif (!reSpace.test(text.charAt(range.start)))\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\trange.start++;\n\t\t\t}\n\t\t\t\n\t\t\twhile (range.end > range.start) {\n\t\t\t\trange.end--;\n\t\t\t\tif (!reSpace.test(text.charAt(range.end))) {\n\t\t\t\t\trange.end++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn range;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find start and end index of text line for <code>from</code> index\n\t\t * @param {String} text \n\t\t * @param {Number} from\n\t\t */\n\t\tfindNewlineBounds: function(text, from) {\n\t\t\tvar len = text.length,\n\t\t\t\tstart = 0,\n\t\t\t\tend = len - 1;\n\t\t\t\n\t\t\t// search left\n\t\t\tfor (var i = from - 1; i > 0; i--) {\n\t\t\t\tvar ch = text.charAt(i);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// search right\n\t\t\tfor (var j = from; j < len; j++) {\n\t\t\t\tvar ch = text.charAt(j);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tend = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn require('range').create(start, end - start);\n\t\t},\n\n\t\t/**\n\t\t * Deep merge of two or more objects. Taken from jQuery.extend()\n\t\t */\n\t\tdeepMerge: function() {\n\t\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\t\ttarget = arguments[0] || {},\n\t\t\t\ti = 1,\n\t\t\t\tlength = arguments.length;\n\n\n\t\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\t\tif (!_.isObject(target) && !_.isFunction(target)) {\n\t\t\t\ttarget = {};\n\t\t\t}\n\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t// Only deal with non-null/undefined values\n\t\t\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t\t\t// Extend the base object\n\t\t\t\t\tfor ( name in options ) {\n\t\t\t\t\t\tsrc = target[ name ];\n\t\t\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\t\tif ( target === copy ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif ( copy && ( _.isObject(copy) || (copyIsArray = _.isArray(copy)) ) ) {\n\t\t\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && _.isArray(src) ? src : [];\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && _.isObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[ name ] = this.deepMerge(clone, copy );\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the modified object\n\t\t\treturn target;\n\t\t}\n\t};\n});\n/**\n * Helper module to work with ranges\n * @constructor\n * @memberOf __rangeDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('range', function(require, _) {\n\tfunction cmp(a, b, op) {\n\t\tswitch (op) {\n\t\t\tcase 'eq':\n\t\t\tcase '==':\n\t\t\t\treturn a === b;\n\t\t\tcase 'lt':\n\t\t\tcase '<':\n\t\t\t\treturn a < b;\n\t\t\tcase 'lte':\n\t\t\tcase '<=':\n\t\t\t\treturn a <= b;\n\t\t\tcase 'gt':\n\t\t\tcase '>':\n\t\t\t\treturn a > b;\n\t\t\tcase 'gte':\n\t\t\tcase '>=':\n\t\t\t\treturn a >= b;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * @type Range\n\t * @constructor\n\t * @param {Object} start\n\t * @param {Number} len\n\t */\n\tfunction Range(start, len) {\n\t\tif (_.isObject(start) && 'start' in start) {\n\t\t\t// create range from object stub\n\t\t\tthis.start = Math.min(start.start, start.end);\n\t\t\tthis.end = Math.max(start.start, start.end);\n\t\t} else if (_.isArray(start)) {\n\t\t\tthis.start = start[0];\n\t\t\tthis.end = start[1];\n\t\t} else {\n\t\t\tlen = _.isString(len) ? len.length : +len;\n\t\t\tthis.start = start;\n\t\t\tthis.end = start + len;\n\t\t}\n\t}\n\t\n\tRange.prototype = {\n\t\tlength: function() {\n\t\t\treturn Math.abs(this.end - this.start);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns <code>true</code> if passed range is equals to current one\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\tequal: function(range) {\n\t\t\treturn this.cmp(range, 'eq', 'eq');\n//\t\t\treturn this.start === range.start && this.end === range.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shifts indexes position with passed <code>delat</code>\n\t\t * @param {Number} delta\n\t\t * @returns {Range} range itself\n\t\t */\n\t\tshift: function(delta) {\n\t\t\tthis.start += delta;\n\t\t\tthis.end += delta;\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if two ranges are overlapped\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\toverlap: function(range) {\n\t\t\treturn range.start <= this.end && range.end >= this.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds intersection of two ranges\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges does not overlap\n\t\t */\n\t\tintersection: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.max(range.start, this.start);\n\t\t\t\tvar end = Math.min(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the union of the thow ranges.\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges are not overlapped\n\t\t */\n\t\tunion: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.min(range.start, this.start);\n\t\t\t\tvar end = Math.max(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range.\n\t\t * @param {Number} loc\n\t\t */\n\t\tinside: function(loc) {\n\t\t\treturn this.cmp(loc, 'lte', 'gt');\n//\t\t\treturn this.start <= loc && this.end > loc;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range, but not equals bounds.\n\t\t * @param {Number} loc\n\t\t */\n\t\tcontains: function(loc) {\n\t\t\treturn this.cmp(loc, 'lt', 'gt');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current range completely includes specified one\n\t\t * @param {Range} r\n\t\t * @returns {Boolean} \n\t\t */\n\t\tinclude: function(r) {\n\t\t\treturn this.cmp(loc, 'lte', 'gte');\n//\t\t\treturn this.start <= r.start && this.end >= r.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Low-level comparision method\n\t\t * @param {Number} loc\n\t\t * @param {String} left Left comparison operator\n\t\t * @param {String} right Right comaprison operator\n\t\t */\n\t\tcmp: function(loc, left, right) {\n\t\t\tvar a, b;\n\t\t\tif (loc instanceof Range) {\n\t\t\t\ta = loc.start;\n\t\t\t\tb = loc.end;\n\t\t\t} else {\n\t\t\t\ta = b = loc;\n\t\t\t}\n\t\t\t\n\t\t\treturn cmp(this.start, a, left || '<=') && cmp(this.end, b, right || '>');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns substring of specified <code>str</code> for current range\n\t\t * @param {String} str\n\t\t * @returns {String}\n\t\t */\n\t\tsubstring: function(str) {\n\t\t\treturn this.length() > 0 \n\t\t\t\t? str.substring(this.start, this.end) \n\t\t\t\t: '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates copy of current range\n\t\t * @returns {Range}\n\t\t */\n\t\tclone: function() {\n\t\t\treturn new Range(this.start, this.length());\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {Array}\n\t\t */\n\t\ttoArray: function() {\n\t\t\treturn [this.start, this.end];\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn '{' + this.start + ', ' + this.length() + '}';\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new range object instance\n\t\t * @param {Object} start Range start or array with 'start' and 'end'\n\t\t * as two first indexes or object with 'start' and 'end' properties\n\t\t * @param {Number} len Range length or string to produce range from\n\t\t * @returns {Range}\n\t\t * @memberOf emmet.range\n\t\t */\n\t\tcreate: function(start, len) {\n\t\t\tif (_.isUndefined(start) || start === null)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (start instanceof Range)\n\t\t\t\treturn start;\n\t\t\t\n\t\t\tif (_.isObject(start) && 'start' in start && 'end' in start) {\n\t\t\t\tlen = start.end - start.start;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn new Range(start, len);\n\t\t},\n\t\t\n\t\t/**\n\t\t * <code>Range</code> object factory, the same as <code>this.create()</code>\n\t\t * but last argument represents end of range, not length\n\t\t * @returns {Range}\n\t\t */\n\t\tcreate2: function(start, end) {\n\t\t\tif (_.isNumber(start) && _.isNumber(end)) {\n\t\t\t\tend -= start;\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(start, end);\n\t\t}\n\t};\n});/**\n * Utility module that provides ordered storage of function handlers. \n * Many Emmet modules' functionality can be extended/overridden by custom\n * function. This modules provides unified storage of handler functions, their \n * management and execution\n * \n * @constructor\n * @memberOf __handlerListDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('handlerList', function(require, _) {\n\t/**\n\t * @type HandlerList\n\t * @constructor\n\t */\n\tfunction HandlerList() {\n\t\tthis._list = [];\n\t}\n\t\n\tHandlerList.prototype = {\n\t\t/**\n\t\t * Adds function handler\n\t\t * @param {Function} fn Handler\n\t\t * @param {Object} options Handler options. Possible values are:<br><br>\n\t\t * <b>order</b> : (<code>Number</code>) – order in handler list. Handlers\n\t\t * with higher order value will be executed earlier.\n\t\t */\n\t\tadd: function(fn, options) {\n\t\t\tthis._list.push(_.extend({order: 0}, options || {}, {fn: fn}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes handler from list\n\t\t * @param {Function} fn\n\t\t */\n\t\tremove: function(fn) {\n\t\t\tthis._list = _.without(this._list, _.find(this._list, function(item) {\n\t\t\t\treturn item.fn === fn;\n\t\t\t}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handlers. By default, handlers \n\t\t * with the same <code>order</code> option returned in reverse order, \n\t\t * i.e. the latter function was added into the handlers list, the higher \n\t\t * it will be in the returned array \n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.sortBy(this._list, 'order').reverse();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handler functions\n\t\t * @returns {Array}\n\t\t */\n\t\tlistFn: function() {\n\t\t\treturn _.pluck(this.list(), 'fn');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Executes handler functions in their designated order. If function\n\t\t * returns <code>skipVal</code>, meaning that function was unable to \n\t\t * handle passed <code>args</code>, the next function will be executed\n\t\t * and so on.\n\t\t * @param {Object} skipValue If function returns this value, execute \n\t\t * next handler.\n\t\t * @param {Array} args Arguments to pass to handler function\n\t\t * @returns {Boolean} Whether any of registered handlers performed\n\t\t * successfully  \n\t\t */\n\t\texec: function(skipValue, args) {\n\t\t\targs = args || [];\n\t\t\tvar result = null;\n\t\t\t_.find(this.list(), function(h) {\n\t\t\t\tresult = h.fn.apply(h, args);\n\t\t\t\tif (result !== skipValue)\n\t\t\t\t\treturn true;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Factory method that produces <code>HandlerList</code> instance\n\t\t * @returns {HandlerList}\n\t\t * @memberOf handlerList\n\t\t */\n\t\tcreate: function() {\n\t\t\treturn new HandlerList();\n\t\t}\n\t};\n});/**\n * Helper class for convenient token iteration\n */\nemmet.define('tokenIterator', function(require, _) {\n\t/**\n\t * @type TokenIterator\n\t * @param {Array} tokens\n\t * @type TokenIterator\n\t * @constructor\n\t */\n\tfunction TokenIterator(tokens) {\n\t\t/** @type Array */\n\t\tthis.tokens = tokens;\n\t\tthis._position = 0;\n\t\tthis.reset();\n\t}\n\t\n\tTokenIterator.prototype = {\n\t\tnext: function() {\n\t\t\tif (this.hasNext()) {\n\t\t\t\tvar token = this.tokens[++this._i];\n\t\t\t\tthis._position = token.start;\n\t\t\t\treturn token;\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\tcurrent: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\tposition: function() {\n\t\t\treturn this._position;\n\t\t},\n\t\t\n\t\thasNext: function() {\n\t\t\treturn this._i < this._il - 1;\n\t\t},\n\t\t\n\t\treset: function() {\n\t\t\tthis._i = -1;\n\t\t\tthis._il = this.tokens.length;\n\t\t},\n\t\t\n\t\titem: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\titemNext: function() {\n\t\t\treturn this.tokens[this._i + 1];\n\t\t},\n\t\t\n\t\titemPrev: function() {\n\t\t\treturn this.tokens[this._i - 1];\n\t\t},\n\t\t\n\t\tnextUntil: function(type, callback) {\n\t\t\tvar token;\n\t\t\tvar test = _.isString(type) \n\t\t\t\t? function(t){return t.type == type;} \n\t\t\t\t: type;\n\t\t\t\n\t\t\twhile (token = this.next()) {\n\t\t\t\tif (callback)\n\t\t\t\t\tcallback.call(this, token);\n\t\t\t\tif (test.call(this, token))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(tokens) {\n\t\t\treturn new TokenIterator(tokens);\n\t\t}\n\t};\n});/**\n * A trimmed version of CodeMirror's StringStream module for string parsing\n */\nemmet.define('stringStream', function(require, _) {\n\t/**\n\t * @type StringStream\n\t * @constructor\n\t * @param {String} string\n\t */\n\tfunction StringStream(string) {\n\t\tthis.pos = this.start = 0;\n\t\tthis.string = string;\n\t}\n\t\n\tStringStream.prototype = {\n\t\t/**\n\t\t * Returns true only if the stream is at the end of the line.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teol: function() {\n\t\t\treturn this.pos >= this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns true only if the stream is at the start of the line\n\t\t * @returns {Boolean}\n\t\t */\n\t\tsol: function() {\n\t\t\treturn this.pos == 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream without advancing it. \n\t\t * Will return <code>undefined</code> at the end of the line.\n\t\t * @returns {String}\n\t\t */\n\t\tpeek: function() {\n\t\t\treturn this.string.charAt(this.pos);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream and advances it.\n\t\t * Also returns <code>undefined</code> when no more characters are available.\n\t\t * @returns {String}\n\t\t */\n\t\tnext: function() {\n\t\t\tif (this.pos < this.string.length)\n\t\t\t\treturn this.string.charAt(this.pos++);\n\t\t},\n\t\t\n\t\t/**\n\t\t * match can be a character, a regular expression, or a function that\n\t\t * takes a character and returns a boolean. If the next character in the\n\t\t * stream 'matches' the given argument, it is consumed and returned.\n\t\t * Otherwise, undefined is returned.\n\t\t * @param {Object} match\n\t\t * @returns {String}\n\t\t */\n\t\teat: function(match) {\n\t\t\tvar ch = this.string.charAt(this.pos), ok;\n\t\t\tif (typeof match == \"string\")\n\t\t\t\tok = ch == match;\n\t\t\telse\n\t\t\t\tok = ch && (match.test ? match.test(ch) : match(ch));\n\t\t\t\n\t\t\tif (ok) {\n\t\t\t\t++this.pos;\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeatedly calls <code>eat</code> with the given argument, until it\n\t\t * fails. Returns <code>true</code> if any characters were eaten.\n\t\t * @param {Object} match\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatWhile: function(match) {\n\t\t\tvar start = this.pos;\n\t\t\twhile (this.eat(match)) {}\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shortcut for <code>eatWhile</code> when matching white-space.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatSpace: function() {\n\t\t\tvar start = this.pos;\n\t\t\twhile (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n\t\t\t\t++this.pos;\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Moves the position to the end of the line.\n\t\t */\n\t\tskipToEnd: function() {\n\t\t\tthis.pos = this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to the next occurrence of the given character, if found on the\n\t\t * current line (doesn't advance the stream if the character does not\n\t\t * occur on the line). Returns true if the character was found.\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tskipTo: function(ch) {\n\t\t\tvar found = this.string.indexOf(ch, this.pos);\n\t\t\tif (found > -1) {\n\t\t\t\tthis.pos = found;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to <code>close</code> character which is pair to <code>open</code>\n\t\t * character, considering possible pair nesting. This function is used\n\t\t * to consume pair of characters, like opening and closing braces\n\t\t * @param {String} open\n\t\t * @param {String} close\n\t\t * @returns {Boolean} Returns <code>true</code> if pair was successfully\n\t\t * consumed\n\t\t */\n\t\tskipToPair: function(open, close) {\n\t\t\tvar braceCount = 0, ch;\n\t\t\tvar pos = this.pos, len = this.string.length;\n\t\t\twhile (pos < len) {\n\t\t\t\tch = this.string.charAt(pos++);\n\t\t\t\tif (ch == open) {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == close) {\n\t\t\t\t\tbraceCount--;\n\t\t\t\t\tif (braceCount < 1) {\n\t\t\t\t\t\tthis.pos = pos;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Backs up the stream n characters. Backing it up further than the\n\t\t * start of the current token will cause things to break, so be careful.\n\t\t * @param {Number} n\n\t\t */\n\t\tbackUp : function(n) {\n\t\t\tthis.pos -= n;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Act like a multi-character <code>eat</code>—if <code>consume</code> is true or\n\t\t * not given—or a look-ahead that doesn't update the stream position—if\n\t\t * it is false. <code>pattern</code> can be either a string or a\n\t\t * regular expression starting with ^. When it is a string,\n\t\t * <code>caseInsensitive</code> can be set to true to make the match\n\t\t * case-insensitive. When successfully matching a regular expression,\n\t\t * the returned value will be the array returned by <code>match</code>,\n\t\t * in case you need to extract matched groups.\n\t\t * \n\t\t * @param {RegExp} pattern\n\t\t * @param {Boolean} consume\n\t\t * @param {Boolean} caseInsensitive\n\t\t * @returns\n\t\t */\n\t\tmatch: function(pattern, consume, caseInsensitive) {\n\t\t\tif (typeof pattern == \"string\") {\n\t\t\t\tvar cased = caseInsensitive\n\t\t\t\t\t? function(str) {return str.toLowerCase();}\n\t\t\t\t\t: function(str) {return str;};\n\t\t\t\t\n\t\t\t\tif (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\n\t\t\t\t\tif (consume !== false)\n\t\t\t\t\t\tthis.pos += pattern.length;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar match = this.string.slice(this.pos).match(pattern);\n\t\t\t\tif (match && consume !== false)\n\t\t\t\t\tthis.pos += match[0].length;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Get the string between the start of the current token and the \n\t\t * current stream position.\n\t\t * @returns {String}\n\t\t */\n\t\tcurrent: function() {\n\t\t\treturn this.string.slice(this.start, this.pos);\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(string) {\n\t\t\treturn new StringStream(string);\n\t\t}\n\t};\n});/**\n * Parsed resources (snippets, abbreviations, variables, etc.) for Emmet.\n * Contains convenient method to get access for snippets with respect of \n * inheritance. Also provides ability to store data in different vocabularies\n * ('system' and 'user') for fast and safe resource update\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('resources', function(require, _) {\n\tvar VOC_SYSTEM = 'system';\n\tvar VOC_USER = 'user';\n\t\n\tvar cache = {};\n\t\t\n\t/** Regular expression for XML tag matching */\n\tvar reTag = /^<(\\w+\\:?[\\w\\-]*)((?:\\s+[\\w\\:\\-]+\\s*=\\s*(['\"]).*?\\3)*)\\s*(\\/?)>/;\n\t\t\n\tvar systemSettings = {};\n\tvar userSettings = {};\n\t\n\t/** @type HandlerList List of registered abbreviation resolvers */\n\tvar resolvers = require('handlerList').create();\n\t\n\t/**\n\t * Normalizes caret plceholder in passed text: replaces | character with\n\t * default caret placeholder\n\t * @param {String} text\n\t * @returns {String}\n\t */\n\tfunction normalizeCaretPlaceholder(text) {\n\t\tvar utils = require('utils');\n\t\treturn utils.replaceUnescapedSymbol(text, '|', utils.getCaretPlaceholder());\n\t}\n\t\n\tfunction parseItem(name, value, type) {\n\t\tvalue = normalizeCaretPlaceholder(value);\n\t\t\n\t\tif (type == 'snippets') {\n\t\t\treturn require('elements').create('snippet', value);\n\t\t}\n\t\t\n\t\tif (type == 'abbreviations') {\n\t\t\treturn parseAbbreviation(name, value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Parses single abbreviation\n\t * @param {String} key Abbreviation name\n\t * @param {String} value Abbreviation value\n\t * @return {Object}\n\t */\n\tfunction parseAbbreviation(key, value) {\n\t\tkey = require('utils').trim(key);\n\t\tvar elements = require('elements');\n\t\tvar m;\n\t\tif (m = reTag.exec(value)) {\n\t\t\treturn elements.create('element', m[1], m[2], m[4] == '/');\n\t\t} else {\n\t\t\t// assume it's reference to another abbreviation\n\t\t\treturn elements.create('reference', value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Normalizes snippet key name for better fuzzy search\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction normalizeName(str) {\n\t\treturn str.replace(/:$/, '').replace(/:/g, '-');\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Sets new unparsed data for specified settings vocabulary\n\t\t * @param {Object} data\n\t\t * @param {String} type Vocabulary type ('system' or 'user')\n\t\t * @memberOf resources\n\t\t */\n\t\tsetVocabulary: function(data, type) {\n\t\t\tcache = {};\n\t\t\tif (type == VOC_SYSTEM)\n\t\t\t\tsystemSettings = data;\n\t\t\telse\n\t\t\t\tuserSettings = data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource vocabulary by its name\n\t\t * @param {String} name Vocabulary name ('system' or 'user')\n\t\t * @return {Object}\n\t\t */\n\t\tgetVocabulary: function(name) {\n\t\t\treturn name == VOC_SYSTEM ? systemSettings : userSettings;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource (abbreviation, snippet, etc.) matched for passed \n\t\t * abbreviation\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetMatchedResource: function(node, syntax) {\n\t\t\treturn resolvers.exec(null, _.toArray(arguments)) \n\t\t\t\t|| this.findSnippet(syntax, node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns variable value\n\t\t * @return {String}\n\t\t */\n\t\tgetVariable: function(name) {\n\t\t\treturn (this.getSection('variables') || {})[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Store runtime variable in user storage\n\t\t * @param {String} name Variable name\n\t\t * @param {String} value Variable value\n\t\t */\n\t\tsetVariable: function(name, value){\n\t\t\tvar voc = this.getVocabulary('user') || {};\n\t\t\tif (!('variables' in voc))\n\t\t\t\tvoc.variables = {};\n\t\t\t\t\n\t\t\tvoc.variables[name] = value;\n\t\t\tthis.setVocabulary(voc, 'user');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if there are resources for specified syntax\n\t\t * @param {String} syntax\n\t\t * @return {Boolean}\n\t\t */\n\t\thasSyntax: function(syntax) {\n\t\t\treturn syntax in this.getVocabulary(VOC_USER) \n\t\t\t\t|| syntax in this.getVocabulary(VOC_SYSTEM);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers new abbreviation resolver.\n\t\t * @param {Function} fn Abbreviation resolver which will receive \n\t\t * abbreviation as first argument and should return parsed abbreviation\n\t\t * object if abbreviation has handled successfully, <code>null</code>\n\t\t * otherwise\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddResolver: function(fn, options) {\n\t\t\tresolvers.add(fn, options);\n\t\t},\n\t\t\n\t\tremoveResolver: function(fn) {\n\t\t\tresolvers.remove(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actual section data, merged from both\n\t\t * system and user data\n\t\t * @param {String} name Section name (syntax)\n\t\t * @param {String} ...args Subsections\n\t\t * @returns\n\t\t */\n\t\tgetSection: function(name) {\n\t\t\tif (!name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (!(name in cache)) {\n\t\t\t\tcache[name] = require('utils').deepMerge({}, systemSettings[name], userSettings[name]);\n\t\t\t}\n\t\t\t\n\t\t\tvar data = cache[name], subsections = _.rest(arguments), key;\n\t\t\twhile (data && (key = subsections.shift())) {\n\t\t\t\tif (key in data) {\n\t\t\t\t\tdata = data[key];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a item inside top level sections (syntaxes)\n\t\t * with respect of `extends` attribute\n\t\t * @param {String} topSection Top section name (syntax)\n\t\t * @param {String} subsection Inner section name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindItem: function(topSection, subsection) {\n\t\t\tvar data = this.getSection(topSection);\n\t\t\twhile (data) {\n\t\t\t\tif (subsection in data)\n\t\t\t\t\treturn data[subsection];\n\t\t\t\t\n\t\t\t\tdata = this.getSection(data['extends']);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a snippet definition inside syntax section.\n\t\t * Definition is searched inside `snippets` and `abbreviations` \n\t\t * subsections  \n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindSnippet: function(syntax, name, memo) {\n\t\t\tif (!syntax || !name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tmemo = memo || [];\n\t\t\t\n\t\t\tvar names = [name];\n\t\t\t// create automatic aliases to properties with colons,\n\t\t\t// e.g. pos-a == pos:a\n\t\t\tif (~name.indexOf('-'))\n\t\t\t\tnames.push(name.replace(/\\-/g, ':'));\n\t\t\t\n\t\t\tvar data = this.getSection(syntax), matchedItem = null;\n\t\t\t_.find(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\tvar data = this.getSection(syntax, sectionName);\n\t\t\t\tif (data) {\n\t\t\t\t\treturn _.find(names, function(n) {\n\t\t\t\t\t\tif (data[n])\n\t\t\t\t\t\t\treturn matchedItem = parseItem(n, data[n], sectionName);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tmemo.push(syntax);\n\t\t\tif (!matchedItem && data['extends'] && !_.include(memo, data['extends'])) {\n\t\t\t\t// try to find item in parent syntax section\n\t\t\t\treturn this.findSnippet(data['extends'], name, memo);\n\t\t\t}\n\t\t\t\n\t\t\treturn matchedItem;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Performs fuzzy search of snippet definition\n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns\n\t\t */\n\t\tfuzzyFindSnippet: function(syntax, name, minScore) {\n\t\t\tminScore = minScore || 0.3;\n\t\t\t\n\t\t\tvar payload = this.getAllSnippets(syntax);\n\t\t\tvar sc = require('string-score');\n\t\t\t\n\t\t\tname = normalizeName(name);\n\t\t\tvar scores = _.map(payload, function(value, key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key,\n\t\t\t\t\tscore: sc.score(value.nk, name, 0.1)\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tvar result = _.last(_.sortBy(scores, 'score'));\n\t\t\tif (result && result.score >= minScore) {\n\t\t\t\tvar k = result.key;\n\t\t\t\treturn payload[k].parsedValue;\n//\t\t\t\treturn parseItem(k, payload[k].value, payload[k].type);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns plain dictionary of all available abbreviations and snippets\n\t\t * for specified syntax with respect of inheritance\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAllSnippets: function(syntax) {\n\t\t\tvar cacheKey = 'all-' + syntax;\n\t\t\tif (!cache[cacheKey]) {\n\t\t\t\tvar stack = [], sectionKey = syntax;\n\t\t\t\tvar memo = [];\n\t\t\t\t\n\t\t\t\tdo {\n\t\t\t\t\tvar section = this.getSection(sectionKey);\n\t\t\t\t\tif (!section)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\t_.each(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\t\t\tvar stackItem = {};\n\t\t\t\t\t\t_.each(section[sectionName] || null, function(v, k) {\n\t\t\t\t\t\t\tstackItem[k] = {\n\t\t\t\t\t\t\t\tnk: normalizeName(k),\n\t\t\t\t\t\t\t\tvalue: v,\n\t\t\t\t\t\t\t\tparsedValue: parseItem(k, v, sectionName),\n\t\t\t\t\t\t\t\ttype: sectionName\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tstack.push(stackItem);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmemo.push(sectionKey);\n\t\t\t\t\tsectionKey = section['extends'];\n\t\t\t\t} while (sectionKey && !_.include(memo, sectionKey));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcache[cacheKey] = _.extend.apply(_, stack.reverse());\n\t\t\t}\n\t\t\t\n\t\t\treturn cache[cacheKey];\n\t\t}\n\t};\n});/**\n * Module describes and performs Emmet actions. The actions themselves are\n * defined in <i>actions</i> folder\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('actions', function(require, _, zc) {\n\tvar actions = {};\n\t\n\t/**\n\t * “Humanizes” action name, makes it more readable for people\n\t * @param {String} name Action name (like 'expand_abbreviation')\n\t * @return Humanized name (like 'Expand Abbreviation')\n\t */\n\tfunction humanizeActionName(name) {\n\t\treturn require('utils').trim(name.charAt(0).toUpperCase() \n\t\t\t+ name.substring(1).replace(/_[a-z]/g, function(str) {\n\t\t\t\treturn ' ' + str.charAt(1).toUpperCase();\n\t\t\t}));\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Registers new action\n\t\t * @param {String} name Action name\n\t\t * @param {Function} fn Action function\n\t\t * @param {Object} options Custom action options:<br>\n\t\t * <b>label</b> : (<code>String</code>) – Human-readable action name. \n\t\t * May contain '/' symbols as submenu separators<br>\n\t\t * <b>hidden</b> : (<code>Boolean</code>) – Indicates whether action\n\t\t * should be displayed in menu (<code>getMenu()</code> method)\n\t\t * \n\t\t * @memberOf actions\n\t\t */\n\t\tadd: function(name, fn, options) {\n\t\t\tname = name.toLowerCase();\n\t\t\toptions = options || {};\n\t\t\tif (!options.label) {\n\t\t\t\toptions.label = humanizeActionName(name);\n\t\t\t}\n\t\t\t\n\t\t\tactions[name] = {\n\t\t\t\tname: name,\n\t\t\t\tfn: fn,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns action object\n\t\t * @param {String} name Action name\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn actions[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Runs Emmet action. For list of available actions and their\n\t\t * arguments see <i>actions</i> folder.\n\t\t * @param {String} name Action name \n\t\t * @param {Array} args Additional arguments. It may be array of arguments\n\t\t * or inline arguments. The first argument should be <code>IEmmetEditor</code> instance\n\t\t * @returns {Boolean} Status of performed operation, <code>true</code>\n\t\t * means action was performed successfully.\n\t\t * @example\n\t\t * emmet.require('actions').run('expand_abbreviation', editor);  \n\t\t * emmet.require('actions').run('wrap_with_abbreviation', [editor, 'div']);  \n\t\t */\n\t\trun: function(name, args) {\n\t\t\tif (!_.isArray(args)) {\n\t\t\t\targs = _.rest(arguments);\n\t\t\t}\n\t\t\t\n\t\t\tvar action = this.get(name);\n\t\t\tif (action) {\n\t\t\t\treturn action.fn.apply(emmet, args);\n\t\t\t} else {\n\t\t\t\temmet.log('Action \"%s\" is not defined', name);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as object\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAll: function() {\n\t\t\treturn actions;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as array\n\t\t * @returns {Array}\n\t\t */\n\t\tgetList: function() {\n\t\t\treturn _.values(this.getAll());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actions list as structured menu. If action has <i>label</i>,\n\t\t * it will be splitted by '/' symbol into submenus (for example: \n\t\t * CSS/Reflect Value) and grouped with other items\n\t\t * @param {Array} skipActions List of action identifiers that should be \n\t\t * skipped from menu\n\t\t * @returns {Array}\n\t\t */\n\t\tgetMenu: function(skipActions) {\n\t\t\tvar result = [];\n\t\t\tskipActions = skipActions || [];\n\t\t\t_.each(this.getList(), function(action) {\n\t\t\t\tif (action.options.hidden || _.include(skipActions, action.name))\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tvar actionName = humanizeActionName(action.name);\n\t\t\t\tvar ctx = result;\n\t\t\t\tif (action.options.label) {\n\t\t\t\t\tvar parts = action.options.label.split('/');\n\t\t\t\t\tactionName = parts.pop();\n\t\t\t\t\t\n\t\t\t\t\t// create submenus, if needed\n\t\t\t\t\tvar menuName, submenu;\n\t\t\t\t\twhile (menuName = parts.shift()) {\n\t\t\t\t\t\tsubmenu = _.find(ctx, function(item) {\n\t\t\t\t\t\t\treturn item.type == 'submenu' && item.name == menuName;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!submenu) {\n\t\t\t\t\t\t\tsubmenu = {\n\t\t\t\t\t\t\t\tname: menuName,\n\t\t\t\t\t\t\t\ttype: 'submenu',\n\t\t\t\t\t\t\t\titems: []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tctx.push(submenu);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tctx = submenu.items;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.push({\n\t\t\t\t\ttype: 'action',\n\t\t\t\t\tname: action.name,\n\t\t\t\t\tlabel: actionName\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Returns action name associated with menu item title\n\t\t * @param {String} title\n\t\t * @returns {String}\n\t\t */\n\t\tgetActionNameForMenuTitle: function(title, menu) {\n\t\t\tvar item = null;\n\t\t\t_.find(menu || this.getMenu(), function(val) {\n\t\t\t\tif (val.type == 'action') {\n\t\t\t\t\tif (val.label == title || val.name == title) {\n\t\t\t\t\t\treturn item = val.name;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn item = this.getActionNameForMenuTitle(title, val.items);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn item || null;\n\t\t}\n\t};\n});/**\n * Output profile module.\n * Profile defines how XHTML output data should look like\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('profile', function(require, _) {\n\tvar profiles = {};\n\t\n\tvar defaultProfile = {\n\t\ttag_case: 'asis',\n\t\tattr_case: 'asis',\n\t\tattr_quotes: 'double',\n\t\t\n\t\t// each tag on new line\n\t\ttag_nl: 'decide',\n\t\t\n\t\t// with tag_nl === true, defines if leaf node (e.g. node with no children)\n\t\t// should have formatted line breaks\n\t\ttag_nl_leaf: false,\n\t\t\n\t\tplace_cursor: true,\n\t\t\n\t\t// indent tags\n\t\tindent: true,\n\t\t\n\t\t// how many inline elements should be to force line break \n\t\t// (set to 0 to disable)\n\t\tinline_break: 3,\n\t\t\n\t\t// use self-closing style for writing empty elements, e.g. <br /> or <br>\n\t\tself_closing_tag: 'xhtml',\n\t\t\n\t\t// Profile-level output filters, re-defines syntax filters \n\t\tfilters: '',\n\t\t\n\t\t// Additional filters applied to abbreviation.\n\t\t// Unlike \"filters\", this preference doesn't override default filters\n\t\t// but add the instead every time given profile is chosen\n\t\textraFilters: ''\n\t};\n\t\n\t/**\n\t * @constructor\n\t * @type OutputProfile\n\t * @param {Object} options\n\t */\n\tfunction OutputProfile(options) {\n\t\t_.extend(this, defaultProfile, options);\n\t}\n\t\n\tOutputProfile.prototype = {\n\t\t/**\n\t\t * Transforms tag name case depending on current profile settings\n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\ttagName: function(name) {\n\t\t\treturn stringCase(name, this.tag_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Transforms attribute name case depending on current profile settings \n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\tattributeName: function(name) {\n\t\t\treturn stringCase(name, this.attr_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns quote character for current profile\n\t\t * @returns {String}\n\t\t */\n\t\tattributeQuote: function() {\n\t\t\treturn this.attr_quotes == 'single' ? \"'\" : '\"';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns self-closing tag symbol for current profile\n\t\t * @param {String} param\n\t\t * @returns {String}\n\t\t */\n\t\tselfClosing: function(param) {\n\t\t\tif (this.self_closing_tag == 'xhtml')\n\t\t\t\treturn ' /';\n\t\t\t\n\t\t\tif (this.self_closing_tag === true)\n\t\t\t\treturn '/';\n\t\t\t\n\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns cursor token based on current profile settings\n\t\t * @returns {String}\n\t\t */\n\t\tcursor: function() {\n\t\t\treturn this.place_cursor ? require('utils').getCaretPlaceholder() : '';\n\t\t}\n\t};\n\t\n\t/**\n\t * Helper function that converts string case depending on \n\t * <code>caseValue</code> \n\t * @param {String} str String to transform\n\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t * <i>upper</i> and <i>leave</i>\n\t * @returns {String}\n\t */\n\tfunction stringCase(str, caseValue) {\n\t\tswitch (String(caseValue || '').toLowerCase()) {\n\t\t\tcase 'lower':\n\t\t\t\treturn str.toLowerCase();\n\t\t\tcase 'upper':\n\t\t\t\treturn str.toUpperCase();\n\t\t}\n\t\t\n\t\treturn str;\n\t}\n\t\n\t/**\n\t * Creates new output profile\n\t * @param {String} name Profile name\n\t * @param {Object} options Profile options\n\t */\n\tfunction createProfile(name, options) {\n\t\treturn profiles[name.toLowerCase()] = new OutputProfile(options);\n\t}\n\t\n\tfunction createDefaultProfiles() {\n\t\tcreateProfile('xhtml');\n\t\tcreateProfile('html', {self_closing_tag: false});\n\t\tcreateProfile('xml', {self_closing_tag: true, tag_nl: true});\n\t\tcreateProfile('plain', {tag_nl: false, indent: false, place_cursor: false});\n\t\tcreateProfile('line', {tag_nl: false, indent: false, extraFilters: 's'});\n\t}\n\t\n\tcreateDefaultProfiles();\n\t\n\treturn  {\n\t\t/**\n\t\t * Creates new output profile and adds it into internal dictionary\n\t\t * @param {String} name Profile name\n\t\t * @param {Object} options Profile options\n\t\t * @memberOf emmet.profile\n\t\t * @returns {Object} New profile\n\t\t */\n\t\tcreate: function(name, options) {\n\t\t\tif (arguments.length == 2)\n\t\t\t\treturn createProfile(name, options);\n\t\t\telse\n\t\t\t\t// create profile object only\n\t\t\t\treturn new OutputProfile(_.defaults(name || {}, defaultProfile));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns profile by its name. If profile wasn't found, returns\n\t\t * 'plain' profile\n\t\t * @param {String} name Profile name. Might be profile itself\n\t\t * @param {String} syntax. Optional. Current editor syntax. If defined,\n\t\t * profile is searched in resources first, then in predefined profiles\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name, syntax) {\n\t\t\tif (!name && syntax) {\n\t\t\t\t// search in user resources first\n\t\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\t\tif (profile) {\n\t\t\t\t\tname = profile;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!name) {\n\t\t\t\treturn profiles.plain;\n\t\t\t}\n\t\t\t\n\t\t\tif (name instanceof OutputProfile) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(name) && name.toLowerCase() in profiles) {\n\t\t\t\treturn profiles[name.toLowerCase()];\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes profile with specified name\n\t\t * @param {String} name Profile name\n\t\t */\n\t\tremove: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\tif (name in profiles)\n\t\t\t\tdelete profiles[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets all user-defined profiles\n\t\t */\n\t\treset: function() {\n\t\t\tprofiles = {};\n\t\t\tcreateDefaultProfiles();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that converts string case depending on \n\t\t * <code>caseValue</code> \n\t\t * @param {String} str String to transform\n\t\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t\t * <i>upper</i> and <i>leave</i>\n\t\t * @returns {String}\n\t\t */\n\t\tstringCase: stringCase\n\t};\n});/**\n * Utility module used to prepare text for pasting into back-end editor\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('editorUtils', function(require, _) {\n\treturn  {\n\t\t/**\n\t\t * Check if cursor is placed inside XHTML tag\n\t\t * @param {String} html Contents of the document\n\t\t * @param {Number} caretPos Current caret position inside tag\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInsideTag: function(html, caretPos) {\n\t\t\tvar reTag = /^<\\/?\\w[\\w\\:\\-]*.*?>/;\n\t\t\t\n\t\t\t// search left to find opening brace\n\t\t\tvar pos = caretPos;\n\t\t\twhile (pos > -1) {\n\t\t\t\tif (html.charAt(pos) == '<') \n\t\t\t\t\tbreak;\n\t\t\t\tpos--;\n\t\t\t}\n\t\t\t\n\t\t\tif (pos != -1) {\n\t\t\t\tvar m = reTag.exec(html.substring(pos));\n\t\t\t\tif (m && caretPos > pos && caretPos < pos + m[0].length)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sanitizes incoming editor data and provides default values for\n\t\t * output-specific info\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {String} syntax\n\t\t * @param {String} profile\n\t\t */\n\t\toutputInfo: function(editor, syntax, profile) {\n\t\t\t// most of this code makes sense for Java/Rhino environment\n\t\t\t// because string that comes from Java are not actually JS string\n\t\t\t// but Java String object so the have to be explicitly converted\n\t\t\t// to native string\n\t\t\tprofile = profile || editor.getProfileName();\n\t\t\treturn  {\n\t\t\t\t/** @memberOf outputInfo */\n\t\t\t\tsyntax: String(syntax || editor.getSyntax()),\n\t\t\t\tprofile: profile || null,\n\t\t\t\tcontent: String(editor.getContent())\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unindent content, thus preparing text for tag wrapping\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunindent: function(editor, text) {\n\t\t\treturn require('utils').unindentString(text, this.getCurrentLinePadding(editor));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns padding of current editor's line\n\t\t * @param {IEmmetEditor} Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tgetCurrentLinePadding: function(editor) {\n\t\t\treturn require('utils').getLinePadding(editor.getCurrentLine());\n\t\t}\n\t};\n});\n/**\n * Utility methods for Emmet actions\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('actionUtils', function(require, _) {\n\treturn {\n\t\tmimeTypes: {\n\t\t\t'gif' : 'image/gif',\n\t\t\t'png' : 'image/png',\n\t\t\t'jpg' : 'image/jpeg',\n\t\t\t'jpeg': 'image/jpeg',\n\t\t\t'svg' : 'image/svg+xml',\n\t\t\t'html': 'text/html',\n\t\t\t'htm' : 'text/html'\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts abbreviations from text stream, starting from the end\n\t\t * @param {String} str\n\t\t * @return {String} Abbreviation or empty string\n\t\t * @memberOf emmet.actionUtils\n\t\t */\n\t\textractAbbreviation: function(str) {\n\t\t\tvar curOffset = str.length;\n\t\t\tvar startIndex = -1;\n\t\t\tvar groupCount = 0;\n\t\t\tvar braceCount = 0;\n\t\t\tvar textCount = 0;\n\t\t\t\n\t\t\tvar utils = require('utils');\n\t\t\tvar parser = require('abbreviationParser');\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t\tcurOffset--;\n\t\t\t\tif (curOffset < 0) {\n\t\t\t\t\t// moved to the beginning of the line\n\t\t\t\t\tstartIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar ch = str.charAt(curOffset);\n\t\t\t\t\n\t\t\t\tif (ch == ']') {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == '[') {\n\t\t\t\t\tif (!braceCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbraceCount--;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\ttextCount++;\n\t\t\t\t} else if (ch == '{') {\n\t\t\t\t\tif (!textCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttextCount--;\n\t\t\t\t} else if (ch == ')') {\n\t\t\t\t\tgroupCount++;\n\t\t\t\t} else if (ch == '(') {\n\t\t\t\t\tif (!groupCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tgroupCount--;\n\t\t\t\t} else {\n\t\t\t\t\tif (braceCount || textCount) \n\t\t\t\t\t\t// respect all characters inside attribute sets or text nodes\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse if (!parser.isAllowedChar(ch) || (ch == '>' && utils.endsWithTag(str.substring(0, curOffset + 1)))) {\n\t\t\t\t\t\t// found stop symbol\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (startIndex != -1 && !textCount && !braceCount && !groupCount) \n\t\t\t\t// found something, remove some invalid symbols from the \n\t\t\t\t// beginning and return abbreviation\n\t\t\t\treturn str.substring(startIndex).replace(/^[\\*\\+\\>\\^]+/, '');\n\t\t\telse\n\t\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Gets image size from image byte stream.\n\t\t * @author http://romeda.org/rePublish/\n\t\t * @param {String} stream Image byte stream (use <code>IEmmetFile.read()</code>)\n\t\t * @return {Object} Object with <code>width</code> and <code>height</code> properties\n\t\t */\n\t\tgetImageSize: function(stream) {\n\t\t\tvar pngMagicNum = \"\\211PNG\\r\\n\\032\\n\",\n\t\t\t\tjpgMagicNum = \"\\377\\330\",\n\t\t\t\tgifMagicNum = \"GIF8\",\n\t\t\t\tnextByte = function() {\n\t\t\t\t\treturn stream.charCodeAt(pos++);\n\t\t\t\t};\n\t\t\n\t\t\tif (stream.substr(0, 8) === pngMagicNum) {\n\t\t\t\t// PNG. Easy peasy.\n\t\t\t\tvar pos = stream.indexOf('IHDR') + 4;\n\t\t\t\n\t\t\t\treturn { width:  (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte(),\n\t\t\t\t\t\t height: (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte() };\n\t\t\t\n\t\t\t} else if (stream.substr(0, 4) === gifMagicNum) {\n\t\t\t\tpos = 6;\n\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\twidth:  nextByte() | (nextByte() << 8),\n\t\t\t\t\theight: nextByte() | (nextByte() << 8)\n\t\t\t\t};\n\t\t\t\n\t\t\t} else if (stream.substr(0, 2) === jpgMagicNum) {\n\t\t\t\tpos = 2;\n\t\t\t\n\t\t\t\tvar l = stream.length;\n\t\t\t\twhile (pos < l) {\n\t\t\t\t\tif (nextByte() != 0xFF) return;\n\t\t\t\t\n\t\t\t\t\tvar marker = nextByte();\n\t\t\t\t\tif (marker == 0xDA) break;\n\t\t\t\t\n\t\t\t\t\tvar size = (nextByte() << 8) | nextByte();\n\t\t\t\t\n\t\t\t\t\tif (marker >= 0xC0 && marker <= 0xCF && !(marker & 0x4) && !(marker & 0x8)) {\n\t\t\t\t\t\tpos += 1;\n\t\t\t\t\t\treturn { height:  (nextByte() << 8) | nextByte(),\n\t\t\t\t\t\t\t\t width: (nextByte() << 8) | nextByte() };\n\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos += size - 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Captures context XHTML element from editor under current caret position.\n\t\t * This node can be used as a helper for abbreviation extraction\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Object}\n\t\t */\n\t\tcaptureContext: function(editor) {\n\t\t\tvar allowedSyntaxes = {'html': 1, 'xml': 1, 'xsl': 1};\n\t\t\tvar syntax = String(editor.getSyntax());\n\t\t\tif (syntax in allowedSyntaxes) {\n\t\t\t\tvar content = String(editor.getContent());\n\t\t\t\tvar tag = require('htmlMatcher').find(content, editor.getCaretPos());\n\t\t\t\t\n\t\t\t\tif (tag && tag.type == 'tag') {\n\t\t\t\t\tvar startTag = tag.open;\n\t\t\t\t\tvar contextNode = {\n\t\t\t\t\t\tname: startTag.name,\n\t\t\t\t\t\tattributes: []\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// parse attributes\n\t\t\t\t\tvar tagTree = require('xmlEditTree').parse(startTag.range.substring(content));\n\t\t\t\t\tif (tagTree) {\n\t\t\t\t\t\tcontextNode.attributes = _.map(tagTree.getAll(), function(item) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tname: item.name(),\n\t\t\t\t\t\t\t\tvalue: item.value()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn contextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find expression bounds in current editor at caret position. \n\t\t * On each character a <code>fn</code> function will be called and must \n\t\t * return <code>true</code> if current character meets requirements, \n\t\t * <code>false</code> otherwise\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Function} fn Function to test each character of expression\n\t\t * @return {Range}\n\t\t */\n\t\tfindExpressionBounds: function(editor, fn) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar il = content.length;\n\t\t\tvar exprStart = editor.getCaretPos() - 1;\n\t\t\tvar exprEnd = exprStart + 1;\n\t\t\t\t\n\t\t\t// start by searching left\n\t\t\twhile (exprStart >= 0 && fn(content.charAt(exprStart), exprStart, content)) exprStart--;\n\t\t\t\n\t\t\t// then search right\n\t\t\twhile (exprEnd < il && fn(content.charAt(exprEnd), exprEnd, content)) exprEnd++;\n\t\t\t\n\t\t\tif (exprEnd > exprStart) {\n\t\t\t\treturn require('range').create([++exprStart, exprEnd]);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Object} data\n\t\t * @returns {Boolean}\n\t\t */\n\t\tcompoundUpdate: function(editor, data) {\n\t\t\tif (data) {\n\t\t\t\tvar sel = editor.getSelectionRange();\n\t\t\t\teditor.replaceContent(data.data, data.start, data.end, true);\n\t\t\t\teditor.createSelection(data.caret, data.caret + sel.end - sel.start);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common syntax detection method for editors that doesn’t provide any\n\t\t * info about current syntax scope. \n\t\t * @param {IEmmetEditor} editor Current editor\n\t\t * @param {String} hint Any syntax hint that editor can provide \n\t\t * for syntax detection. Default is 'html'\n\t\t * @returns {String} \n\t\t */\n\t\tdetectSyntax: function(editor, hint) {\n\t\t\tvar syntax = hint || 'html';\n\t\t\t\n\t\t\tif (!require('resources').hasSyntax(syntax)) {\n\t\t\t\tsyntax = 'html';\n\t\t\t}\n\t\t\t\n\t\t\tif (syntax == 'html' && (this.isStyle(editor) || this.isInlineCSS(editor))) {\n\t\t\t\tsyntax = 'css';\n\t\t\t}\n\t\t\t\n\t\t\treturn syntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common method for detecting output profile\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {String}\n\t\t */\n\t\tdetectProfile: function(editor) {\n\t\t\tvar syntax = editor.getSyntax();\n\t\t\t\n\t\t\t// get profile from syntax definition\n\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\t\n\t\t\tswitch(syntax) {\n\t\t\t\tcase 'xml':\n\t\t\t\tcase 'xsl':\n\t\t\t\t\treturn 'xml';\n\t\t\t\tcase 'css':\n\t\t\t\t\tif (this.isInlineCSS(editor)) {\n\t\t\t\t\t\treturn 'line';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html':\n\t\t\t\t\tvar profile = require('resources').getVariable('profile');\n\t\t\t\t\tif (!profile) { // no forced profile, guess from content\n\t\t\t\t\t\t// html or xhtml?\n\t\t\t\t\t\tprofile = this.isXHTML(editor) ? 'xhtml': 'html';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn profile;\n\t\t\t}\n\n\t\t\treturn 'xhtml';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Tries to detect if current document is XHTML one.\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisXHTML: function(editor) {\n\t\t\treturn editor.getContent().search(/<!DOCTYPE[^>]+XHTML/i) != -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside &lt;style&gt; tag\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns\n\t\t */\n\t\tisStyle: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(content, caretPos);\n\t\t\treturn tag && tag.open.name.toLowerCase() == 'style' \n\t\t\t\t&& tag.innerRange.cmp(caretPos, 'lte', 'gte');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside \"style\" attribute of HTML\n\t\t * element\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineCSS: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tree = require('xmlEditTree').parseFromPosition(content, caretPos, true);\n            if (tree) {\n                var attr = tree.itemFromPosition(caretPos, true);\n                return attr && attr.name().toLowerCase() == 'style' \n                \t&& attr.valueRange(true).cmp(caretPos, 'lte', 'gte');\n            }\n            \n            return false;\n\t\t}\n\t};\n});/**\n * Utility functions to work with <code>AbbreviationNode</code> as HTML element\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationUtils', function(require, _) {\n\treturn {\n\t\t/**\n\t\t * Check if passed abbreviation node has matched snippet resource\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t * @memberOf abbreviationUtils\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is unary (no closing tag)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisUnary: function(node) {\n\t\t\tif (node.children.length || node._text || this.isSnippet(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tvar r = node.matchedResource();\n\t\t\treturn r && r.is_empty;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is inline-level (like &lt;strong&gt;, &lt;img&gt;)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInline: function(node) {\n\t\t\treturn node.isTextNode() \n\t\t\t\t|| !node.name() \n\t\t\t\t|| require('tagName').isInlineLevel(node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is block-level\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisBlock: function(node) {\n\t\t\treturn this.isSnippet(node) || !this.isInline(node);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if given node is a snippet\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function tests if passed node content contains HTML tags. \n\t\t * This function is mostly used for output formatting\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasTagsInContent: function(node) {\n\t\t\treturn require('utils').matchesTag(node.content);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if current element contains block-level children\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\thasBlockChildren: function(node) {\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \n\t\t\t\t|| _.any(node.children, function(child) {\n\t\t\t\t\treturn this.isBlock(child);\n\t\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Utility function that inserts content instead of <code>${child}</code>\n\t\t * variables on <code>text</code>\n\t\t * @param {String} text Text where child content should be inserted\n\t\t * @param {String} childContent Content to insert\n\t\t * @param {Object} options\n\t\t * @returns {String\n\t\t */\n\t\tinsertChildContent: function(text, childContent, options) {\n\t\t\toptions = _.extend({\n\t\t\t\tkeepVariable: true,\n\t\t\t\tappendIfNoChild: true\n\t\t\t}, options || {});\n\t\t\t\n\t\t\tvar childVariableReplaced = false;\n\t\t\tvar utils = require('utils');\n\t\t\ttext = utils.replaceVariables(text, function(variable, name, data) {\n\t\t\t\tvar output = variable;\n\t\t\t\tif (name == 'child') {\n\t\t\t\t\t// add correct indentation\n\t\t\t\t\toutput = utils.padString(childContent, utils.getLinePaddingFromPosition(text, data.start));\n\t\t\t\t\tchildVariableReplaced = true;\n\t\t\t\t\tif (options.keepVariable)\n\t\t\t\t\t\toutput += variable;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn output;\n\t\t\t});\n\t\t\t\n\t\t\tif (!childVariableReplaced && options.appendIfNoChild) {\n\t\t\t\ttext += childContent;\n\t\t\t}\n\t\t\t\n\t\t\treturn text;\n\t\t}\n\t};\n});/**\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.define('base64', function(require, _) {\n\tvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\t\n\treturn {\n\t\t/**\n\t\t * Encodes data using base64 algorithm\n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} input\n\t\t * @returns {String}\n\t\t * @memberOf emmet.base64\n\t\t */\n\t\tencode : function(input) {\n\t\t\tvar output = [];\n\t\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4, cdp1, cdp2, cdp3;\n\t\t\tvar i = 0, il = input.length, b64 = chars;\n\n\t\t\twhile (i < il) {\n\n\t\t\t\tcdp1 = input.charCodeAt(i++);\n\t\t\t\tcdp2 = input.charCodeAt(i++);\n\t\t\t\tcdp3 = input.charCodeAt(i++);\n\n\t\t\t\tchr1 = cdp1 & 0xff;\n\t\t\t\tchr2 = cdp2 & 0xff;\n\t\t\t\tchr3 = cdp3 & 0xff;\n\n\t\t\t\tenc1 = chr1 >> 2;\n\t\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\t\tenc4 = chr3 & 63;\n\n\t\t\t\tif (isNaN(cdp2)) {\n\t\t\t\t\tenc3 = enc4 = 64;\n\t\t\t\t} else if (isNaN(cdp3)) {\n\t\t\t\t\tenc4 = 64;\n\t\t\t\t}\n\n\t\t\t\toutput.push(b64.charAt(enc1) + b64.charAt(enc2) + b64.charAt(enc3) + b64.charAt(enc4));\n\t\t\t}\n\n\t\t\treturn output.join('');\n\t\t},\n\n\t\t/**\n\t\t * Decodes string using MIME base64 algorithm\n\t\t * \n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} data\n\t\t * @return {String}\n\t\t */\n\t\tdecode : function(data) {\n\t\t\tvar o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, tmpArr = [];\n\t\t\tvar b64 = chars, il = data.length;\n\n\t\t\tif (!data) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata += '';\n\n\t\t\tdo { // unpack four hexets into three octets using index points in b64\n\t\t\t\th1 = b64.indexOf(data.charAt(i++));\n\t\t\t\th2 = b64.indexOf(data.charAt(i++));\n\t\t\t\th3 = b64.indexOf(data.charAt(i++));\n\t\t\t\th4 = b64.indexOf(data.charAt(i++));\n\n\t\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n\t\t\t\to1 = bits >> 16 & 0xff;\n\t\t\t\to2 = bits >> 8 & 0xff;\n\t\t\t\to3 = bits & 0xff;\n\n\t\t\t\tif (h3 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1);\n\t\t\t\t} else if (h4 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2);\n\t\t\t\t} else {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2, o3);\n\t\t\t\t}\n\t\t\t} while (i < il);\n\n\t\t\treturn tmpArr.join('');\n\t\t}\n\t};\n});/**\n * HTML matcher: takes string and searches for HTML tag pairs for given position \n * \n * Unlike “classic” matchers, it parses content from the specified \n * position, not from the start, so it may work even outside HTML documents\n * (for example, inside strings of programming languages like JavaScript, Python \n * etc.)\n * @constructor\n * @memberOf __htmlMatcherDefine\n */\nemmet.define('htmlMatcher', function(require, _) {\n\t// Regular Expressions for parsing tags and attributes\n\tvar reOpenTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\tvar reCloseTag = /^<\\/([\\w\\:\\-]+)[^>]*>/;\n\t\n\tfunction openTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\tselfClose: !!match[3],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'open'\n\t\t};\n\t}\n\t\n\tfunction closeTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'close'\n\t\t};\n\t}\n\t\n\tfunction comment(i, match) {\n\t\treturn {\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, _.isNumber(match) ? match - i : match[0]),\n\t\t\ttype: 'comment'\n\t\t};\n\t}\n\t\n\t/**\n\t * Creates new tag matcher session\n\t * @param {String} text\n\t */\n\tfunction createMatcher(text) {\n\t\tvar memo = {}, m;\n\t\treturn {\n\t\t\t/**\n\t\t\t * Test if given position matches opening tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\topen: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'open' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Test if given position matches closing tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\tclose: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'close' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Matches either opening or closing tag for given position\n\t\t\t * @param i\n\t\t\t * @returns\n\t\t\t */\n\t\t\tmatches: function(i) {\n\t\t\t\tvar key = 'p' + i;\n\t\t\t\t\n\t\t\t\tif (!(key in memo)) {\n\t\t\t\t\tif (text.charAt(i) == '<') {\n\t\t\t\t\t\tvar substr = text.slice(i);\n\t\t\t\t\t\tif (m = substr.match(reOpenTag)) {\n\t\t\t\t\t\t\tmemo[key] = openTag(i, m);\n\t\t\t\t\t\t} else if (m = substr.match(reCloseTag)) {\n\t\t\t\t\t\t\tmemo[key] = closeTag(i, m);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// remember that given position contains no valid tag\n\t\t\t\t\t\t\tmemo[key] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn memo[key];\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Returns original text\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\ttext: function() {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction matches(text, pos, pattern) {\n\t\treturn text.substring(pos, pos + pattern.length) == pattern;\n\t}\n\t\n\t/**\n\t * Search for closing pair of opening tag\n\t * @param {Object} open Open tag instance\n\t * @param {Object} matcher Matcher instance\n\t */\n\tfunction findClosingPair(open, matcher) {\n\t\tvar stack = [], tag = null;\n\t\tvar text = matcher.text();\n\t\t\n\t\tfor (var pos = open.range.end, len = text.length; pos < len; pos++) {\n\t\t\tif (matches(text, pos, '<!--')) {\n\t\t\t\t// skip to end of comment\n\t\t\t\tfor (var j = pos; j < len; j++) {\n\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\tpos = j + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (tag = matcher.matches(pos)) {\n\t\t\t\tif (tag.type == 'open' && !tag.selfClose) {\n\t\t\t\t\tstack.push(tag.name);\n\t\t\t\t} else if (tag.type == 'close') {\n\t\t\t\t\tif (!stack.length) { // found valid pair?\n\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// check if current closing tag matches previously opened one\n\t\t\t\t\tif (_.last(stack) == tag.name) {\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\twhile (stack.length && !found) {\n\t\t\t\t\t\t\tvar last = stack.pop();\n\t\t\t\t\t\t\tif (last == tag.name) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!stack.length && !found) {\n\t\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Main function: search for tag pair in <code>text</code> for given \n\t\t * position\n\t\t * @memberOf htmlMatcher\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\tfind: function(text, pos) {\n\t\t\tvar range = require('range');\n\t\t\tvar matcher = createMatcher(text); \n\t\t\tvar open = null, close = null;\n\t\t\t\n\t\t\tfor (var i = pos; i >= 0; i--) {\n\t\t\t\tif (open = matcher.open(i)) {\n\t\t\t\t\t// found opening tag\n\t\t\t\t\tif (open.selfClose) {\n\t\t\t\t\t\tif (open.range.cmp(pos, 'lt', 'gt')) {\n\t\t\t\t\t\t\t// inside self-closing tag, found match\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// outside self-closing tag, continue\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclose = findClosingPair(open, matcher);\n\t\t\t\t\tif (close) {\n\t\t\t\t\t\t// found closing tag.\n\t\t\t\t\t\tvar r = range.create2(open.range.start, close.range.end);\n\t\t\t\t\t\tif (r.contains(pos)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (open.range.contains(pos)) {\n\t\t\t\t\t\t// we inside empty HTML tag like <br>\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = null;\n\t\t\t\t} else if (matches(text, i, '-->')) {\n\t\t\t\t\t// skip back to comment start\n\t\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\t// found another comment end, do nothing\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (matches(text, j, '<!--')) {\n\t\t\t\t\t\t\ti = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (matches(text, i, '<!--')) {\n\t\t\t\t\t// we're inside comment, match it\n\t\t\t\t\tvar j = i + 4, jl = text.length;\n\t\t\t\t\tfor (; j < jl; j++) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\tj += 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = comment(i, j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (open) {\n\t\t\t\tvar outerRange = null;\n\t\t\t\tvar innerRange = null;\n\t\t\t\t\n\t\t\t\tif (close) {\n\t\t\t\t\touterRange = range.create2(open.range.start, close.range.end);\n\t\t\t\t\tinnerRange = range.create2(open.range.end, close.range.start);\n\t\t\t\t} else {\n\t\t\t\t\touterRange = innerRange = range.create2(open.range.start, open.range.end);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (open.type == 'comment') {\n\t\t\t\t\t// adjust positions of inner range for comment\n\t\t\t\t\tvar _c = outerRange.substring(text);\n\t\t\t\t\tinnerRange.start += _c.length - _c.replace(/^<\\!--\\s*/, '').length;\n\t\t\t\t\tinnerRange.end -= _c.length - _c.replace(/\\s*-->$/, '').length;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\topen: open,\n\t\t\t\t\tclose: close,\n\t\t\t\t\ttype: open.type == 'comment' ? 'comment' : 'tag',\n\t\t\t\t\tinnerRange: innerRange,\n\t\t\t\t\tinnerContent: function() {\n\t\t\t\t\t\treturn this.innerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\touterRange: outerRange,\n\t\t\t\t\touterContent: function() {\n\t\t\t\t\t\treturn this.outerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\trange: !innerRange.length() || !innerRange.cmp(pos, 'lte', 'gte') ? outerRange : innerRange,\n\t\t\t\t\tcontent: function() {\n\t\t\t\t\t\treturn this.range.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\tsource: text\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * The same as <code>find()</code> method, but restricts matched result \n\t\t * to <code>tag</code> type\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\ttag: function(text, pos) {\n\t\t\tvar result = this.find(text, pos);\n\t\t\tif (result && result.type == 'tag') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Utility module for handling tabstops tokens generated by Emmet's \n * \"Expand Abbreviation\" action. The main <code>extract</code> method will take\n * raw text (for example: <i>${0} some ${1:text}</i>), find all tabstops \n * occurrences, replace them with tokens suitable for your editor of choice and \n * return object with processed text and list of found tabstops and their ranges.\n * For sake of portability (Objective-C/Java) the tabstops list is a plain \n * sorted array with plain objects.\n * \n * Placeholders with the same are meant to be <i>linked</i> in your editor.\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('tabStops', function(require, _) {\n\t/**\n\t * Global placeholder value, automatically incremented by \n\t * <code>variablesResolver()</code> function\n\t */\n\tvar startPlaceholderNum = 100;\n\t\n\tvar tabstopIndex = 0;\n\t\n\tvar defaultOptions = {\n\t\treplaceCarets: false,\n\t\tescape: function(ch) {\n\t\t\treturn '\\\\' + ch;\n\t\t},\n\t\ttabstop: function(data) {\n\t\t\treturn data.token;\n\t\t},\n\t\tvariable: function(data) {\n\t\t\treturn data.token;\n\t\t}\n\t};\n\t\n\t// XXX register output processor that will upgrade tabstops of parsed node\n\t// in order to prevent tabstop index conflicts\n\trequire('abbreviationParser').addOutputProcessor(function(text, node, type) {\n\t\tvar maxNum = 0;\n\t\tvar tabstops = require('tabStops');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar tsOptions = {\n\t\t\ttabstop: function(data) {\n\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\tif (group == 0)\n\t\t\t\t\treturn '${0}';\n\t\t\t\t\n\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\tif (data.placeholder) {\n\t\t\t\t\t// respect nested placeholders\n\t\t\t\t\tvar ix = group + tabstopIndex;\n\t\t\t\t\tvar placeholder = tabstops.processText(data.placeholder, tsOptions);\n\t\t\t\t\treturn '${' + ix + ':' + placeholder + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn '${' + (group + tabstopIndex) + '}';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t// upgrade tabstops\n\t\ttext = tabstops.processText(text, tsOptions);\n\t\t\n\t\t// resolve variables\n\t\ttext = utils.replaceVariables(text, tabstops.variablesResolver(node));\n\t\t\n\t\ttabstopIndex += maxNum + 1;\n\t\treturn text;\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Main function that looks for a tabstops in provided <code>text</code>\n\t\t * and returns a processed version of <code>text</code> with expanded \n\t\t * placeholders and list of tabstops found.\n\t\t * @param {String} text Text to process\n\t\t * @param {Object} options List of processor options:<br>\n\t\t * \n\t\t * <b>replaceCarets</b> : <code>Boolean</code> — replace all default\n\t\t * caret placeholders (like <i>{%::emmet-caret::%}</i>) with <i>${0:caret}</i><br>\n\t\t * \n\t\t * <b>escape</b> : <code>Function</code> — function that handle escaped\n\t\t * characters (mostly '$'). By default, it returns the character itself \n\t\t * to be displayed as is in output, but sometimes you will use \n\t\t * <code>extract</code> method as intermediate solution for further \n\t\t * processing and want to keep character escaped. Thus, you should override\n\t\t * <code>escape</code> method to return escaped symbol (e.g. '\\\\$')<br>\n\t\t * \n\t\t * <b>tabstop</b> : <code>Function</code> – a tabstop handler. Receives \n\t\t * a single argument – an object describing token: its position, number \n\t\t * group, placeholder and token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * <b>variable</b> : <code>Function</code> – variable handler. Receives \n\t\t * a single argument – an object describing token: its position, name \n\t\t * and original token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * @returns {Object} Object with processed <code>text</code> property\n\t\t * and array of <code>tabstops</code> found\n\t\t * @memberOf tabStops\n\t\t */\n\t\textract: function(text, options) {\n\t\t\t// prepare defaults\n\t\t\tvar utils = require('utils');\n\t\t\tvar placeholders = {carets: ''};\n\t\t\tvar marks = [];\n\t\t\t\n\t\t\toptions = _.extend({}, defaultOptions, options, {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar token = data.token;\n\t\t\t\t\tvar ret = '';\n\t\t\t\t\tif (data.placeholder == 'cursor') {\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: 'carets',\n\t\t\t\t\t\t\tvalue: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unify placeholder value for single group\n\t\t\t\t\t\tif ('placeholder' in data)\n\t\t\t\t\t\t\tplaceholders[data.group] = data.placeholder;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (data.group in placeholders)\n\t\t\t\t\t\t\tret = placeholders[data.group];\n\t\t\t\t\t\t\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: data.group,\n\t\t\t\t\t\t\tvalue: ret\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (options.replaceCarets) {\n\t\t\t\ttext = text.replace(new RegExp( utils.escapeForRegexp( utils.getCaretPlaceholder() ), 'g'), '${0:cursor}');\n\t\t\t}\n\t\t\t\n\t\t\t// locate tabstops and unify group's placeholders\n\t\t\ttext = this.processText(text, options);\n\t\t\t\n\t\t\t// now, replace all tabstops with placeholders\n\t\t\tvar buf = utils.stringBuilder(), lastIx = 0;\n\t\t\tvar tabStops = _.map(marks, function(mark) {\n\t\t\t\tbuf.append(text.substring(lastIx, mark.start));\n\t\t\t\t\n\t\t\t\tvar pos = buf.length;\n\t\t\t\tvar ph = placeholders[mark.group] || '';\n\t\t\t\t\n\t\t\t\tbuf.append(ph);\n\t\t\t\tlastIx = mark.end;\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\tgroup: mark.group,\n\t\t\t\t\tstart: pos,\n\t\t\t\t\tend:  pos + ph.length\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tbuf.append(text.substring(lastIx));\n\t\t\t\n\t\t\treturn {\n\t\t\t\ttext: buf.toString(),\n\t\t\t\ttabstops: _.sortBy(tabStops, 'start')\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Text processing routine. Locates escaped characters and tabstops and\n\t\t * replaces them with values returned by handlers defined in \n\t\t * <code>options</code>\n\t\t * @param {String} text\n\t\t * @param {Object} options See <code>extract</code> method options \n\t\t * description\n\t\t * @returns {String}\n\t\t */\n\t\tprocessText: function(text, options) {\n\t\t\toptions = _.extend({}, defaultOptions, options);\n\t\t\t\n\t\t\tvar buf = require('utils').stringBuilder();\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(text);\n\t\t\tvar ch, m, a;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '\\\\' && !stream.eol()) {\n\t\t\t\t\t// handle escaped character\n\t\t\t\t\tbuf.append(options.escape(stream.next()));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ta = ch;\n\t\t\t\t\n\t\t\t\tif (ch == '$') {\n\t\t\t\t\t// looks like a tabstop\n\t\t\t\t\tstream.start = stream.pos - 1;\n\t\t\t\t\t\n\t\t\t\t\tif (m = stream.match(/^[0-9]+/)) {\n\t\t\t\t\t\t// it's $N\n\t\t\t\t\t\ta = options.tabstop({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: stream.current().substr(1),\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([a-z_\\-][\\w\\-]*)\\}/)) {\n\t\t\t\t\t\t// ${variable}\n\t\t\t\t\t\ta = options.variable({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([0-9]+)(:.+?)?\\}/, false)) {\n\t\t\t\t\t\t// ${N:value} or ${N} placeholder\n\t\t\t\t\t\t// parse placeholder, including nested ones\n\t\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar obj = {\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar placeholder = obj.token.substring(obj.group.length + 2, obj.token.length - 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (placeholder) {\n\t\t\t\t\t\t\tobj.placeholder = placeholder.substr(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ta = options.tabstop(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbuf.append(a);\n\t\t\t}\n\t\t\t\n\t\t\treturn buf.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Upgrades tabstops in output node in order to prevent naming conflicts\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {Number} offset Tab index offset\n\t\t * @returns {Number} Maximum tabstop index in element\n\t\t */\n\t\tupgrade: function(node, offset) {\n\t\t\tvar maxNum = 0;\n\t\t\tvar options = {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\t\t\t\n\t\t\t\t\tif (data.placeholder)\n\t\t\t\t\t\treturn '${' + (group + offset) + ':' + data.placeholder + '}';\n\t\t\t\t\telse\n\t\t\t\t\t\treturn '${' + (group + offset) + '}';\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t_.each(['start', 'end', 'content'], function(p) {\n\t\t\t\tnode[p] = this.processText(node[p], options);\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn maxNum;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that produces a callback function for \n\t\t * <code>replaceVariables()</code> method from {@link utils}\n\t\t * module. This callback will replace variable definitions (like \n\t\t * ${var_name}) with their value defined in <i>resource</i> module,\n\t\t * or outputs tabstop with variable name otherwise.\n\t\t * @param {AbbreviationNode} node Context node\n\t\t * @returns {Function}\n\t\t */\n\t\tvariablesResolver: function(node) {\n\t\t\tvar placeholderMemo = {};\n\t\t\tvar res = require('resources');\n\t\t\treturn function(str, varName) {\n\t\t\t\t// do not mark `child` variable as placeholder – it‘s a reserved\n\t\t\t\t// variable name\n\t\t\t\tif (varName == 'child')\n\t\t\t\t\treturn str;\n\t\t\t\t\n\t\t\t\tif (varName == 'cursor')\n\t\t\t\t\treturn require('utils').getCaretPlaceholder();\n\t\t\t\t\n\t\t\t\tvar attr = node.attribute(varName);\n\t\t\t\tif (!_.isUndefined(attr) && attr !== str) {\n\t\t\t\t\treturn attr;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar varValue = res.getVariable(varName);\n\t\t\t\tif (varValue)\n\t\t\t\t\treturn varValue;\n\t\t\t\t\n\t\t\t\t// output as placeholder\n\t\t\t\tif (!placeholderMemo[varName])\n\t\t\t\t\tplaceholderMemo[varName] = startPlaceholderNum++;\n\t\t\t\t\t\n\t\t\t\treturn '${' + placeholderMemo[varName] + ':' + varName + '}';\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets global tabstop index. When parsed tree is converted to output\n\t\t * string (<code>AbbreviationNode.toString()</code>), all tabstops \n\t\t * defined in snippets and elements are upgraded in order to prevent\n\t\t * naming conflicts of nested. For example, <code>${1}</code> of a node\n\t\t * should not be linked with the same placehilder of the child node.\n\t\t * By default, <code>AbbreviationNode.toString()</code> automatically\n\t\t * upgrades tabstops of the same index for each node and writes maximum\n\t\t * tabstop index into the <code>tabstopIndex</code> variable. To keep\n\t\t * this variable at reasonable value, it is recommended to call \n\t\t * <code>resetTabstopIndex()</code> method each time you expand variable \n\t\t * @returns\n\t\t */\n\t\tresetTabstopIndex: function() {\n\t\t\ttabstopIndex = 0;\n\t\t\tstartPlaceholderNum = 100;\n\t\t}\n\t};\n});/**\n * Common module's preferences storage. This module \n * provides general storage for all module preferences, their description and\n * default values.<br><br>\n * \n * This module can also be used to list all available properties to create \n * UI for updating properties\n * \n * @memberOf __preferencesDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('preferences', function(require, _) {\n\tvar preferences = {};\n\tvar defaults = {};\n\tvar _dbgDefaults = null;\n\tvar _dbgPreferences = null;\n\n\tfunction toBoolean(val) {\n\t\tif (_.isString(val)) {\n\t\t\tval = val.toLowerCase();\n\t\t\treturn val == 'yes' || val == 'true' || val == '1';\n\t\t}\n\n\t\treturn !!val;\n\t}\n\t\n\tfunction isValueObj(obj) {\n\t\treturn _.isObject(obj) \n\t\t\t&& 'value' in obj \n\t\t\t&& _.keys(obj).length < 3;\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new preference item with default value\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @param {String} description Item textual description\n\t\t * @memberOf preferences\n\t\t */\n\t\tdefine: function(name, value, description) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = {\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tdescription: description\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tdefaults[k] = isValueObj(v) ? v : {value: v};\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Updates preference item value. Preference value should be defined\n\t\t * first with <code>define</code> method.\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @memberOf preferences\n\t\t */\n\t\tset: function(name, value) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = value;\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tif (!(k in defaults)) {\n\t\t\t\t\tthrow 'Property \"' + k + '\" is not defined. You should define it first with `define` method of current module';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// do not set value if it equals to default value\n\t\t\t\tif (v !== defaults[k].value) {\n\t\t\t\t\t// make sure we have value of correct type\n\t\t\t\t\tswitch (typeof defaults[k].value) {\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tv = toBoolean(v);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tv = parseInt(v + '', 10) || 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: // convert to string\n\t\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\t\tv += '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tpreferences[k] = v;\n\t\t\t\t} else if  (k in preferences) {\n\t\t\t\t\tdelete preferences[k];\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns preference value\n\t\t * @param {String} name\n\t\t * @returns {String} Returns <code>undefined</code> if preference is \n\t\t * not defined\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (name in preferences)\n\t\t\t\treturn preferences[name];\n\t\t\t\n\t\t\tif (name in defaults)\n\t\t\t\treturn defaults[name].value;\n\t\t\t\n\t\t\treturn void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma-separated preference value as array of values\n\t\t * @param {String} name\n\t\t * @returns {Array} Returns <code>undefined</code> if preference is \n\t\t * not defined, <code>null</code> if string cannot be converted to array\n\t\t */\n\t\tgetArray: function(name) {\n\t\t\tvar val = this.get(name);\n\t\t\tif (_.isUndefined(val) || val === null || val === '')  {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tval = _.map(val.split(','), require('utils').trim);\n\t\t\tif (!val.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\treturn val;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma and colon-separated preference value as dictionary\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetDict: function(name) {\n\t\t\tvar result = {};\n\t\t\t_.each(this.getArray(name), function(val) {\n\t\t\t\tvar parts = val.split(':');\n\t\t\t\tresult[parts[0]] = parts[1];\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns description of preference item\n\t\t * @param {String} name Preference name\n\t\t * @returns {Object}\n\t\t */\n\t\tdescription: function(name) {\n\t\t\treturn name in defaults ? defaults[name].description : void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Completely removes specified preference(s)\n\t\t * @param {String} name Preference name (or array of names)\n\t\t */\n\t\tremove: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t_.each(name, function(key) {\n\t\t\t\tif (key in preferences)\n\t\t\t\t\tdelete preferences[key];\n\t\t\t\t\n\t\t\t\tif (key in defaults)\n\t\t\t\t\tdelete defaults[key];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns sorted list of all available properties\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.map(_.keys(defaults).sort(), function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tname: key,\n\t\t\t\t\tvalue: this.get(key),\n\t\t\t\t\ttype: typeof defaults[key].value,\n\t\t\t\t\tdescription: defaults[key].description\n\t\t\t\t};\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Loads user-defined preferences from JSON\n\t\t * @param {Object} json\n\t\t * @returns\n\t\t */\n\t\tload: function(json) {\n\t\t\t_.each(json, function(value, key) {\n\t\t\t\tthis.set(key, value);\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Returns hash of user-modified preferences\n\t\t * @returns {Object}\n\t\t */\n\t\texportModified: function() {\n\t\t\treturn _.clone(preferences);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Reset to defaults\n\t\t * @returns\n\t\t */\n\t\treset: function() {\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: use empty storage\n\t\t */\n\t\t_startTest: function() {\n\t\t\t_dbgDefaults = defaults;\n\t\t\t_dbgPreferences = preferences;\n\t\t\tdefaults = {};\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: restore original storage\n\t\t */\n\t\t_stopTest: function() {\n\t\t\tdefaults = _dbgDefaults;\n\t\t\tpreferences = _dbgPreferences;\n\t\t}\n\t};\n});/**\n * Module for handling filters\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('filters', function(require, _) {\n\t/** List of registered filters */\n\tvar registeredFilters = {};\n\t\n\t/** Filters that will be applied for unknown syntax */\n\tvar basicFilters = 'html';\n\t\n\tfunction list(filters) {\n\t\tif (!filters)\n\t\t\treturn [];\n\t\t\n\t\tif (_.isString(filters))\n\t\t\treturn filters.split(/[\\|,]/g);\n\t\t\n\t\treturn filters;\n\t}\n\t\n\treturn  {\n\t\t/**\n\t\t * Register new filter\n\t\t * @param {String} name Filter name\n\t\t * @param {Function} fn Filter function\n\t\t */\n\t\tadd: function(name, fn) {\n\t\t\tregisteredFilters[name] = fn;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Apply filters for final output tree\n\t\t * @param {AbbreviationNode} tree Output tree\n\t\t * @param {Array} filters List of filters to apply. Might be a \n\t\t * <code>String</code>\n\t\t * @param {Object} profile Output profile, defined in <i>profile</i> \n\t\t * module. Filters defined it profile are not used, <code>profile</code>\n\t\t * is passed to filter function\n\t\t * @memberOf emmet.filters\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tapply: function(tree, filters, profile) {\n\t\t\tvar utils = require('utils');\n\t\t\tprofile = require('profile').get(profile);\n\t\t\t\n\t\t\t_.each(list(filters), function(filter) {\n\t\t\t\tvar name = utils.trim(filter.toLowerCase());\n\t\t\t\tif (name && name in registeredFilters) {\n\t\t\t\t\ttree = registeredFilters[name](tree, profile);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Composes list of filters that should be applied to a tree, based on \n\t\t * passed data\n\t\t * @param {String} syntax Syntax name ('html', 'css', etc.)\n\t\t * @param {Object} profile Output profile\n\t\t * @param {String} additionalFilters List or pipe-separated\n\t\t * string of additional filters to apply\n\t\t * @returns {Array}\n\t\t */\n\t\tcomposeList: function(syntax, profile, additionalFilters) {\n\t\t\tprofile = require('profile').get(profile);\n\t\t\tvar filters = list(profile.filters || require('resources').findItem(syntax, 'filters') || basicFilters);\n\t\t\t\n\t\t\tif (profile.extraFilters) {\n\t\t\t\tfilters = filters.concat(list(profile.extraFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (additionalFilters) {\n\t\t\t\tfilters = filters.concat(list(additionalFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (!filters || !filters.length) {\n\t\t\t\t// looks like unknown syntax, apply basic filters\n\t\t\t\tfilters = list(basicFilters);\n\t\t\t}\n\t\t\t\t\n\t\t\treturn filters;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts filter list from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Array} Array with cleaned abbreviation and list of \n\t\t * extracted filters\n\t\t */\n\t\textractFromAbbreviation: function(abbr) {\n\t\t\tvar filters = '';\n\t\t\tabbr = abbr.replace(/\\|([\\w\\|\\-]+)$/, function(str, p1){\n\t\t\t\tfilters = p1;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\treturn [abbr, list(filters)];\n\t\t}\n\t};\n});/**\n * Module that contains factories for element types used by Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('elements', function(require, _) {\n\tvar factories = {};\n\tvar reAttrs = /([\\w\\-:]+)\\s*=\\s*(['\"])(.*?)\\2/g;\n\t\n\tvar result = {\n\t\t/**\n\t\t * Create new element factory\n\t\t * @param {String} name Element identifier\n\t\t * @param {Function} factory Function that produces element of specified \n\t\t * type. The object generated by this factory is automatically \n\t\t * augmented with <code>type</code> property pointing to element\n\t\t * <code>name</code>\n\t\t * @memberOf elements\n\t\t */\n\t\tadd: function(name, factory) {\n\t\t\tvar that = this;\n\t\t\tfactories[name] = function() {\n\t\t\t\tvar elem = factory.apply(that, arguments);\n\t\t\t\tif (elem)\n\t\t\t\t\telem.type = name;\n\t\t\t\t\n\t\t\t\treturn elem;\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns factory for specified name\n\t\t * @param {String} name\n\t\t * @returns {Function}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn factories[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates new element with specified type\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tcreate: function(name) {\n\t\t\tvar args = [].slice.call(arguments, 1);\n\t\t\tvar factory = this.get(name);\n\t\t\treturn factory ? factory.apply(this, args) : null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is of specified type\n\t\t * @param {Object} elem\n\t\t * @param {String} type\n\t\t * @returns {Boolean}\n\t\t */\n\t\tis: function(elem, type) {\n\t\t\treturn elem && elem.type === type;\n\t\t}\n\t};\n\t\n\t// register resource references\n\tfunction commonFactory(value) {\n\t\treturn {data: value};\n\t}\n\t\n\t/**\n\t * Element factory\n\t * @param {String} elementName Name of output element\n\t * @param {String} attrs Attributes definition. You may also pass\n\t * <code>Array</code> where each contains object with <code>name</code> \n\t * and <code>value</code> properties, or <code>Object</code>\n\t * @param {Boolean} isEmpty Is expanded element should be empty\n\t */\n\tresult.add('element', function(elementName, attrs, isEmpty) {\n\t\tvar ret = {\n\t\t\t/** @memberOf __emmetDataElement */\n\t\t\tname: elementName,\n\t\t\tis_empty: !!isEmpty\n\t\t};\n\t\t\n\t\tif (attrs) {\n\t\t\tret.attributes = [];\n\t\t\tif (_.isArray(attrs)) {\n\t\t\t\tret.attributes = attrs;\n\t\t\t} else if (_.isString(attrs)) {\n\t\t\t\tvar m;\n\t\t\t\twhile (m = reAttrs.exec(attrs)) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\tvalue: m[3]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_.each(attrs, function(value, name) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: name, \n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn ret;\n\t});\n\t\n\tresult.add('snippet', commonFactory);\n\tresult.add('reference', commonFactory);\n\tresult.add('empty', function() {\n\t\treturn {};\n\t});\n\t\n\treturn result;\n});/**\n * Abstract implementation of edit tree interface.\n * Edit tree is a named container of editable “name-value” child elements, \n * parsed from <code>source</code>. This container provides convenient methods\n * for editing/adding/removing child elements. All these update actions are\n * instantly reflected in the <code>source</code> code with respect of formatting.\n * <br><br>\n * For example, developer can create an edit tree from CSS rule and add or \n * remove properties from it–all changes will be immediately reflected in the \n * original source.\n * <br><br>\n * All classes defined in this module should be extended the same way as in\n * Backbone framework: using <code>extend</code> method to create new class and \n * <code>initialize</code> method to define custom class constructor.\n * \n * @example\n * <pre><code>\n * var MyClass = require('editTree').EditElement.extend({\n * \tinitialize: function() {\n * \t\t// constructor code here\n * \t}\n * });\n * \n * var elem = new MyClass(); \n * </code></pre>\n * \n * \n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __editTreeDefine\n */\nemmet.define('editTree', function(require, _, core) {\n\tvar range = require('range').create;\n\t\n\t/**\n\t * Named container of edited source\n\t * @type EditContainer\n\t * @param {String} source\n\t * @param {Object} options\n\t */\n\tfunction EditContainer(source, options) {\n\t\tthis.options = _.extend({offset: 0}, options);\n\t\t/**\n\t\t * Source code of edited structure. All changes in the structure are \n\t\t * immediately reflected into this property\n\t\t */\n\t\tthis.source = source;\n\t\t\n\t\t/** \n\t\t * List of all editable children\n\t\t * @private \n\t\t */\n\t\tthis._children = [];\n\t\t\n\t\t/**\n\t\t * Hash of all positions of container\n\t\t * @private\n\t\t */\n\t\tthis._positions = {\n\t\t\tname: 0\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditContainer.extend = core.extend;\n\t\n\tEditContainer.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Replace substring of tag's source\n\t\t * @param {String} value\n\t\t * @param {Number} start\n\t\t * @param {Number} end\n\t\t * @private\n\t\t */\n\t\t_updateSource: function(value, start, end) {\n\t\t\t// create modification range\n\t\t\tvar r = range(start, _.isUndefined(end) ? 0 : end - start);\n\t\t\tvar delta = value.length - r.length();\n\t\t\t\n\t\t\tvar update = function(obj) {\n\t\t\t\t_.each(obj, function(v, k) {\n\t\t\t\t\tif (v >= r.end)\n\t\t\t\t\t\tobj[k] += delta;\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\t// update affected positions of current container\n\t\t\tupdate(this._positions);\n\t\t\t\n\t\t\t// update affected positions of children\n\t\t\t_.each(this.list(), function(item) {\n\t\t\t\tupdate(item._positions);\n\t\t\t});\n\t\t\t\n\t\t\tthis.source = require('utils').replaceSubstring(this.source, value, r);\n\t\t},\n\t\t\t\n\t\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {EditElement} Newly created element\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\t// this is abstract implementation\n\t\t\tvar item = new EditElement(name, value);\n\t\t\tthis._children.push(item);\n\t\t\treturn item;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns attribute object\n\t\t * @param {String} name Attribute name or its index\n\t\t * @returns {EditElement}\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (_.isNumber(name))\n\t\t\t\treturn this.list()[name];\n\t\t\t\n\t\t\tif (_.isString(name))\n\t\t\t\treturn _.find(this.list(), function(prop) {\n\t\t\t\t\treturn prop.name() === name;\n\t\t\t\t});\n\t\t\t\n\t\t\treturn name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all children by name or indexes\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tgetAll: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t// split names and indexes\n\t\t\tvar names = [], indexes = [];\n\t\t\t_.each(name, function(item) {\n\t\t\t\tif (_.isString(item))\n\t\t\t\t\tnames.push(item);\n\t\t\t\telse if (_.isNumber(item))\n\t\t\t\t\tindexes.push(item);\n\t\t\t});\n\t\t\t\n\t\t\treturn _.filter(this.list(), function(attribute, i) {\n\t\t\t\treturn _.include(indexes, i) || _.include(names, attribute.name());\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or updates element value. If such element doesn't exists,\n\t\t * it will be created automatically and added at the end of child list.\n\t\t * @param {String} name Element name or its index\n\t\t * @param {String} value New element value\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(name, value, pos) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element)\n\t\t\t\treturn element.value(value);\n\t\t\t\n\t\t\tif (!_.isUndefined(value)) {\n\t\t\t\t// no such element — create it\n\t\t\t\treturn this.add(name, value, pos);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all values of child elements found by <code>getAll()</code>\n\t\t * method\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tvalues: function(name) {\n\t\t\treturn _.map(this.getAll(name), function(element) {\n\t\t\t\treturn element.value();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remove child element\n\t\t * @param {String} name Property name or its index\n\t\t */\n\t\tremove: function(name) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element) {\n\t\t\t\tthis._updateSource('', element.fullRange());\n\t\t\t\tthis._children = _.without(this._children, element);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all editable child elements\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn this._children;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of editble child in list\n\t\t * @param {Object} item\n\t\t * @returns {Number}\n\t\t */\n\t\tindexOf: function(item) {\n\t\t\treturn _.indexOf(this.list(), this.get(item));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets or gets container name\n\t\t * @param {String} val New name. If not passed, current \n\t\t * name is returned\n\t\t * @return {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis._updateSource(val, this._positions.name, this._positions.name + this._name.length);\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name range object\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of \n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this._positions.name + (isAbsolute ? this.options.offset : 0), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns range of current source\n\t\t * @param {Boolean} isAbsolute\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(isAbsolute ? this.options.offset : 0, this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element that belongs to specified position\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {EditElement}\n\t\t */\n\t\titemFromPosition: function(pos, isAbsolute) {\n\t\t\treturn _.find(this.list(), function(elem) {\n\t\t\t\treturn elem.range(isAbsolute).inside(pos);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns source code of current container \n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.source;\n\t\t}\n\t};\n\t\n\t/**\n\t * @param {EditContainer} parent\n\t * @param {Object} nameToken\n\t * @param {Object} valueToken\n\t */\n\tfunction EditElement(parent, nameToken, valueToken) {\n\t\t/** @type EditContainer */\n\t\tthis.parent = parent;\n\t\t\n\t\tthis._name = nameToken.value;\n\t\tthis._value = valueToken ? valueToken.value : '';\n\t\t\n\t\tthis._positions = {\n\t\t\tname: nameToken.start,\n\t\t\tvalue: valueToken ? valueToken.start : -1\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditElement.extend = core.extend;\n\t\n\tEditElement.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Make position absolute\n\t\t * @private\n\t\t * @param {Number} num\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {Boolean}\n\t\t */\n\t\t_pos: function(num, isAbsolute) {\n\t\t\treturn num + (isAbsolute ? this.parent.options.offset : 0);\n\t\t},\n\t\t\t\n\t\t/**\n\t\t * Sets of gets element value\n\t\t * @param {String} val New element value. If not passed, current \n\t\t * value is returned\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._value !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.valueRange());\n\t\t\t\tthis._value = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets element name\n\t\t * @param {String} val New element name. If not passed, current \n\t\t * name is returned\n\t\t * @returns {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.nameRange());\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element name token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tnamePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.name, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element value token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tvaluePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.value, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name\n\t\t * @param {Boolean} isAbsolute Return absolute range \n\t\t * @returns {Range}\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full element range, including possible indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\treturn this.range(isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element value range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tvalueRange: function(isAbsolute) {\n\t\t\treturn range(this.valuePosition(isAbsolute), this.value());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns current element string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.value();\n\t\t},\n\t\t\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\tEditContainer: EditContainer,\n\t\tEditElement: EditElement,\n\t\t\n\t\t/**\n\t\t * Creates token that can be fed to <code>EditElement</code>\n\t\t * @param {Number} start\n\t\t * @param {String} value\n\t\t * @param {String} type\n\t\t * @returns\n\t\t */\n\t\tcreateToken: function(start, value, type) {\n\t\t\tvar obj = {\n\t\t\t\tstart: start || 0,\n\t\t\t\tvalue: value || '',\n\t\t\t\ttype: type\n\t\t\t};\n\t\t\t\n\t\t\tobj.end = obj.start + obj.value.length;\n\t\t\treturn obj;\n\t\t}\n\t};\n});/**\n * CSS EditTree is a module that can parse a CSS rule into a tree with \n * convenient methods for adding, modifying and removing CSS properties. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __cssEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('cssEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: '\\n\\t',\n\t\tstyleSeparator: ': ',\n\t\toffset: 0\n\t};\n\t\n\tvar WHITESPACE_REMOVE_FROM_START = 1;\n\tvar WHITESPACE_REMOVE_FROM_END   = 2;\n\t\n\t/**\n\t * Returns range object\n\t * @param {Number} start\n\t * @param {Number} len \n\t * @returns {Range}\n\t */\n\tfunction range(start, len) {\n\t\treturn require('range').create(start, len);\n\t}\n\t\n\t/**\n\t * Removes whitespace tokens from the array ends\n\t * @param {Array} tokens\n\t * @param {Number} mask Mask indicating from which end whitespace should be \n\t * removed \n\t * @returns {Array}\n\t */\n\tfunction trimWhitespaceTokens(tokens, mask) {\n\t\tmask = mask || (WHITESPACE_REMOVE_FROM_START | WHITESPACE_REMOVE_FROM_END);\n\t\tvar whitespace = ['white', 'line'];\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_END) == WHITESPACE_REMOVE_FROM_END)\n\t\t\twhile (tokens.length && _.include(whitespace, _.last(tokens).type)) {\n\t\t\t\ttokens.pop();\n\t \t\t}\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_START) == WHITESPACE_REMOVE_FROM_START)\n\t\t\twhile (tokens.length && _.include(whitespace, tokens[0].type)) {\n\t\t\t\ttokens.shift();\n\t\t\t}\n\t\t\n\t\treturn tokens;\n\t}\n\t\n\t/**\n\t * Helper function that searches for selector range for <code>CSSEditRule</code>\n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findSelectorRange(it) {\n\t\tvar tokens = [], token;\n \t\tvar start = it.position(), end;\n \t\t\n \t\twhile (token = it.next()) {\n\t\t\tif (token.type == '{')\n\t\t\t\tbreak;\n\t\t\ttokens.push(token);\n\t\t}\n \t\t\n \t\ttrimWhitespaceTokens(tokens);\n \t\t\n \t\tif (tokens.length) {\n \t\t\tstart = tokens[0].start;\n \t\t\tend = _.last(tokens).end;\n \t\t} else {\n \t\t\tend = start;\n \t\t}\n \t\t\n \t\treturn range(start, end - start);\n\t}\n\t\n\t/**\n\t * Helper function that searches for CSS property value range next to\n\t * iterator's current position  \n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findValueRange(it) {\n\t\t// find value start position\n\t\tvar skipTokens = ['white', 'line', ':'];\n\t\tvar tokens = [], token, start, end;\n\t\t\n\t\tit.nextUntil(function(tok) {\n\t\t\treturn !_.include(skipTokens, this.itemNext().type);\n\t\t});\n\t\t\n\t\tstart = it.current().end;\n\t\t// consume value\n\t\twhile (token = it.next()) {\n\t\t\tif (token.type == '}' || token.type == ';') {\n\t\t\t\t// found value end\n\t\t\t\ttrimWhitespaceTokens(tokens, WHITESPACE_REMOVE_FROM_START \n\t\t\t\t\t\t| (token.type == '}' ? WHITESPACE_REMOVE_FROM_END : 0));\n\t\t\t\t\n\t\t\t\tif (tokens.length) {\n\t\t\t\t\tstart = tokens[0].start;\n\t\t\t\t\tend = _.last(tokens).end;\n\t\t\t\t} else {\n\t\t\t\t\tend = start;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\ttokens.push(token);\n\t\t}\n\t\t\n\t\t// reached the end of tokens list\n\t\tif (tokens.length) {\n\t\t\treturn range(tokens[0].start, _.last(tokens).end - tokens[0].start);\n\t\t}\n\t}\n\t\n\t/**\n\t * Finds parts of complex CSS value\n\t * @param {String} str\n\t * @returns {Array} Returns list of <code>Range</code>'s\n\t */\n\tfunction findParts(str) {\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(str);\n\t\tvar ch;\n\t\tvar result = [];\n\t\tvar sep = /[\\s\\u00a0,]/;\n\t\t\n\t\tvar add = function() {\n\t\t\tstream.next();\n\t\t\tresult.push(range(stream.start, stream.current()));\n\t\t\tstream.start = stream.pos;\n\t\t};\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch == '\"' || ch == \"'\") {\n\t\t\t\tstream.next();\n\t\t\t\tif (!stream.skipTo(ch)) break;\n\t\t\t\tadd();\n\t\t\t} else if (ch == '(') {\n\t\t\t\t// function found, may have nested function\n\t\t\t\tstream.backUp(1);\n\t\t\t\tif (!stream.skipToPair('(', ')')) break;\n\t\t\t\tstream.backUp(1);\n\t\t\t\tadd();\n\t\t\t} else {\n\t\t\t\tif (sep.test(ch)) {\n\t\t\t\t\tresult.push(range(stream.start, stream.current().length - 1));\n\t\t\t\t\tstream.eatWhile(sep);\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd();\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * A bit hacky way to identify invalid CSS property definition: when user\n\t * starts writing new abbreviation in CSS rule, he actually creates invalid\n\t * CSS property definition and this method tries to identify such abbreviation\n\t * and prevent it from being added to CSS edit tree \n\t * @param {TokenIterator} it\n\t */\n\tfunction isValidIdentifier(it) {\n//\t\treturn true;\n\t\tvar tokens = it.tokens;\n\t\tfor (var i = it._i + 1, il = tokens.length; i < il; i++) {\n\t\t\tif (tokens[i].type == ':')\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (tokens[i].type == 'identifier' || tokens[i].type == 'line')\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * @class\n\t * @extends EditContainer\n\t */\n\tvar CSSEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\t/** @type TokenIterator */\n\t \t\tvar it = require('tokenIterator').create(\n\t \t\t\t\trequire('cssParser').parse(source));\n\t \t\t\n\t \t\tvar selectorRange = findSelectorRange(it);\n\t \t\tthis._positions.name = selectorRange.start;\n\t \t\tthis._name = selectorRange.substring(source);\n\t \t\t\n\t \t\tif (!it.current() || it.current().type != '{')\n\t \t\t\tthrow 'Invalid CSS rule';\n\t \t\t\n\t \t\tthis._positions.contentStart = it.position() + 1;\n\t \t\t\n\t \t\t// consume properties\n\t \t\tvar propertyRange, valueRange, token;\n\t\t\twhile (token = it.next()) {\n\t\t\t\tif (token.type == 'identifier' && isValidIdentifier(it)) {\n\t\t\t\t\tpropertyRange = range(token);\n\t\t\t\t\tvalueRange = findValueRange(it);\n\t\t\t\t\tvar end = (it.current() && it.current().type == ';') \n\t\t\t\t\t\t? range(it.current())\n\t\t\t\t\t\t: range(valueRange.end, 0);\n\t\t\t\t\tthis._children.push(new CSSEditElement(this,\n\t\t\t\t\t\t\teditTree.createToken(propertyRange.start, propertyRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(valueRange.start, valueRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(end.start, end.substring(source))\n\t\t\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar source = this.source;\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {CSSEditProperty} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t// a small hack here:\n\t\t\t\t// Sometimes users add empty lines before properties to logically\n\t\t\t\t// separate groups of properties. In this case, a blind copy of\n\t\t\t\t// characters between rules may lead to undesired behavior,\n\t\t\t\t// especially when current rule is duplicated or used as a donor\n\t\t\t\t// to create new rule.\n\t\t\t\t// To solve this issue, we‘ll take only last newline indentation\n\t\t\t\tvar lines = utils.splitByLines(p.styleBefore);\n\t\t\t\tif (lines.length > 1) {\n\t\t\t\t\tp.styleBefore = '\\n' + _.last(lines);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp.styleSeparator = source.substring(p.nameRange().end, p.valuePosition());\n\t\t\t\t\n\t\t\t\t// graceful and naive comments removal \n\t\t\t\tp.styleBefore = _.last(p.styleBefore.split('*/'));\n\t\t\t\tp.styleSeparator = p.styleSeparator.replace(/\\/\\*.*?\\*\\//g, '');\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new CSS property \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {CSSEditProperty}\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator');\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t/** @type CSSEditProperty */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\t// make sure that donor has terminating semicolon\n\t\t\t\tdonor.end(';');\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator');\n\t\t\t}\n\t\t\t\n\t\t\tvar nameToken = editTree.createToken(start + styles.styleBefore.length, name);\n\t\t\tvar valueToken = editTree.createToken(nameToken.end + styles.styleSeparator.length, value);\n\t\t\t\n\t\t\tvar property = new CSSEditElement(this, nameToken, valueToken,\n\t\t\t\t\teditTree.createToken(valueToken.end, ';'));\n\t\t\t\n\t\t\t_.extend(property, styles);\n\t\t\t\n\t\t\t// write new property into the source\n\t\t\tthis._updateSource(property.styleBefore + property.toString(), start);\n\t\t\t\n\t\t\t// insert new property\n\t\t\tthis._children.splice(pos, 0, property);\n\t\t\treturn property;\n\t\t}\n\t});\n\t\n\t/**\n\t * @class\n\t * @type CSSEditElement\n\t * @constructor\n\t */\n\tvar CSSEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(rule, name, value, end) {\n\t\t\tthis.styleBefore = rule.options.styleBefore;\n\t\t\tthis.styleSeparator = rule.options.styleSeparator;\n\t\t\t\n\t\t\tthis._end = end.value;\n\t\t\tthis._positions.end = end.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ranges of complex value parts\n\t\t * @returns {Array} Returns <code>null</code> if value is not complex\n\t\t */\n\t\tvalueParts: function(isAbsolute) {\n\t\t\tvar parts = findParts(this.value());\n\t\t\tif (isAbsolute) {\n\t\t\t\tvar offset = this.valuePosition(true);\n\t\t\t\t_.each(parts, function(p) {\n\t\t\t\t\tp.shift(offset);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn parts;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets property end value (basically, it's a semicolon)\n\t\t * @param {String} val New end value. If not passed, current \n\t\t * value is returned\n\t\t */\n\t\tend: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._end !== val) {\n\t\t\t\tthis.parent._updateSource(val, this._positions.end, this._positions.end + this._end.length);\n\t\t\t\tthis._end = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns item string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator + this.value() + this.end();\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses CSS rule into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.cssEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new CSSEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse CSS rule from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractRule(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching CSS rule or caret outside rule bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts single CSS selector definition from source code\n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {Range}\n\t\t */\n\t\textractRule: function(content, pos, isBackward) {\n\t\t\tvar result = '';\n\t\t\tvar len = content.length;\n\t\t\tvar offset = pos;\n\t\t\tvar stopChars = '{}/\\\\<>\\n\\r';\n\t\t\tvar bracePos = -1, ch;\n\t\t\t\n\t\t\t// search left until we find rule edge\n\t\t\twhile (offset >= 0) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (ch == '}' && !isBackward) {\n\t\t\t\t\toffset++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset--;\n\t\t\t}\n\t\t\t\n\t\t\t// search right for full rule set\n\t\t\twhile (offset < len) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\tif (bracePos != -1)\n\t\t\t\t\t\tresult = content.substring(bracePos, offset + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\t\n\t\t\tif (result) {\n\t\t\t\t// find CSS selector\n\t\t\t\toffset = bracePos - 1;\n\t\t\t\tvar selector = '';\n\t\t\t\twhile (offset >= 0) {\n\t\t\t\t\tch = content.charAt(offset);\n\t\t\t\t\tif (stopChars.indexOf(ch) != -1) break;\n\t\t\t\t\toffset--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// also trim whitespace\n\t\t\t\tselector = content.substring(offset + 1, bracePos).replace(/^[\\s\\n\\r]+/m, '');\n\t\t\t\treturn require('range').create(bracePos - selector.length, result.length + selector.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t \t * Removes vendor prefix from CSS property\n\t \t * @param {String} name CSS property\n\t \t * @return {String}\n\t \t */\n\t \tbaseName: function(name) {\n\t \t\treturn name.replace(/^\\s*\\-\\w+\\-/, '');\n\t \t},\n\t \t\n\t \t/**\n\t \t * Finds parts of complex CSS value\n\t \t * @param {String} str\n\t \t * @returns {Array}\n\t \t */\n\t \tfindParts: findParts\n\t};\n});/**\n * XML EditTree is a module that can parse an XML/HTML element into a tree with \n * convenient methods for adding, modifying and removing attributes. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __xmlEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('xmlEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: ' ',\n\t\tstyleSeparator: '=',\n\t\tstyleQuote: '\"',\n\t\toffset: 0\n\t};\n\t\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/m;\n\t\n\tvar XMLEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tthis._positions.name = 1;\n\t\t\t\n\t\t\tvar attrToken = null;\n\t\t\tvar tokens = require('xmlParser').parse(source);\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t_.each(tokens, function(token) {\n\t\t\t\ttoken.value = range.create(token).substring(source);\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'tag':\n\t\t\t\t\t\tif (/^<[^\\/]+/.test(token.value)) {\n\t\t\t\t\t\t\tthis._name = token.value.substring(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'attribute':\n\t\t\t\t\t\t// add empty attribute\n\t\t\t\t\t\tif (attrToken) {\n\t\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tattrToken = token;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken, token));\n\t\t\t\t\t\tattrToken = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tif (attrToken) {\n\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar source = this.source;\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {EditElement} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t\n\t\t\t\tif (p.valuePosition() !== -1) {\n\t\t\t\t\tp.styleSeparator = source.substring(p.namePosition() + p.name().length, p.valuePosition() - p.styleQuote.length);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar editTree = require('editTree');\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t\n\t\t\t/** @type XMLEditAttribute */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t}\n\t\t\t\n\t\t\tvalue = styles.styleQuote + value + styles.styleQuote;\n\t\t\t\n\t\t\tvar attribute = new XMLEditElement(this, \n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length, name),\n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length + name.length \n\t\t\t\t\t\t\t+ styles.styleSeparator.length, value)\n\t\t\t\t\t);\n\t\t\t\n\t\t\t_.extend(attribute, styles);\n\t\t\t\n\t\t\t// write new attribute into the source\n\t\t\tthis._updateSource(attribute.styleBefore + attribute.toString(), start);\n\t\t\t\n\t\t\t// insert new attribute\n\t\t\tthis._children.splice(pos, 0, attribute);\n\t\t\treturn attribute;\n\t\t}\n\t});\n\t\n\tvar XMLEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(parent, nameToken, valueToken) {\n\t\t\tthis.styleBefore = parent.options.styleBefore;\n\t\t\tthis.styleSeparator = parent.options.styleSeparator;\n\t\t\t\n\t\t\tvar value = '', quote = parent.options.styleQuote;\n\t\t\tif (valueToken) {\n\t\t\t\tvalue = valueToken.value;\n\t\t\t\tquote = value.charAt(0);\n\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\tvalue = value.substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tquote = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (quote && value.charAt(value.length - 1) == quote) {\n\t\t\t\t\tvalue = value.substring(0, value.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.styleQuote = quote;\n\t\t\t\n\t\t\tthis._value = value;\n\t\t\tthis._positions.value = valueToken ? valueToken.start + quote.length : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator\n\t\t\t\t+ this.styleQuote + this.value() + this.styleQuote;\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses HTML element into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.htmlEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new XMLEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse HTML from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {XMLEditElement}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractTag(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching HTML tag or caret outside tag bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts nearest HTML tag range from <code>content</code>, starting at \n\t\t * <code>pos</code> position\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isBackward\n\t\t * @returns {Range}\n\t\t */\n\t\textractTag: function(content, pos, isBackward) {\n\t\t\tvar len = content.length, i;\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t// max extraction length. I don't think there may be tags larger \n\t\t\t// than 2000 characters length\n\t\t\tvar maxLen = Math.min(2000, len);\n\t\t\t\n\t\t\t/** @type Range */\n\t\t\tvar r = null;\n\t\t\t\n\t\t\tvar match = function(pos) {\n\t\t\t\tvar m;\n\t\t\t\tif (content.charAt(pos) == '<' && (m = content.substr(pos, maxLen).match(startTag)))\n\t\t\t\t\treturn range.create(pos, m[0]);\n\t\t\t};\n\t\t\t\n\t\t\t// lookup backward, in case we are inside tag already\n\t\t\tfor (i = pos; i >= 0; i--) {\n\t\t\t\tif (r = match(i)) break;\n\t\t\t}\n\t\t\t\n\t\t\tif (r && (r.inside(pos) || isBackward))\n\t\t\t\treturn r;\n\t\t\t\n\t\t\tif (!r && isBackward)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\t// search forward\n\t\t\tfor (i = pos; i < len; i++) {\n\t\t\t\tif (r = match(i))\n\t\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * 'Expand abbreviation' editor action: extracts abbreviation from current caret \n * position and replaces it with formatted output. \n * <br><br>\n * This behavior can be overridden with custom handlers which can perform \n * different actions when 'Expand Abbreviation' action is called.\n * For example, a CSS gradient handler that produces vendor-prefixed gradient\n * definitions registers its own expand abbreviation handler.  \n *  \n * @constructor\n * @memberOf __expandAbbreviationActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('expandAbbreviation', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar actions = require('actions');\n\t/**\n\t * 'Expand abbreviation' editor action \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\tactions.add('expand_abbreviation', function(editor, syntax, profile) {\n\t\tvar args = _.toArray(arguments);\n\t\t\n\t\t// normalize incoming arguments\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\targs[1] = info.syntax;\n\t\targs[2] = info.profile;\n\t\t\n\t\treturn handlers.exec(false, args);\n\t});\n\t\n\t/**\n\t * A special version of <code>expandAbbreviation</code> function: if it can't\n\t * find abbreviation, it will place Tab character at caret position\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\tactions.add('expand_abbreviation_with_tab', function(editor, syntax, profile) {\n\t\tvar sel = editor.getSelection();\n\t\tvar indent = require('resources').getVariable('indentation');\n\t\tif (sel) {\n\t\t\t// indent selection\n\t\t\tvar utils = require('utils');\n\t\t\tvar selRange = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = utils.padString(sel, indent);\n\t\t\t\n\t\t\teditor.replaceContent(indent + '${0}', editor.getCaretPos());\n\t\t\tvar replaceRange = require('range').create(editor.getCaretPos(), selRange.length());\n\t\t\teditor.replaceContent(content, replaceRange.start, replaceRange.end, true);\n\t\t\teditor.createSelection(replaceRange.start, replaceRange.start + content.length);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (!actions.run('expand_abbreviation', editor, syntax, profile)) {\n\t\t\teditor.replaceContent(indent, editor.getCaretPos());\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n\t\n\t// XXX setup default handler\n\t/**\n\t * Extracts abbreviation from current caret \n\t * position and replaces it with formatted output \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\thandlers.add(function(editor, syntax, profile) {\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = module.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile, \n\t\t\t\t\trequire('actionUtils').captureContext(editor));\n\t\t\tif (content) {\n\t\t\t\teditor.replaceContent(content, caretPos - abbr.length, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {order: -1});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds custom expand abbreviation handler. The passed function should \n\t\t * return <code>true</code> if it was performed successfully, \n\t\t * <code>false</code> otherwise.\n\t\t * \n\t\t * Added handlers will be called when 'Expand Abbreviation' is called\n\t\t * in order they were added\n\t\t * @memberOf expandAbbreviation\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for abbreviation in editor from current caret position\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tfindAbbreviation: function(editor) {\n\t\t\t/** @type Range */\n\t\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = String(editor.getContent());\n\t\t\tif (range.length()) {\n\t\t\t\t// abbreviation is selected by user\n\t\t\t\treturn range.substring(content);\n\t\t\t}\n\t\t\t\n\t\t\t// search for new abbreviation from current caret position\n\t\t\tvar curLine = editor.getCurrentLineRange();\n\t\t\treturn require('actionUtils').extractAbbreviation(content.substring(curLine.start, range.start));\n\t\t}\n\t};\n});/**\n * Action that wraps content with abbreviation. For convenience, action is \n * defined as reusable module\n * @constructor\n * @memberOf __wrapWithAbbreviationDefine\n */\nemmet.define('wrapWithAbbreviation', function(require, _) {\n\t/** Back-references to current module */\n\tvar module = null;\n\t\n\t/**\n\t * Wraps content with abbreviation\n\t * @param {IEmmetEditor} Editor instance\n\t * @param {String} abbr Abbreviation to wrap with\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\trequire('actions').add('wrap_with_abbreviation', function (editor, abbr, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.editorUtils */\n\t\tvar editorUtils = require('editorUtils');\n\t\tabbr = abbr || editor.prompt(\"Enter abbreviation\");\n\t\t\n\t\tif (!abbr) \n\t\t\treturn null;\n\t\t\n\t\tabbr = String(abbr);\n\t\t\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find tag pair\n\t\t\tvar match = require('htmlMatcher').tag(info.content, range.start);\n\t\t\tif (!match) {  // nothing to wrap\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\trange = utils.narrowToNonSpace(info.content, match.range);\n\t\t}\n\t\t\n\t\tvar newContent = utils.escapeText(range.substring(info.content));\n\t\tvar result = module\n\t\t\t.wrap(abbr, editorUtils.unindent(editor, newContent), info.syntax, \n\t\t\t\t\tinfo.profile, require('actionUtils').captureContext(editor));\n\t\t\n\t\tif (result) {\n\t\t\teditor.replaceContent(result, range.start, range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Wraps passed text with abbreviation. Text will be placed inside last\n\t\t * expanded element\n\t\t * @memberOf wrapWithAbbreviation\n\t\t * @param {String} abbr Abbreviation\n\t\t * @param {String} text Text to wrap\n\t\t * @param {String} syntax Document type (html, xml, etc.). Default is 'html'\n\t\t * @param {String} profile Output profile's name. Default is 'plain'\n\t\t * @param {Object} contextNode Context node inside which abbreviation\n\t\t * is wrapped. It will be used as a reference for node name resolvers\n\t\t * @return {String}\n\t\t */\n\t\twrap: function(abbr, text, syntax, profile, contextNode) {\n\t\t\t/** @type emmet.filters */\n\t\t\tvar filters = require('filters');\n\t\t\t/** @type emmet.utils */\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tsyntax = syntax || emmet.defaultSyntax();\n\t\t\tprofile = require('profile').get(profile, syntax);\n\t\t\t\n\t\t\trequire('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar parsedTree = require('abbreviationParser').parse(data[0], {\n\t\t\t\tsyntax: syntax,\n\t\t\t\tpastedContent: text,\n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\tif (parsedTree) {\n\t\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\t\tfilters.apply(parsedTree, filtersList, profile);\n\t\t\t\treturn utils.replaceVariables(parsedTree.toString());\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t};\n});/**\n * Toggles HTML and CSS comments depending on current caret context. Unlike\n * the same action in most editors, this action toggles comment on currently\n * matched item—HTML tag or CSS selector—when nothing is selected.\n * \n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __toggleCommentAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Toggle HTML comment on current selection or tag\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleHTMLComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find matching tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\t\tif (tag) { // found pair\n\t\t\t\trange = tag.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '<!--', '-->', range);\n\t}\n\n\t/**\n\t * Simple CSS commenting\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleCSSComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, try to get current rule\n\t\t\t/** @type CSSRule */\n\t\t\tvar rule = require('cssEditTree').parseFromPosition(info.content, editor.getCaretPos());\n\t\t\tif (rule) {\n\t\t\t\tvar property = cssItemFromPosition(rule, editor.getCaretPos());\n\t\t\t\trange = property \n\t\t\t\t\t? property.range(true) \n\t\t\t\t\t: require('range').create(rule.nameRange(true).start, rule.source);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// still no selection, get current line\n\t\t\trange = require('range').create(editor.getCurrentLineRange());\n\t\t\trequire('utils').narrowToNonSpace(info.content, range);\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '/*', '*/', range);\n\t}\n\t\n\t/**\n\t * Returns CSS property from <code>rule</code> that matches passed position\n\t * @param {EditContainer} rule\n\t * @param {Number} absPos\n\t * @returns {EditElement}\n\t */\n\tfunction cssItemFromPosition(rule, absPos) {\n\t\t// do not use default EditContainer.itemFromPosition() here, because\n\t\t// we need to make a few assumptions to make CSS commenting more reliable\n\t\tvar relPos = absPos - (rule.options.offset || 0);\n\t\tvar reSafeChar = /^[\\s\\n\\r]/;\n\t\treturn _.find(rule.list(), function(item) {\n\t\t\tif (item.range().end === relPos) {\n\t\t\t\t// at the end of property, but outside of it\n\t\t\t\t// if there’s a space character at current position,\n\t\t\t\t// use current property\n\t\t\t\treturn reSafeChar.test(rule.source.charAt(relPos));\n\t\t\t}\n\t\t\t\n\t\t\treturn item.range().inside(relPos);\n\t\t});\n\t}\n\n\t/**\n\t * Search for nearest comment in <code>str</code>, starting from index <code>from</code>\n\t * @param {String} text Where to search\n\t * @param {Number} from Search start index\n\t * @param {String} start_token Comment start string\n\t * @param {String} end_token Comment end string\n\t * @return {Range} Returns null if comment wasn't found\n\t */\n\tfunction searchComment(text, from, startToken, endToken) {\n\t\tvar commentStart = -1;\n\t\tvar commentEnd = -1;\n\t\t\n\t\tvar hasMatch = function(str, start) {\n\t\t\treturn text.substr(start, str.length) == str;\n\t\t};\n\t\t\t\n\t\t// search for comment start\n\t\twhile (from--) {\n\t\t\tif (hasMatch(startToken, from)) {\n\t\t\t\tcommentStart = from;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (commentStart != -1) {\n\t\t\t// search for comment end\n\t\t\tfrom = commentStart;\n\t\t\tvar contentLen = text.length;\n\t\t\twhile (contentLen >= from++) {\n\t\t\t\tif (hasMatch(endToken, from)) {\n\t\t\t\t\tcommentEnd = from + endToken.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (commentStart != -1 && commentEnd != -1) \n\t\t\t? require('range').create(commentStart, commentEnd - commentStart) \n\t\t\t: null;\n\t}\n\n\t/**\n\t * Generic comment toggling routine\n\t * @param {IEmmetEditor} editor\n\t * @param {String} commentStart Comment start token\n\t * @param {String} commentEnd Comment end token\n\t * @param {Range} range Selection range\n\t * @return {Boolean}\n\t */\n\tfunction genericCommentToggle(editor, commentStart, commentEnd, range) {\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar content = editorUtils.outputInfo(editor).content;\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar newContent = null;\n\t\t\n\t\tvar utils = require('utils');\n\t\t\t\n\t\t/**\n\t\t * Remove comment markers from string\n\t\t * @param {Sting} str\n\t\t * @return {String}\n\t\t */\n\t\tfunction removeComment(str) {\n\t\t\treturn str\n\t\t\t\t.replace(new RegExp('^' + utils.escapeForRegexp(commentStart) + '\\\\s*'), function(str){\n\t\t\t\t\tcaretPos -= str.length;\n\t\t\t\t\treturn '';\n\t\t\t\t}).replace(new RegExp('\\\\s*' + utils.escapeForRegexp(commentEnd) + '$'), '');\n\t\t}\n\t\t\n\t\t// first, we need to make sure that this substring is not inside \n\t\t// comment\n\t\tvar commentRange = searchComment(content, caretPos, commentStart, commentEnd);\n\t\tif (commentRange && commentRange.overlap(range)) {\n\t\t\t// we're inside comment, remove it\n\t\t\trange = commentRange;\n\t\t\tnewContent = removeComment(range.substring(content));\n\t\t} else {\n\t\t\t// should add comment\n\t\t\t// make sure that there's no comment inside selection\n\t\t\tnewContent = commentStart + ' ' +\n\t\t\t\trange.substring(content)\n\t\t\t\t\t.replace(new RegExp(utils.escapeForRegexp(commentStart) + '\\\\s*|\\\\s*' + utils.escapeForRegexp(commentEnd), 'g'), '') +\n\t\t\t\t' ' + commentEnd;\n\t\t\t\t\n\t\t\t// adjust caret position\n\t\t\tcaretPos += commentStart.length + 1;\n\t\t}\n\n\t\t// replace editor content\n\t\tif (newContent !== null) {\n\t\t\tnewContent = utils.escapeText(newContent);\n\t\t\teditor.setCaretPos(range.start);\n\t\t\teditor.replaceContent(editorUtils.unindent(editor, newContent), range.start, range.end);\n\t\t\teditor.setCaretPos(caretPos);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Toggle comment on current editor's selection or HTML tag/CSS rule\n\t * @param {IEmmetEditor} editor\n\t */\n\trequire('actions').add('toggle_comment', function(editor) {\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tif (info.syntax == 'css') {\n\t\t\t// in case our editor is good enough and can recognize syntax from \n\t\t\t// current token, we have to make sure that cursor is not inside\n\t\t\t// 'style' attribute of html element\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && tag.open.range.inside(caretPos)) {\n\t\t\t\tinfo.syntax = 'html';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (info.syntax == 'css')\n\t\t\treturn toggleCSSComment(editor);\n\t\t\n\t\treturn toggleHTMLComment(editor);\n\t});\n});/**\n * Move between next/prev edit points. 'Edit points' are places between tags \n * and quotes of empty attributes in html\n * @constructor\n * \n * @memberOf __editPointActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Search for new caret insertion point\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {Number} inc Search increment: -1 — search left, 1 — search right\n\t * @param {Number} offset Initial offset relative to current caret position\n\t * @return {Number} Returns -1 if insertion point wasn't found\n\t */\n\tfunction findNewEditPoint(editor, inc, offset) {\n\t\tinc = inc || 1;\n\t\toffset = offset || 0;\n\t\t\n\t\tvar curPoint = editor.getCaretPos() + offset;\n\t\tvar content = String(editor.getContent());\n\t\tvar maxLen = content.length;\n\t\tvar nextPoint = -1;\n\t\tvar reEmptyLine = /^\\s+$/;\n\t\t\n\t\tfunction getLine(ix) {\n\t\t\tvar start = ix;\n\t\t\twhile (start >= 0) {\n\t\t\t\tvar c = content.charAt(start);\n\t\t\t\tif (c == '\\n' || c == '\\r')\n\t\t\t\t\tbreak;\n\t\t\t\tstart--;\n\t\t\t}\n\t\t\t\n\t\t\treturn content.substring(start, ix);\n\t\t}\n\t\t\t\n\t\twhile (curPoint <= maxLen && curPoint >= 0) {\n\t\t\tcurPoint += inc;\n\t\t\tvar curChar = content.charAt(curPoint);\n\t\t\tvar nextChar = content.charAt(curPoint + 1);\n\t\t\tvar prevChar = content.charAt(curPoint - 1);\n\t\t\t\t\n\t\t\tswitch (curChar) {\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\tif (nextChar == curChar && prevChar == '=') {\n\t\t\t\t\t\t// empty attribute\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '>':\n\t\t\t\t\tif (nextChar == '<') {\n\t\t\t\t\t\t// between tags\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\n':\n\t\t\t\tcase '\\r':\n\t\t\t\t\t// empty line\n\t\t\t\t\tif (reEmptyLine.test(getLine(curPoint - 1))) {\n\t\t\t\t\t\tnextPoint = curPoint;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPoint != -1)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn nextPoint;\n\t}\n\t\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\t\n\t/**\n\t * Move caret to previous edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('prev_edit_point', function(editor) {\n\t\tvar curPos = editor.getCaretPos();\n\t\tvar newPoint = findNewEditPoint(editor, -1);\n\t\t\t\n\t\tif (newPoint == curPos)\n\t\t\t// we're still in the same point, try searching from the other place\n\t\t\tnewPoint = findNewEditPoint(editor, -1, -2);\n\t\t\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Previous Edit Point'});\n\t\n\t/**\n\t * Move caret to next edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('next_edit_point', function(editor) {\n\t\tvar newPoint = findNewEditPoint(editor, 1);\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Actions that use stream parsers and tokenizers for traversing:\n * -- Search for next/previous items in HTML\n * -- Search for next/previous items in CSS\n * @constructor\n * @memberOf __selectItemActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\t\n\t/**\n\t * Generic function for searching for items to select\n\t * @param {IEmmetEditor} editor\n\t * @param {Boolean} isBackward Search backward (search forward otherwise)\n\t * @param {Function} extractFn Function that extracts item content\n\t * @param {Function} rangeFn Function that search for next token range\n\t */\n\tfunction findItem(editor, isBackward, extractFn, rangeFn) {\n\t\tvar range = require('range');\n\t\tvar content = require('editorUtils').outputInfo(editor).content;\n\t\t\n\t\tvar contentLength = content.length;\n\t\tvar itemRange, rng;\n\t\t/** @type Range */\n\t\tvar prevRange = range.create(-1, 0);\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\t\n\t\tvar searchPos = sel.start, loop = 100000; // endless loop protection\n\t\twhile (searchPos >= 0 && searchPos < contentLength && --loop > 0) {\n\t\t\tif ( (itemRange = extractFn(content, searchPos, isBackward)) ) {\n\t\t\t\tif (prevRange.equal(itemRange)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprevRange = itemRange.clone();\n\t\t\t\trng = rangeFn(itemRange.substring(content), itemRange.start, sel.clone());\n\t\t\t\t\n\t\t\t\tif (rng) {\n\t\t\t\t\teditor.createSelection(rng.start, rng.end);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tsearchPos = isBackward ? itemRange.start : itemRange.end - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsearchPos += isBackward ? -1 : 1;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t// XXX HTML section\n\t\n\t/**\n\t * Find next HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findNextHTMLItem(editor) {\n\t\tvar isFirst = true;\n\t\treturn findItem(editor, false, function(content, searchPos){\n\t\t\tif (isFirst) {\n\t\t\t\tisFirst = false;\n\t\t\t\treturn findOpeningTagFromPosition(content, searchPos);\n\t\t\t} else {\n\t\t\t\treturn getOpeningTagFromPosition(content, searchPos);\n\t\t\t}\n\t\t}, function(tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, false);\n\t\t});\n\t}\n\t\n\t/**\n\t * Find previous HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findPrevHTMLItem(editor) {\n\t\treturn findItem(editor, true, getOpeningTagFromPosition, function (tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, true);\n\t\t});\n\t}\n\t\n\t/**\n\t * Creates possible selection ranges for HTML tag\n\t * @param {String} source Original HTML source for tokens\n\t * @param {Array} tokens List of HTML tokens\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesHTML(source, tokens, offset) {\n\t\toffset = offset || 0;\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\tvar attrStart = -1, attrName = '', attrValue = '', attrValueRange, tagName;\n\t\t_.each(tokens, function(tok) {\n\t\t\tswitch (tok.type) {\n\t\t\t\tcase 'tag':\n\t\t\t\t\ttagName = source.substring(tok.start, tok.end);\n\t\t\t\t\tif (/^<[\\w\\:\\-]/.test(tagName)) {\n\t\t\t\t\t\t// add tag name\n\t\t\t\t\t\tresult.push(range.create({\n\t\t\t\t\t\t\tstart: tok.start + 1, \n\t\t\t\t\t\t\tend: tok.end\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attribute':\n\t\t\t\t\tattrStart = tok.start;\n\t\t\t\t\tattrName = source.substring(tok.start, tok.end);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'string':\n\t\t\t\t\t// attribute value\n\t\t\t\t\t// push full attribute first\n\t\t\t\t\t result.push(range.create(attrStart, tok.end - attrStart));\n\t\t\t\t\t \n\t\t\t\t\t attrValueRange = range.create(tok);\n\t\t\t\t\t attrValue = attrValueRange.substring(source);\n\t\t\t\t\t \n\t\t\t\t\t // is this a quoted attribute?\n\t\t\t\t\t if (isQuote(attrValue.charAt(0)))\n\t\t\t\t\t\t attrValueRange.start++;\n\t\t\t\t\t \n\t\t\t\t\t if (isQuote(attrValue.charAt(attrValue.length - 1)))\n\t\t\t\t\t\t attrValueRange.end--;\n\t\t\t\t\t \n\t\t\t\t\t result.push(attrValueRange);\n\t\t\t\t\t \n\t\t\t\t\t if (attrName == 'class') {\n\t\t\t\t\t\t result = result.concat(classNameRanges(attrValueRange.substring(source), attrValueRange.start));\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// offset ranges\n\t\t_.each(result, function(r) {\n\t\t\tr.shift(offset);\n\t\t});\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {        // remove empty\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {   // remove duplicates\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Returns ranges of class names in \"class\" attribute value\n\t * @param {String} className\n\t * @returns {Array}\n\t */\n\tfunction classNameRanges(className, offset) {\n\t\toffset = offset || 0;\n\t\tvar result = [];\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(className);\n\t\tvar range = require('range');\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (/[\\s\\u00a0]/.test(ch)) {\n\t\t\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start - 1));\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start));\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Returns best HTML tag range match for current selection\n\t * @param {String} tag Tag declaration\n\t * @param {Number} offset Tag's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForHTMLItem(tag, offset, selRange, isBackward) {\n\t\tvar ranges = makePossibleRangesHTML(tag, require('xmlParser').parse(tag), offset);\n\t\t\n\t\tif (isBackward)\n\t\t\tranges.reverse();\n\t\t\n\t\t// try to find selected range\n\t\tvar curRange = _.find(ranges, function(r) {\n\t\t\treturn r.equal(selRange);\n\t\t});\n\t\t\n\t\tif (curRange) {\n\t\t\tvar ix = _.indexOf(ranges, curRange);\n\t\t\tif (ix < ranges.length - 1)\n\t\t\t\treturn ranges[ix + 1];\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// no selected range, find nearest one\n\t\tif (isBackward)\n\t\t\t// search backward\n\t\t\treturn _.find(ranges, function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t});\n\t\t\n\t\t// search forward\n\t\t// to deal with overlapping ranges (like full attribute definition\n\t\t// and attribute value) let's find range under caret first\n\t\tif (!curRange) {\n\t\t\tvar matchedRanges = _.filter(ranges, function(r) {\n\t\t\t\treturn r.inside(selRange.end);\n\t\t\t});\n\t\t\t\n\t\t\tif (matchedRanges.length > 1)\n\t\t\t\treturn matchedRanges[1];\n\t\t}\n\t\t\n\t\t\n\t\treturn _.find(ranges, function(r) {\n\t\t\treturn r.end > selRange.end;\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for opening tag in content, starting at specified position\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction findOpeningTagFromPosition(html, pos) {\n\t\tvar tag;\n\t\twhile (pos >= 0) {\n\t\t\tif (tag = getOpeningTagFromPosition(html, pos))\n\t\t\t\treturn tag;\n\t\t\tpos--;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction getOpeningTagFromPosition(html, pos) {\n\t\tvar m;\n\t\tif (html.charAt(pos) == '<' && (m = html.substring(pos, html.length).match(startTag))) {\n\t\t\treturn require('range').create(pos, m[0]);\n\t\t}\n\t}\n\t\n\tfunction isQuote(ch) {\n\t\treturn ch == '\"' || ch == \"'\";\n\t}\n\t\n\t/**\n\t * Makes all possible selection ranges for specified CSS property\n\t * @param {CSSProperty} property\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesCSS(property) {\n\t\t// find all possible ranges, sorted by position and size\n\t\tvar valueRange = property.valueRange(true);\n\t\tvar result = [property.range(true), valueRange];\n\t\tvar stringStream = require('stringStream');\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar range = require('range');\n\t\t\n\t\t// locate parts of complex values.\n\t\t// some examples:\n\t\t// – 1px solid red: 3 parts\n\t\t// – arial, sans-serif: enumeration, 2 parts\n\t\t// – url(image.png): function value part\n\t\tvar value = property.value();\n\t\t_.each(property.valueParts(), function(r) {\n\t\t\t// add absolute range\n\t\t\tvar clone = r.clone();\n\t\t\tresult.push(clone.shift(valueRange.start));\n\t\t\t\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = stringStream.create(r.substring(value));\n\t\t\tif (stream.match(/^[\\w\\-]+\\(/, true)) {\n\t\t\t\t// we have a function, find values in it.\n\t\t\t\t// but first add function contents\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tstream.skipToPair('(', ')');\n\t\t\t\tvar fnBody = stream.current();\n\t\t\t\tresult.push(range.create(clone.start + stream.start, fnBody));\n\t\t\t\t\n\t\t\t\t// find parts\n\t\t\t\t_.each(cssEditTree.findParts(fnBody), function(part) {\n\t\t\t\t\tresult.push(range.create(clone.start + stream.start + part.start, part.substring(fnBody)));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\t\t// optimize result: remove empty ranges and duplicates\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Tries to find matched CSS property and nearest range for selection\n\t * @param {CSSRule} rule\n\t * @param {Range} selRange\n\t * @param {Boolean} isBackward\n\t * @returns {Range}\n\t */\n\tfunction matchedRangeForCSSProperty(rule, selRange, isBackward) {\n\t\t/** @type CSSProperty */\n\t\tvar property = null;\n\t\tvar possibleRanges, curRange = null, ix;\n\t\tvar list = rule.list();\n\t\tvar searchFn, nearestItemFn;\n\t\t\n\t\tif (isBackward) {\n\t\t\tlist.reverse();\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).start <= selRange.start;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t};\n\t\t} else {\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).end >= selRange.end;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.end > selRange.start;\n\t\t\t};\n\t\t}\n\t\t\n\t\t// search for nearest to selection CSS property\n\t\twhile (property = _.find(list, searchFn)) {\n\t\t\tpossibleRanges = makePossibleRangesCSS(property);\n\t\t\tif (isBackward)\n\t\t\t\tpossibleRanges.reverse();\n\t\t\t\n\t\t\t// check if any possible range is already selected\n\t\t\tcurRange = _.find(possibleRanges, function(r) {\n\t\t\t\treturn r.equal(selRange);\n\t\t\t});\n\t\t\t\n\t\t\tif (!curRange) {\n\t\t\t\t// no selection, select nearest item\n\t\t\t\tvar matchedRanges = _.filter(possibleRanges, function(r) {\n\t\t\t\t\treturn r.inside(selRange.end);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (matchedRanges.length > 1) {\n\t\t\t\t\tcurRange = matchedRanges[1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (curRange = _.find(possibleRanges, nearestItemFn))\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tix = _.indexOf(possibleRanges, curRange);\n\t\t\t\tif (ix != possibleRanges.length - 1) {\n\t\t\t\t\tcurRange = possibleRanges[ix + 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcurRange = null;\n\t\t\tselRange.start = selRange.end = isBackward \n\t\t\t\t? property.range(true).start - 1\n\t\t\t\t: property.range(true).end + 1;\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\tfunction findNextCSSItem(editor) {\n\t\treturn findItem(editor, false, require('cssEditTree').extractRule, getRangeForNextItemInCSS);\n\t}\n\t\n\tfunction findPrevCSSItem(editor) {\n\t\treturn findItem(editor, true, require('cssEditTree').extractRule, getRangeForPrevItemInCSS);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS after current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForNextItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\t// check if selector is matched\n\t\tvar range = tree.nameRange(true);\n\t\tif (selRange.end < range.end) {\n\t\t\treturn range;\n\t\t}\n\t\t\n\t\treturn matchedRangeForCSSProperty(tree, selRange, false);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS before current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if previous item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForPrevItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\tvar curRange = matchedRangeForCSSProperty(tree, selRange, true);\n\t\t\n\t\tif (!curRange) {\n\t\t\t// no matched property, try to match selector\n\t\t\tvar range = tree.nameRange(true);\n\t\t\tif (selRange.start > range.start) {\n\t\t\t\treturn range;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\t// XXX register actions\n\tvar actions = require('actions');\n\tactions.add('select_next_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findNextCSSItem(editor);\n\t\telse\n\t\t\treturn findNextHTMLItem(editor);\n\t});\n\t\n\tactions.add('select_previous_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findPrevCSSItem(editor);\n\t\telse\n\t\t\treturn findPrevHTMLItem(editor);\n\t});\n});/**\n * HTML pair matching (balancing) actions\n * @constructor\n * @memberOf __matchPairActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\tvar matcher = require('htmlMatcher');\n\tvar lastMatch = null;\n\t\n\t/**\n\t * Find and select HTML tag pair\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} direction Direction of pair matching: 'in' or 'out'. \n\t * Default is 'out'\n\t */\n\tfunction matchPair(editor, direction) {\n\t\tdirection = String((direction || 'out').toLowerCase());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\tvar range = require('range');\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\tvar content = info.content;\n\t\t\n\t\t// validate previous match\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\tlastMatch = null;\n\t\t}\n\t\t\n\t\tif (lastMatch && sel.length()) {\n\t\t\tif (direction == 'in') {\n\t\t\t\t// user has previously selected tag and wants to move inward\n\t\t\t\tif (lastMatch.type == 'tag' && !lastMatch.close) {\n\t\t\t\t\t// unary tag was selected, can't move inward\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tif (lastMatch.range.equal(lastMatch.outerRange)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar narrowed = require('utils').narrowToNonSpace(content, lastMatch.innerRange);\n\t\t\t\t\t\tlastMatch = matcher.find(content, narrowed.start + 1);\n\t\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.outerRange.equal(sel)) {\n\t\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\t\t!lastMatch.innerRange.equal(lastMatch.outerRange) \n\t\t\t\t\t\t&& lastMatch.range.equal(lastMatch.innerRange) \n\t\t\t\t\t\t&& sel.equal(lastMatch.range)) {\n\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t} else {\n\t\t\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.innerRange.equal(sel)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t}\n\t\t\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\teditor.createSelection(lastMatch.range.start, lastMatch.range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tlastMatch = null;\n\t\treturn false;\n\t}\n\t\n\tactions.add('match_pair', matchPair, {hidden: true});\n\tactions.add('match_pair_inward', function(editor){\n\t\treturn matchPair(editor, 'in');\n\t}, {label: 'HTML/Match Pair Tag (inward)'});\n\n\tactions.add('match_pair_outward', function(editor){\n\t\treturn matchPair(editor, 'out');\n\t}, {label: 'HTML/Match Pair Tag (outward)'});\n\t\n\t/**\n\t * Moves caret to matching opening or closing tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tactions.add('matching_pair', function(editor) {\n\t\tvar content = String(editor.getContent());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tif (content.charAt(caretPos) == '<') \n\t\t\t// looks like caret is outside of tag pair  \n\t\t\tcaretPos++;\n\t\t\t\n\t\tvar tag = matcher.tag(content, caretPos);\n\t\tif (tag && tag.close) { // exclude unary tags\n\t\t\tif (tag.open.range.inside(caretPos)) {\n\t\t\t\teditor.setCaretPos(tag.close.range.start);\n\t\t\t} else {\n\t\t\t\teditor.setCaretPos(tag.open.range.start);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Go To Matching Tag Pair'});\n});/**\n * Gracefully removes tag under cursor\n * \n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('remove_tag', function(editor) {\n\t\tvar utils = require('utils');\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\t// search for tag\n\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\tif (!tag.close) {\n\t\t\t\t// simply remove unary tag\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder(), tag.range.start, tag.range.end);\n\t\t\t} else {\n\t\t\t\t// remove tag and its newlines\n\t\t\t\t/** @type Range */\n\t\t\t\tvar tagContentRange = utils.narrowToNonSpace(info.content, tag.innerRange);\n\t\t\t\t/** @type Range */\n\t\t\t\tvar startLineBounds = utils.findNewlineBounds(info.content, tagContentRange.start);\n\t\t\t\tvar startLinePad = utils.getLinePadding(startLineBounds.substring(info.content));\n\t\t\t\tvar tagContent = tagContentRange.substring(info.content);\n\t\t\t\t\n\t\t\t\ttagContent = utils.unindentString(tagContent, startLinePad);\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder() + utils.escapeText(tagContent), tag.outerRange.start, tag.outerRange.end);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Remove Tag'});\n});\n/**\n * Splits or joins tag, e.g. transforms it into a short notation and vice versa:<br>\n * &lt;div&gt;&lt;/div&gt; → &lt;div /&gt; : join<br>\n * &lt;div /&gt; → &lt;div&gt;&lt;/div&gt; : split\n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __splitJoinTagAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {Object} profile\n\t * @param {Object} tag\n\t */\n\tfunction joinTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\t// empty closing slash is a nonsense for this action\n\t\tvar slash = profile.selfClosing() || ' /';\n\t\tvar content = tag.open.range.substring(tag.source).replace(/\\s*>$/, slash + '>');\n\t\t\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// update caret position\n\t\tif (content.length + tag.outerRange.start < caretPos) {\n\t\t\tcaretPos = content.length + tag.outerRange.start;\n\t\t}\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\tfunction splitTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar nl = utils.getNewline();\n\t\tvar pad = require('resources').getVariable('indentation');\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// define tag content depending on profile\n\t\tvar tagContent = (profile.tag_nl === true) ? nl + pad + nl : '';\n\t\tvar content = tag.outerContent().replace(/\\s*\\/>$/, '>');\n\t\tcaretPos = tag.outerRange.start + content.length;\n\t\tcontent += tagContent + '</' + tag.open.name + '>';\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\trequire('actions').add('split_join_tag', function(editor, profileName) {\n\t\tvar matcher = require('htmlMatcher');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor, null, profileName);\n\t\tvar profile = require('profile').get(info.profile);\n\t\t\n\t\t// find tag at current position\n\t\tvar tag = matcher.tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\treturn tag.close \n\t\t\t\t? joinTag(editor, profile, tag) \n\t\t\t\t: splitTag(editor, profile, tag);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Split\\\\Join Tag Declaration'});\n});/**\n * Reflect CSS value: takes rule's value under caret and pastes it for the same \n * rules with vendor prefixes\n * @constructor\n * @memberOf __reflectCSSActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('reflectCSSValue', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\trequire('actions').add('reflect_css_value', function(editor) {\n\t\tif (editor.getSyntax() != 'css') return false;\n\t\t\n\t\treturn require('actionUtils').compoundUpdate(editor, doCSSReflection(editor));\n\t}, {label: 'CSS/Reflect Value'});\n\t\n\tfunction doCSSReflection(editor) {\n\t\t/** @type emmet.cssEditTree */\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar outputInfo = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tvar cssRule = cssEditTree.parseFromPosition(outputInfo.content, caretPos);\n\t\tif (!cssRule) return;\n\t\t\n\t\tvar property = cssRule.itemFromPosition(caretPos, true);\n\t\t// no property under cursor, nothing to reflect\n\t\tif (!property) return;\n\t\t\n\t\tvar oldRule = cssRule.source;\n\t\tvar offset = cssRule.options.offset;\n\t\tvar caretDelta = caretPos - offset - property.range().start;\n\t\t\n\t\thandlers.exec(false, [property]);\n\t\t\n\t\tif (oldRule !== cssRule.source) {\n\t\t\treturn {\n\t\t\t\tdata:  cssRule.source,\n\t\t\t\tstart: offset,\n\t\t\t\tend:   offset + oldRule.length,\n\t\t\t\tcaret: offset + property.range().start + caretDelta\n\t\t\t};\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns regexp that should match reflected CSS property names\n\t * @param {String} name Current CSS property name\n\t * @return {RegExp}\n\t */\n\tfunction getReflectedCSSName(name) {\n\t\tname = require('cssEditTree').baseName(name);\n\t\tvar vendorPrefix = '^(?:\\\\-\\\\w+\\\\-)?', m;\n\t\t\n\t\tif (name == 'opacity' || name == 'filter') {\n\t\t\treturn new RegExp(vendorPrefix + '(?:opacity|filter)$');\n\t\t} else if (m = name.match(/^border-radius-(top|bottom)(left|right)/)) {\n\t\t\t// Mozilla-style border radius\n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-' + m[1] + '-' + m[2] + '-radius)$');\n\t\t} else if (m = name.match(/^border-(top|bottom)-(left|right)-radius/)) { \n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-radius-' + m[1] + m[2] + ')$');\n\t\t}\n\t\t\n\t\treturn new RegExp(vendorPrefix + name + '$');\n\t}\n\t\n\t/**\n\t * Reflects value from <code>donor</code> into <code>receiver</code>\n\t * @param {CSSProperty} donor Donor CSS property from which value should\n\t * be reflected\n\t * @param {CSSProperty} receiver Property that should receive reflected \n\t * value from donor\n\t */\n\tfunction reflectValue(donor, receiver) {\n\t\tvar value = getReflectedValue(donor.name(), donor.value(), \n\t\t\t\treceiver.name(), receiver.value());\n\t\t\n\t\treceiver.value(value);\n\t}\n\t\n\t/**\n\t * Returns value that should be reflected for <code>refName</code> CSS property\n\t * from <code>curName</code> property. This function is used for special cases,\n\t * when the same result must be achieved with different properties for different\n\t * browsers. For example: opаcity:0.5; → filter:alpha(opacity=50);<br><br>\n\t * \n\t * This function does value conversion between different CSS properties\n\t * \n\t * @param {String} curName Current CSS property name\n\t * @param {String} curValue Current CSS property value\n\t * @param {String} refName Receiver CSS property's name \n\t * @param {String} refValue Receiver CSS property's value\n\t * @return {String} New value for receiver property\n\t */\n\tfunction getReflectedValue(curName, curValue, refName, refValue) {\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar utils = require('utils');\n\t\tcurName = cssEditTree.baseName(curName);\n\t\trefName = cssEditTree.baseName(refName);\n\t\t\n\t\tif (curName == 'opacity' && refName == 'filter') {\n\t\t\treturn refValue.replace(/opacity=[^)]*/i, 'opacity=' + Math.floor(parseFloat(curValue) * 100));\n\t\t} else if (curName == 'filter' && refName == 'opacity') {\n\t\t\tvar m = curValue.match(/opacity=([^)]*)/i);\n\t\t\treturn m ? utils.prettifyNumber(parseInt(m[1]) / 100) : refValue;\n\t\t}\n\t\t\n\t\treturn curValue;\n\t}\n\t\n\t// XXX add default handler\n\thandlers.add(function(property) {\n\t\tvar reName = getReflectedCSSName(property.name());\n\t\t_.each(property.parent.list(), function(p) {\n\t\t\tif (reName.test(p.name())) {\n\t\t\t\treflectValue(property, p);\n\t\t\t}\n\t\t});\n\t}, {order: -1});\n\t\n\treturn {\n\t\t/**\n\t\t * Adds custom reflect handler. The passed function will receive matched\n\t\t * CSS property (as <code>CSSEditElement</code> object) and should\n\t\t * return <code>true</code> if it was performed successfully (handled \n\t\t * reflection), <code>false</code> otherwise.\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t}\n\t};\n});/**\n * Evaluates simple math expression under caret\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('evaluate_math_expression', function(editor) {\n\t\tvar actionUtils = require('actionUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar content = String(editor.getContent());\n\t\tvar chars = '.+-*/\\\\';\n\t\t\n\t\t/** @type Range */\n\t\tvar sel = require('range').create(editor.getSelectionRange());\n\t\tif (!sel.length()) {\n\t\t\tsel = actionUtils.findExpressionBounds(editor, function(ch) {\n\t\t\t\treturn utils.isNumeric(ch) || chars.indexOf(ch) != -1;\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (sel && sel.length()) {\n\t\t\tvar expr = sel.substring(content);\n\t\t\t\n\t\t\t// replace integral division: 11\\2 => Math.round(11/2) \n\t\t\texpr = expr.replace(/([\\d\\.\\-]+)\\\\([\\d\\.\\-]+)/g, 'Math.round($1/$2)');\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar result = utils.prettifyNumber(new Function('return ' + expr)());\n\t\t\t\teditor.replaceContent(result, sel.start, sel.end);\n\t\t\t\teditor.setCaretPos(sel.start + result.length);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Numbers/Evaluate Math Expression'});\n});\n/**\n * Increment/decrement number under cursor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Extract number from current caret position of the <code>editor</code> and\n\t * increment it by <code>step</code>\n\t * @param {IEmmetEditor} editor\n\t * @param {Number} step Increment step (may be negative)\n\t */\n\tfunction incrementNumber(editor, step) {\n\t\tvar utils = require('utils');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar hasSign = false;\n\t\tvar hasDecimal = false;\n\t\t\t\n\t\tvar r = actionUtils.findExpressionBounds(editor, function(ch, pos, content) {\n\t\t\tif (utils.isNumeric(ch))\n\t\t\t\treturn true;\n\t\t\tif (ch == '.') {\n\t\t\t\t// make sure that next character is numeric too\n\t\t\t\tif (!utils.isNumeric(content.charAt(pos + 1)))\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\treturn hasDecimal ? false : hasDecimal = true;\n\t\t\t}\n\t\t\tif (ch == '-')\n\t\t\t\treturn hasSign ? false : hasSign = true;\n\t\t\t\t\n\t\t\treturn false;\n\t\t});\n\t\t\t\n\t\tif (r && r.length()) {\n\t\t\tvar strNum = r.substring(String(editor.getContent()));\n\t\t\tvar num = parseFloat(strNum);\n\t\t\tif (!_.isNaN(num)) {\n\t\t\t\tnum = utils.prettifyNumber(num + step);\n\t\t\t\t\n\t\t\t\t// do we have zero-padded number?\n\t\t\t\tif (/^(\\-?)0+[1-9]/.test(strNum)) {\n\t\t\t\t\tvar minus = '';\n\t\t\t\t\tif (RegExp.$1) {\n\t\t\t\t\t\tminus = '-';\n\t\t\t\t\t\tnum = num.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tvar parts = num.split('.');\n\t\t\t\t\tparts[0] = utils.zeroPadString(parts[0], intLength(strNum));\n\t\t\t\t\tnum = minus + parts.join('.');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(num, r.start, r.end);\n\t\t\t\teditor.createSelection(r.start, r.start + num.length);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Returns length of integer part of number\n\t * @param {String} num\n\t */\n\tfunction intLength(num) {\n\t\tnum = num.replace(/^\\-/, '');\n\t\tif (~num.indexOf('.')) {\n\t\t\treturn num.split('.')[0].length;\n\t\t}\n\t\t\n\t\treturn num.length;\n\t}\n\t\n\tvar actions = require('actions');\n\t_.each([1, -1, 10, -10, 0.1, -0.1], function(num) {\n\t\tvar prefix = num > 0 ? 'increment' : 'decrement';\n\t\t\n\t\tactions.add(prefix + '_number_by_' + String(Math.abs(num)).replace('.', '').substring(0, 2), function(editor) {\n\t\t\treturn incrementNumber(editor, num);\n\t\t}, {label: 'Numbers/' + prefix.charAt(0).toUpperCase() + prefix.substring(1) + ' number by ' + Math.abs(num)});\n\t});\n});/**\n * Actions to insert line breaks. Some simple editors (like browser's \n * &lt;textarea&gt;, for example) do not provide such simple things\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar actions = require('actions');\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\t// setup default preferences\n\tprefs.define('css.closeBraceIndentation', '\\n',\n\t\t\t'Indentation before closing brace of CSS rule. Some users prefere ' \n\t\t\t+ 'indented closing brace of CSS rule for better readability. '\n\t\t\t+ 'This preference’s value will be automatically inserted before '\n\t\t\t+ 'closing brace when user adds newline in newly created CSS rule '\n\t\t\t+ '(e.g. when “Insert formatted linebreak” action will be performed ' \n\t\t\t+ 'in CSS file). If you’re such user, you may want to write put a value ' \n\t\t\t+ 'like <code>\\\\n\\\\t</code> in this preference.');\n\t\n\t/**\n\t * Inserts newline character with proper indentation in specific positions only.\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if line break was inserted \n\t */\n\tactions.add('insert_formatted_line_break_only', function(editor) {\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.resources */\n\t\tvar res = require('resources');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar nl = utils.getNewline();\n\t\t\n\t\tif (_.include(['html', 'xml', 'xsl'], info.syntax)) {\n\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t// let's see if we're breaking newly created tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && !tag.innerRange.length()) {\n\t\t\t\teditor.replaceContent(nl + pad + utils.getCaretPlaceholder() + nl, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (info.syntax == 'css') {\n\t\t\t/** @type String */\n\t\t\tvar content = info.content;\n\t\t\tif (caretPos && content.charAt(caretPos - 1) == '{') {\n\t\t\t\tvar append = prefs.get('css.closeBraceIndentation');\n\t\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t\t\n\t\t\t\tvar hasCloseBrace = content.charAt(caretPos) == '}';\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\t// do we really need special formatting here?\n\t\t\t\t\t// check if this is really a newly created rule,\n\t\t\t\t\t// look ahead for a closing brace\n\t\t\t\t\tfor (var i = caretPos, il = content.length, ch; i < il; i++) {\n\t\t\t\t\t\tch = content.charAt(i);\n\t\t\t\t\t\tif (ch == '{') {\n\t\t\t\t\t\t\t// ok, this is a new rule without closing brace\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ch == '}') {\n\t\t\t\t\t\t\t// not a new rule, just add indentation\n\t\t\t\t\t\t\tappend = '';\n\t\t\t\t\t\t\thasCloseBrace = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\tappend += '}';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// defining rule set\n\t\t\t\tvar insValue = nl + pad + utils.getCaretPlaceholder() + append;\n\t\t\t\teditor.replaceContent(insValue, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn false;\n\t}, {hidden: true});\n\t\n\t/**\n\t * Inserts newline character with proper indentation. This action is used in\n\t * editors that doesn't have indentation control (like textarea element) to \n\t * provide proper indentation\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('insert_formatted_line_break', function(editor) {\n\t\tif (!actions.run('insert_formatted_line_break_only', editor)) {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar curPadding = require('editorUtils').getCurrentLinePadding(editor);\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar len = content.length;\n\t\t\tvar nl = utils.getNewline();\n\t\t\t\t\n\t\t\t// check out next line padding\n\t\t\tvar lineRange = editor.getCurrentLineRange();\n\t\t\tvar nextPadding = '';\n\t\t\t\t\n\t\t\tfor (var i = lineRange.end + 1, ch; i < len; i++) {\n\t\t\t\tch = content.charAt(i);\n\t\t\t\tif (ch == ' ' || ch == '\\t')\n\t\t\t\t\tnextPadding += ch;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPadding.length > curPadding.length)\n\t\t\t\teditor.replaceContent(nl + nextPadding, caretPos, caretPos, true);\n\t\t\telse\n\t\t\t\teditor.replaceContent(nl, caretPos);\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n});/**\n * Merges selected lines or lines between XHTML tag pairs\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('merge_lines', function(editor) {\n\t\tvar matcher = require('htmlMatcher');\n\t\tvar utils = require('utils');\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar info = editorUtils.outputInfo(editor);\n\t\t\n\t\t/** @type Range */\n\t\tvar selection = require('range').create(editor.getSelectionRange());\n\t\tif (!selection.length()) {\n\t\t\t// find matching tag\n\t\t\tvar pair = matcher.find(info.content, editor.getCaretPos());\n\t\t\tif (pair) {\n\t\t\t\tselection = pair.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (selection.length()) {\n\t\t\t// got range, merge lines\n\t\t\tvar text =  selection.substring(info.content);\n\t\t\tvar lines = utils.splitByLines(text);\n\t\t\t\n\t\t\tfor (var i = 1; i < lines.length; i++) {\n\t\t\t\tlines[i] = lines[i].replace(/^\\s+/, '');\n\t\t\t}\n\t\t\t\n\t\t\ttext = lines.join('').replace(/\\s{2,}/, ' ');\n\t\t\tvar textLen = text.length;\n\t\t\ttext = utils.escapeText(text);\n\t\t\teditor.replaceContent(text, selection.start, selection.end);\n\t\t\teditor.createSelection(selection.start, selection.start + textLen);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Encodes/decodes image under cursor to/from base64\n * @param {IEmmetEditor} editor\n * @since 0.65\n * \n * @memberOf __base64ActionDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('encode_decode_data_url', function(editor) {\n\t\tvar data = String(editor.getSelection());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\t\n\t\tif (!data) {\n\t\t\t// no selection, try to find image bounds from current caret position\n\t\t\tvar text = String(editor.getContent()),  m;\n\t\t\twhile (caretPos-- >= 0) {\n\t\t\t\tif (startsWith('src=', text, caretPos)) { // found <img src=\"\">\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(src=([\"'])?)([^'\"<>\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (startsWith('url(', text, caretPos)) { // found CSS url() pattern\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(url\\((['\"])?)([^'\"\\)\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (data) {\n\t\t\tif (startsWith('data:', data))\n\t\t\t\treturn decodeFromBase64(editor, data, caretPos);\n\t\t\telse\n\t\t\t\treturn encodeToBase64(editor, data, caretPos);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Encode\\\\Decode data:URL image'});\n\t\n\t/**\n\t * Test if <code>text</code> starts with <code>token</code> at <code>pos</code>\n\t * position. If <code>pos</code> is omitted, search from beginning of text \n\t * @param {String} token Token to test\n\t * @param {String} text Where to search\n\t * @param {Number} pos Position where to start search\n\t * @return {Boolean}\n\t * @since 0.65\n\t */\n\tfunction startsWith(token, text, pos) {\n\t\tpos = pos || 0;\n\t\treturn text.charAt(pos) == token.charAt(0) && text.substr(pos, token.length) == token;\n\t}\n\t\n\t/**\n\t * Encodes image to base64\n\t * \n\t * @param {IEmmetEditor} editor\n\t * @param {String} imgPath Path to image\n\t * @param {Number} pos Caret position where image is located in the editor\n\t * @return {Boolean}\n\t */\n\tfunction encodeToBase64(editor, imgPath, pos) {\n\t\tvar file = require('file');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar editorFile = editor.getFilePath();\n\t\tvar defaultMimeType = 'application/octet-stream';\n\t\t\t\n\t\tif (editorFile === null) {\n\t\t\tthrow \"You should save your file before using this action\";\n\t\t}\n\t\t\n\t\t// locate real image path\n\t\tvar realImgPath = file.locateFile(editorFile, imgPath);\n\t\tif (realImgPath === null) {\n\t\t\tthrow \"Can't find \" + imgPath + ' file';\n\t\t}\n\t\t\n\t\tfile.read(realImgPath, function(err, content) {\n\t\t\tif (err) {\n\t\t\t\tthrow 'Unable to read ' + realImgPath + ': ' + err;\n\t\t\t}\n\t\t\t\n\t\t\tvar b64 = require('base64').encode(String(content));\n\t\t\tif (!b64) {\n\t\t\t\tthrow \"Can't encode file content to base64\";\n\t\t\t}\n\t\t\t\n\t\t\tb64 = 'data:' + (actionUtils.mimeTypes[String(file.getExt(realImgPath))] || defaultMimeType) +\n\t\t\t\t';base64,' + b64;\n\t\t\t\t\n\t\t\teditor.replaceContent('$0' + b64, pos, pos + imgPath.length);\n\t\t});\n\t\t\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * Decodes base64 string back to file.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} data Base64-encoded file content\n\t * @param {Number} pos Caret position where image is located in the editor\n\t */\n\tfunction decodeFromBase64(editor, data, pos) {\n\t\t// ask user to enter path to file\n\t\tvar filePath = String(editor.prompt('Enter path to file (absolute or relative)'));\n\t\tif (!filePath)\n\t\t\treturn false;\n\t\t\t\n\t\tvar file = require('file');\n\t\tvar absPath = file.createPath(editor.getFilePath(), filePath);\n\t\tif (!absPath) {\n\t\t\tthrow \"Can't save file\";\n\t\t}\n\t\t\n\t\tfile.save(absPath, require('base64').decode( data.replace(/^data\\:.+?;.+?,/, '') ));\n\t\teditor.replaceContent('$0' + filePath, pos, pos + data.length);\n\t\treturn true;\n\t}\n});\n/**\n * Automatically updates image size attributes in HTML's &lt;img&gt; element or\n * CSS rule\n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __updateImageSizeAction\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Updates image size of &lt;img src=\"\"&gt; tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeHTML(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\n\t\t\tgetImageSizeForSource(editor, xmlElem.value('src'), function(size) {\n\t\t\t\tif (size) {\n\t\t\t\t\tvar compoundData = xmlElem.range(true);\n\t\t\t\t\txmlElem.value('width', size.width);\n\t\t\t\t\txmlElem.value('height', size.height, xmlElem.indexOf('width') + 1);\n\t\t\t\t\t\n\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\tdata: xmlElem.toString(),\n\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates image size of CSS property\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeCSS(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (cssRule) {\n\t\t\t// check if there is property with image under caret\n\t\t\tvar prop = cssRule.itemFromPosition(offset, true), m;\n\t\t\tif (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\n\t\t\t\tgetImageSizeForSource(editor, m[2], function(size) {\n\t\t\t\t\tif (size) {\n\t\t\t\t\t\tvar compoundData = cssRule.range(true);\n\t\t\t\t\t\tcssRule.value('width', size.width + 'px');\n\t\t\t\t\t\tcssRule.value('height', size.height + 'px', cssRule.indexOf('width') + 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\t\tdata: cssRule.toString(),\n\t\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns image dimensions for source\n\t * @param {IEmmetEditor} editor\n\t * @param {String} src Image source (path or data:url)\n\t */\n\tfunction getImageSizeForSource(editor, src, callback) {\n\t\tvar fileContent;\n\t\tvar au = require('actionUtils');\n\t\tif (src) {\n\t\t\t// check if it is data:url\n\t\t\tif (/^data:/.test(src)) {\n\t\t\t\tfileContent = require('base64').decode( src.replace(/^data\\:.+?;.+?,/, '') );\n\t\t\t\treturn callback(au.getImageSize(fileContent));\n\t\t\t}\n\t\t\t\n\t\t\tvar file = require('file');\n\t\t\tvar absPath = file.locateFile(editor.getFilePath(), src);\n\t\t\tif (absPath === null) {\n\t\t\t\tthrow \"Can't find \" + src + ' file';\n\t\t\t}\n\t\t\t\n\t\t\tfile.read(absPath, function(err, content) {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow 'Unable to read ' + absPath + ': ' + err;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontent = String(content);\n\t\t\t\tcallback(au.getImageSize(content));\n\t\t\t});\n\t\t}\n\t}\n\t\n\trequire('actions').add('update_image_size', function(editor) {\n\t\t// this action will definitely won’t work in SASS dialect,\n\t\t// but may work in SCSS or LESS\n\t\tif (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n\t\t\tupdateImageSizeCSS(editor);\n\t\t} else {\n\t\t\tupdateImageSizeHTML(editor);\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n});/**\n * Resolver for fast CSS typing. Handles abbreviations with the following \n * notation:<br>\n * \n * <code>(-vendor prefix)?property(value)*(!)?</code>\n * \n * <br><br>\n * <b>Abbreviation handling</b><br>\n * \n * By default, Emmet searches for matching snippet definition for provided abbreviation.\n * If snippet wasn't found, Emmet automatically generates element with \n * abbreviation's name. For example, <code>foo</code> abbreviation will generate\n * <code>&lt;foo&gt;&lt;/foo&gt;</code> output.\n * <br><br>\n * This module will capture all expanded properties and upgrade them with values, \n * vendor prefixes and !important declarations. All unmatched abbreviations will \n * be automatically transformed into <code>property-name: ${1}</code> snippets. \n * \n * <b>Vendor prefixes<b><br>\n * \n * If CSS-property is preceded with dash, resolver should output property with\n * all <i>known</i> vendor prefixes. For example, if <code>brad</code> \n * abbreviation generates <code>border-radius: ${value};</code> snippet,\n * the <code>-brad</code> abbreviation should generate:\n * <pre><code>\n * -webkit-border-radius: ${value};\n * -moz-border-radius: ${value};\n * border-radius: ${value};\n * </code></pre>\n * Note that <i>o</i> and <i>ms</i> prefixes are omitted since Opera and IE \n * supports unprefixed property.<br><br>\n * \n * Users can also provide an explicit list of one-character prefixes for any\n * CSS property. For example, <code>-wm-float</code> will produce\n * \n * <pre><code>\n * -webkit-float: ${1};\n * -moz-float: ${1};\n * float: ${1};\n * </code></pre>\n * \n * Although this example looks pointless, users can use this feature to write\n * cutting-edge properties implemented by browser vendors recently.  \n * \n * @constructor\n * @memberOf __cssResolverDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssResolver', function(require, _) {\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar prefixObj = {\n\t\t/** Real vendor prefix name */\n\t\tprefix: 'emmet',\n\t\t\n\t\t/** \n\t\t * Indicates this prefix is obsolete and should't be used when user \n\t\t * wants to generate all-prefixed properties\n\t\t */\n\t\tobsolete: false,\n\t\t\n\t\t/**\n\t\t * Returns prefixed CSS property name\n\t\t * @param {String} name Unprefixed CSS property\n\t\t */\n\t\ttransformName: function(name) {\n\t\t\treturn '-' + this.prefix + '-' + name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * List of unprefixed CSS properties that supported by \n\t\t * current prefix. This list is used to generate all-prefixed property\n\t\t * @returns {Array} \n\t\t */\n\t\tproperties: function() {\n\t\t\treturn getProperties('css.' + this.prefix + 'Properties') || [];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if given property is supported by current prefix\n\t\t * @param name\n\t\t */\n\t\tsupports: function(name) {\n\t\t\treturn _.include(this.properties(), name);\n\t\t}\n\t};\n\t\n\t\n\t/** \n\t * List of registered one-character prefixes. Key is a one-character prefix, \n\t * value is an <code>prefixObj</code> object\n\t */\n\tvar vendorPrefixes = {};\n\t\n\tvar defaultValue = '${1};';\n\t\n\t// XXX module preferences\n\tvar prefs = require('preferences');\n\tprefs.define('css.valueSeparator', ': ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations.');\n\tprefs.define('css.propertyEnd', ';',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations.');\n\t\n\tprefs.define('stylus.valueSeparator', ' ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations in Stylus dialect.');\n\tprefs.define('stylus.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in Stylus dialect.');\n\t\n\tprefs.define('sass.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in SASS dialect.');\n\t\n\tprefs.define('css.autoInsertVendorPrefixes', true,\n\t\t\t'Automatically generate vendor-prefixed copies of expanded CSS ' \n\t\t\t+ 'property. By default, Emmet will generate vendor-prefixed '\n\t\t\t+ 'properties only when you put dash before abbreviation ' \n\t\t\t+ '(e.g. <code>-bxsh</code>). With this option enabled, you don’t ' \n\t\t\t+ 'need dashes before abbreviations: Emmet will produce ' \n\t\t\t+ 'vendor-prefixed properties for you.');\n\t\n\tvar descTemplate = _.template('A comma-separated list of CSS properties that may have ' \n\t\t+ '<code><%= vendor %></code> vendor prefix. This list is used to generate '\n\t\t+ 'a list of prefixed properties when expanding <code>-property</code> '\n\t\t+ 'abbreviations. Empty list means that all possible CSS values may ' \n\t\t+ 'have <code><%= vendor %></code> prefix.');\n\t\n\tvar descAddonTemplate = _.template('A comma-separated list of <em>additional</em> CSS properties ' \n\t\t\t+ 'for <code>css.<%= vendor %>Preperties</code> preference. ' \n\t\t\t+ 'You should use this list if you want to add or remove a few CSS ' \n\t\t\t+ 'properties to original set. To add a new property, simply write its name, '\n\t\t\t+ 'to remove it, precede property with hyphen.<br>'\n\t\t\t+ 'For example, to add <em>foo</em> property and remove <em>border-radius</em> one, '\n\t\t\t+ 'the preference value will look like this: <code>foo, -border-radius</code>.');\n\t\n\t// properties list is created from cssFeatures.html file\n\tvar props = {\n\t\t'webkit': 'animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius',\n\t\t'moz': 'animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius',\n\t\t'ms': 'accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, word-wrap, wrap-flow, wrap-margin, wrap-through, writing-mode',\n\t\t'o': 'dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style'\n\t};\n\t\n\t_.each(props, function(v, k) {\n\t\tprefs.define('css.' + k + 'Properties', v, descTemplate({vendor: k}));\n\t\tprefs.define('css.' + k + 'PropertiesAddon', '', descAddonTemplate({vendor: k}));\n\t});\n\t\n\tprefs.define('css.unitlessProperties', 'z-index, line-height, opacity, font-weight, zoom', \n\t\t\t'The list of properties whose values ​​must not contain units.');\n\t\n\tprefs.define('css.intUnit', 'px', 'Default unit for integer values');\n\tprefs.define('css.floatUnit', 'em', 'Default unit for float values');\n\t\n\tprefs.define('css.keywords', 'auto, inherit', \n\t\t\t'A comma-separated list of valid keywords that can be used in CSS abbreviations.');\n\t\n\tprefs.define('css.keywordAliases', 'a:auto, i:inherit, s:solid, da:dashed, do:dotted, t:transparent', \n\t\t\t'A comma-separated list of keyword aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:keyword_name</code>.');\n\t\n\tprefs.define('css.unitAliases', 'e:em, p:%, x:ex, r:rem', \n\t\t\t'A comma-separated list of unit aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:unit_value</code>.');\n\t\n\tprefs.define('css.color.short', true, \n\t\t\t'Should color values like <code>#ffffff</code> be shortened to '\n\t\t\t+ '<code>#fff</code> after abbreviation with color was expanded.');\n\t\n\tprefs.define('css.color.case', 'keep', \n\t\t\t'Letter case of color values generated by abbreviations with color '\n\t\t\t+ '(like <code>c#0</code>). Possible values are <code>upper</code>, '\n\t\t\t+ '<code>lower</code> and <code>keep</code>.');\n\t\n\tprefs.define('css.fuzzySearch', true, \n\t\t\t'Enable fuzzy search among CSS snippet names. When enabled, every ' \n\t\t\t+ '<em>unknown</em> snippet will be scored against available snippet '\n\t\t\t+ 'names (not values or CSS properties!). The match with best score '\n\t\t\t+ 'will be used to resolve snippet value. For example, with this ' \n\t\t\t+ 'preference enabled, the following abbreviations are equal: '\n\t\t\t+ '<code>ov:h</code> == <code>ov-h</code> == <code>o-h</code> == '\n\t\t\t+ '<code>oh</code>');\n\t\n\tprefs.define('css.fuzzySearchMinScore', 0.3, \n\t\t\t'The minium score (from 0 to 1) that fuzzy-matched abbreviation should ' \n\t\t\t+ 'achive. Lower values may produce many false-positive matches, '\n\t\t\t+ 'higher values may reduce possible matches.');\n\t\n\tprefs.define('css.alignVendor', false, \n\t\t\t'If set to <code>true</code>, all generated vendor-prefixed properties ' \n\t\t\t+ 'will be aligned by real property name.');\n\t\n\t\n\tfunction isNumeric(ch) {\n\t\tvar code = ch && ch.charCodeAt(0);\n\t\treturn (ch && ch == '.' || (code > 47 && code < 58));\n\t}\n\t\n\t/**\n\t * Check if provided snippet contains only one CSS property and value.\n\t * @param {String} snippet\n\t * @returns {Boolean}\n\t */\n\tfunction isSingleProperty(snippet) {\n\t\tvar utils = require('utils');\n\t\tsnippet = utils.trim(snippet);\n\t\t\n\t\t// check if it doesn't contain a comment and a newline\n\t\tif (~snippet.indexOf('/*') || /[\\n\\r]/.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// check if it's a valid snippet definition\n\t\tif (!/^[a-z0-9\\-]+\\s*\\:/i.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tsnippet = require('tabStops').processText(snippet, {\n\t\t\treplaceCarets: true,\n\t\t\ttabstop: function() {\n\t\t\t\treturn 'value';\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn snippet.split(':').length == 2;\n\t}\n\t\n\t/**\n\t * Normalizes abbreviated value to final CSS one\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction normalizeValue(value) {\n\t\tif (value.charAt(0) == '-' && !/^\\-[\\.\\d]/.test(value)) {\n\t\t\tvalue = value.replace(/^\\-+/, '');\n\t\t}\n\t\t\n\t\tif (value.charAt(0) == '#') {\n\t\t\treturn normalizeHexColor(value);\n\t\t}\n\t\t\n\t\treturn getKeyword(value);\n\t}\n\t\n\tfunction normalizeHexColor(value) {\n\t\tvar hex = value.replace(/^#+/, '') || '0';\n\t\tif (hex.toLowerCase() == 't') {\n\t\t\treturn 'transparent';\n\t\t}\n\t\t\n\t\tvar repeat = require('utils').repeatString;\n\t\tvar color = null;\n\t\tswitch (hex.length) {\n\t\t\tcase 1:\n\t\t\t\tcolor = repeat(hex, 6);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcolor = repeat(hex, 3);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcolor = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcolor = hex + hex.substr(0, 2);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcolor = hex + hex.charAt(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcolor = hex.substr(0, 6);\n\t\t}\n\t\t\n\t\t// color must be shortened?\n\t\tif (prefs.get('css.color.short')) {\n\t\t\tvar p = color.split('');\n\t\t\tif (p[0] == p[1] && p[2] == p[3] && p[4] == p[5]) {\n\t\t\t\tcolor = p[0] + p[2] + p[4];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// should transform case?\n\t\tswitch (prefs.get('css.color.case')) {\n\t\t\tcase 'upper':\n\t\t\t\tcolor = color.toUpperCase();\n\t\t\t\tbreak;\n\t\t\tcase 'lower':\n\t\t\t\tcolor = color.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn '#' + color;\n\t}\n\t\n\tfunction getKeyword(name) {\n\t\tvar aliases = prefs.getDict('css.keywordAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction getUnit(name) {\n\t\tvar aliases = prefs.getDict('css.unitAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction isValidKeyword(keyword) {\n\t\treturn _.include(prefs.getArray('css.keywords'), getKeyword(keyword));\n\t}\n\t\n\t/**\n\t * Check if passed CSS property support specified vendor prefix \n\t * @param {String} property\n\t * @param {String} prefix\n\t */\n\tfunction hasPrefix(property, prefix) {\n\t\tvar info = vendorPrefixes[prefix];\n\t\t\n\t\tif (!info)\n\t\t\tinfo = _.find(vendorPrefixes, function(data) {\n\t\t\t\treturn data.prefix == prefix;\n\t\t\t});\n\t\t\n\t\treturn info && info.supports(property);\n\t}\n\t\n\t/**\n\t * Search for a list of supported prefixes for CSS property. This list\n\t * is used to generate all-prefixed snippet\n\t * @param {String} property CSS property name\n\t * @returns {Array}\n\t */\n\tfunction findPrefixes(property, noAutofill) {\n\t\tvar result = [];\n\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\tif (hasPrefix(property, prefix)) {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (!result.length && !noAutofill) {\n\t\t\t// add all non-obsolete prefixes\n\t\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\t\tif (!obj.obsolete)\n\t\t\t\t\tresult.push(prefix);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tfunction addPrefix(name, obj) {\n\t\tif (_.isString(obj))\n\t\t\tobj = {prefix: obj};\n\t\t\n\t\tvendorPrefixes[name] = _.extend({}, prefixObj, obj);\n\t}\n\t\n\tfunction getSyntaxPreference(name, syntax) {\n\t\tif (syntax) {\n\t\t\tvar val = prefs.get(syntax + '.' + name);\n\t\t\tif (!_.isUndefined(val))\n\t\t\t\treturn val;\n\t\t}\n\t\t\n\t\treturn prefs.get('css.' + name);\n\t}\n\t\n\t/**\n\t * Format CSS property according to current syntax dialect\n\t * @param {String} property\n\t * @param {String} syntax\n\t * @returns {String}\n\t */\n\tfunction formatProperty(property, syntax) {\n\t\tvar ix = property.indexOf(':');\n\t\tproperty = property.substring(0, ix).replace(/\\s+$/, '') \n\t\t\t+ getSyntaxPreference('valueSeparator', syntax)\n\t\t\t+ require('utils').trim(property.substring(ix + 1));\n\t\t\n\t\treturn property.replace(/\\s*;\\s*$/, getSyntaxPreference('propertyEnd', syntax));\n\t}\n\t\n\t/**\n\t * Transforms snippet value if required. For example, this transformation\n\t * may add <i>!important</i> declaration to CSS property\n\t * @param {String} snippet\n\t * @param {Boolean} isImportant\n\t * @returns {String}\n\t */\n\tfunction transformSnippet(snippet, isImportant, syntax) {\n\t\tif (!_.isString(snippet))\n\t\t\tsnippet = snippet.data;\n\t\t\n\t\tif (!isSingleProperty(snippet))\n\t\t\treturn snippet;\n\t\t\n\t\tif (isImportant) {\n\t\t\tif (~snippet.indexOf(';')) {\n\t\t\t\tsnippet = snippet.split(';').join(' !important;');\n\t\t\t} else {\n\t\t\t\tsnippet += ' !important';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn formatProperty(snippet, syntax);\n\t}\n\t\n\t/**\n\t * Helper function that parses comma-separated list of elements into array\n\t * @param {String} list\n\t * @returns {Array}\n\t */\n\tfunction parseList(list) {\n\t\tvar result = _.map((list || '').split(','), require('utils').trim);\n\t\treturn result.length ? result : null;\n\t}\n\t\n\tfunction getProperties(key) {\n\t\tvar list = prefs.getArray(key);\n\t\t_.each(prefs.getArray(key + 'Addon'), function(prop) {\n\t\t\tif (prop.charAt(0) == '-') {\n\t\t\t\tlist = _.without(list, prop.substr(1));\n\t\t\t} else {\n\t\t\t\tif (prop.charAt(0) == '+')\n\t\t\t\t\tprop = prop.substr(1);\n\t\t\t\t\n\t\t\t\tlist.push(prop);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn list;\n\t}\n\t\n\t\n\t// TODO refactor, this looks awkward now\n\taddPrefix('w', {\n\t\tprefix: 'webkit'\n\t});\n\taddPrefix('m', {\n\t\tprefix: 'moz'\n\t});\n\taddPrefix('s', {\n\t\tprefix: 'ms'\n\t});\n\taddPrefix('o', {\n\t\tprefix: 'o'\n\t});\n\t\n\t// I think nobody uses it\n//\taddPrefix('k', {\n//\t\tprefix: 'khtml',\n//\t\tobsolete: true\n//\t});\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus'];\n\t\n\t/**\n\t * XXX register resolver\n\t * @param {TreeNode} node\n\t * @param {String} syntax\n\t */\n\trequire('resources').addResolver(function(node, syntax) {\n\t\tif (_.include(cssSyntaxes, syntax) && node.isElement()) {\n\t\t\treturn module.expandToSnippet(node.abbreviation, syntax);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\tvar ea = require('expandAbbreviation');\n\t/**\n\t * For CSS-like syntaxes, we need to handle a special use case. Some editors\n\t * (like Sublime Text 2) may insert semicolons automatically when user types\n\t * abbreviation. After expansion, user receives a double semicolon. This\n\t * handler automatically removes semicolon from generated content in such cases.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\tea.addHandler(function(editor, syntax, profile) {\n\t\tif (!_.include(cssSyntaxes, syntax)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = ea.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile);\n\t\t\tif (content) {\n\t\t\t\tvar replaceFrom = caretPos - abbr.length;\n\t\t\t\tvar replaceTo = caretPos;\n\t\t\t\tif (editor.getContent().charAt(caretPos) == ';' && content.charAt(content.length - 1) == ';') {\n\t\t\t\t\treplaceTo++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(content, replaceFrom, replaceTo);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds vendor prefix\n\t\t * @param {String} name One-character prefix name\n\t\t * @param {Object} obj Object describing vendor prefix\n\t\t * @memberOf cssResolver\n\t\t */\n\t\taddPrefix: addPrefix,\n\t\t\n\t\t/**\n\t\t * Check if passed CSS property supports specified vendor prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t */\n\t\tsupportsPrefix: hasPrefix,\n\t\t\n\t\t/**\n\t\t * Returns prefixed version of passed CSS property, only if this\n\t\t * property supports such prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t * @returns\n\t\t */\n\t\tprefixed: function(property, prefix) {\n\t\t\treturn hasPrefix(property, prefix) \n\t\t\t\t? '-' + prefix + '-' + property \n\t\t\t\t: property;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all registered vendor prefixes\n\t\t * @returns {Array}\n\t\t */\n\t\tlistPrefixes: function() {\n\t\t\treturn _.map(vendorPrefixes, function(obj) {\n\t\t\t\treturn obj.prefix;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns object describing vendor prefix\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetPrefix: function(name) {\n\t\t\treturn vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes prefix object\n\t\t * @param {String} name\n\t\t */\n\t\tremovePrefix: function(name) {\n\t\t\tif (name in vendorPrefixes)\n\t\t\t\tdelete vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract vendor prefixes from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of prefixes and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractPrefixes: function(abbr) {\n\t\t\tif (abbr.charAt(0) != '-') {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tprefixes: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t// abbreviation may either contain sequence of one-character prefixes\n\t\t\t// or just dash, meaning that user wants to produce all possible\n\t\t\t// prefixed properties\n\t\t\tvar i = 1, il = abbr.length, ch;\n\t\t\tvar prefixes = [];\n\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (ch == '-') {\n\t\t\t\t\t// end-sequence character found, stop searching\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (ch in vendorPrefixes) {\n\t\t\t\t\tprefixes.push(ch);\n\t\t\t\t} else {\n\t\t\t\t\t// no prefix found, meaning user want to produce all\n\t\t\t\t\t// vendor-prefixed properties\n\t\t\t\t\tprefixes.length = 0;\n\t\t\t\t\ti = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// reached end of abbreviation and no property name left\n\t\t\tif (i == il -1) {\n\t\t\t\ti = 1;\n\t\t\t\tprefixes.length = 1;\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(i),\n\t\t\t\tprefixes: prefixes.length ? prefixes : 'all'\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for value substring in abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {String} Value substring\n\t\t */\n\t\tfindValuesInAbbreviation: function(abbr, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\t\n\t\t\tvar i = 0, il = abbr.length, value = '', ch;\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (isNumeric(ch) || ch == '#' || (ch == '-' && isNumeric(abbr.charAt(i + 1)))) {\n\t\t\t\t\tvalue = abbr.substring(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// try to find keywords in abbreviation\n\t\t\tvar property = abbr.substring(0, abbr.length - value.length);\n\t\t\tvar res = require('resources');\n\t\t\tvar keywords = [];\n\t\t\t// try to extract some commonly-used properties\n\t\t\twhile (~property.indexOf('-') && !res.findSnippet(syntax, property)) {\n\t\t\t\tvar parts = property.split('-');\n\t\t\t\tvar lastPart = parts.pop();\n\t\t\t\tif (!isValidKeyword(lastPart)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tkeywords.unshift(lastPart);\n\t\t\t\tproperty = parts.join('-');\n\t\t\t}\n\t\t\t\n\t\t\treturn keywords.join('-') + value;\n\t\t},\n\t\t\n\t\tparseValues: function(str) {\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(str);\n\t\t\tvar values = [];\n\t\t\tvar ch = null;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '#') {\n\t\t\t\t\tstream.match(/^t|[0-9a-f]+/i, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else if (ch == '-') {\n\t\t\t\t\tif (isValidKeyword(_.last(values)) || \n\t\t\t\t\t\t\t( stream.start && isNumeric(str.charAt(stream.start - 1)) )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstream.match(/^\\-?[0-9]*(\\.[0-9]+)?[a-z%\\.]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else {\n\t\t\t\t\tstream.match(/^[0-9]*(\\.[0-9]*)?[a-z%]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn _.map(_.compact(values), normalizeValue);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts values from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of values and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractValues: function(abbr) {\n\t\t\t// search for value start\n\t\t\tvar abbrValues = this.findValuesInAbbreviation(abbr);\n\t\t\tif (!abbrValues) {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tvalues: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(0, abbr.length - abbrValues.length).replace(/-$/, ''),\n\t\t\t\tvalues: this.parseValues(abbrValues)\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes value, defined in abbreviation.\n\t\t * @param {String} value\n\t\t * @param {String} property\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeValue: function(value, property) {\n\t\t\tproperty = (property || '').toLowerCase();\n\t\t\tvar unitlessProps = prefs.getArray('css.unitlessProperties');\n\t\t\treturn value.replace(/^(\\-?[0-9\\.]+)([a-z]*)$/, function(str, val, unit) {\n\t\t\t\tif (!unit && (val == '0' || _.include(unitlessProps, property)))\n\t\t\t\t\treturn val;\n\t\t\t\t\n\t\t\t\tif (!unit)\n\t\t\t\t\treturn val.replace(/\\.$/, '') + prefs.get(~val.indexOf('.') ? 'css.floatUnit' : 'css.intUnit');\n\t\t\t\t\n\t\t\t\treturn val + getUnit(unit);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Expands abbreviation into a snippet\n\t\t * @param {String} abbr Abbreviation name to expand\n\t\t * @param {String} value Abbreviation value\n\t\t * @param {String} syntax Currect syntax or dialect. Default is 'css'\n\t\t * @returns {Object} Array of CSS properties and values or predefined\n\t\t * snippet (string or element)\n\t\t */\n\t\texpand: function(abbr, value, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\tvar resources = require('resources');\n\t\t\tvar autoInsertPrefixes = prefs.get('css.autoInsertVendorPrefixes');\n\t\t\t\n\t\t\t// check if snippet should be transformed to !important\n\t\t\tvar isImportant;\n\t\t\tif (isImportant = /^(.+)\\!$/.test(abbr)) {\n\t\t\t\tabbr = RegExp.$1;\n\t\t\t}\n\t\t\t\n\t\t\t// check if we have abbreviated resource\n\t\t\tvar snippet = resources.findSnippet(syntax, abbr);\n\t\t\tif (snippet && !autoInsertPrefixes) {\n\t\t\t\treturn transformSnippet(snippet, isImportant, syntax);\n\t\t\t}\n\t\t\t\n\t\t\t// no abbreviated resource, parse abbreviation\n\t\t\tvar prefixData = this.extractPrefixes(abbr);\n\t\t\tvar valuesData = this.extractValues(prefixData.property);\n\t\t\tvar abbrData = _.extend(prefixData, valuesData);\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = resources.findSnippet(syntax, abbrData.property);\n\t\t\t} else {\n\t\t\t\tabbrData.values = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\t\t// let’s try fuzzy search\n\t\t\t\tsnippet = resources.fuzzyFindSnippet(syntax, abbrData.property, parseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = abbrData.property + ':' + defaultValue;\n\t\t\t} else if (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\tif (!isSingleProperty(snippet)) {\n\t\t\t\treturn snippet;\n\t\t\t}\n\t\t\t\n\t\t\tvar snippetObj = this.splitSnippet(snippet);\n\t\t\tvar result = [];\n\t\t\tif (!value && abbrData.values) {\n\t\t\t\tvalue = _.map(abbrData.values, function(val) {\n\t\t\t\t\treturn this.normalizeValue(val, snippetObj.name);\n\t\t\t\t}, this).join(' ') + ';';\n\t\t\t}\n\t\t\t\n\t\t\tsnippetObj.value = value || snippetObj.value;\n\t\t\t\n\t\t\tvar prefixes = abbrData.prefixes == 'all' || (!abbrData.prefixes && autoInsertPrefixes) \n\t\t\t\t? findPrefixes(snippetObj.name, autoInsertPrefixes && abbrData.prefixes != 'all')\n\t\t\t\t: abbrData.prefixes;\n\t\t\t\t\n\t\t\t\t\n\t\t\tvar names = [], propName;\n\t\t\t_.each(prefixes, function(p) {\n\t\t\t\tif (p in vendorPrefixes) {\n\t\t\t\t\tpropName = vendorPrefixes[p].transformName(snippetObj.name);\n\t\t\t\t\tnames.push(propName);\n\t\t\t\t\tresult.push(transformSnippet(propName + ':' + snippetObj.value,\n\t\t\t\t\t\t\tisImportant, syntax));\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// put the original property\n\t\t\tresult.push(transformSnippet(snippetObj.name + ':' + snippetObj.value, isImportant, syntax));\n\t\t\tnames.push(snippetObj.name);\n\t\t\t\n\t\t\tif (prefs.get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(names);\n\t\t\t\tresult = _.map(result, function(prop, i) {\n\t\t\t\t\treturn pads[i] + prop;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Same as <code>expand</code> method but transforms output into \n\t\t * Emmet snippet\n\t\t * @param {String} abbr\n\t\t * @param {String} syntax\n\t\t * @returns {String}\n\t\t */\n\t\texpandToSnippet: function(abbr, syntax) {\n\t\t\tvar snippet = this.expand(abbr, null, syntax);\n\t\t\tif (_.isArray(snippet)) {\n\t\t\t\treturn snippet.join('\\n');\n\t\t\t}\n\t\t\t\n\t\t\tif (!_.isString(snippet))\n\t\t\t\treturn snippet.data;\n\t\t\t\n\t\t\treturn String(snippet);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split snippet into a CSS property-value pair\n\t\t * @param {String} snippet\n\t\t */\n\t\tsplitSnippet: function(snippet) {\n\t\t\tvar utils = require('utils');\n\t\t\tsnippet = utils.trim(snippet);\n\t\t\tif (snippet.indexOf(':') == -1) {\n\t\t\t\treturn {\n\t\t\t\t\tname: snippet,\n\t\t\t\t\tvalue: defaultValue\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tvar pair = snippet.split(':');\n\t\t\t\n\t\t\treturn {\n\t\t\t\tname: utils.trim(pair.shift()),\n\t\t\t\t// replace ${0} tabstop to produce valid vendor-prefixed values\n\t\t\t\t// where possible\n\t\t\t\tvalue: utils.trim(pair.join(':')).replace(/^(\\$\\{0\\}|\\$0)(\\s*;?)$/, '${1}$2')\n\t\t\t};\n\t\t},\n\t\t\n\t\tgetSyntaxPreference: getSyntaxPreference,\n\t\ttransformSnippet: transformSnippet\n\t};\n});\n/**\n * 'Expand Abbreviation' handler that parses gradient definition from under \n * cursor and updates CSS rule with vendor-prefixed values.\n * \n * @memberOf __cssGradientHandlerDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssGradient', function(require, _) {\n\tvar defaultLinearDirections = ['top', 'to bottom', '0deg'];\n\t/** Back-reference to current module */\n\tvar module = null;\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus', 'styl'];\n\t\n\tvar reDeg = /\\d+deg/i;\n\tvar reKeyword = /top|bottom|left|right/i;\n\t\n\t// XXX define preferences\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('css.gradient.prefixes', 'webkit, moz, o',\n\t\t\t'A comma-separated list of vendor-prefixes for which values should ' \n\t\t\t+ 'be generated.');\n\t\n\tprefs.define('css.gradient.oldWebkit', true,\n\t\t\t'Generate gradient definition for old Webkit implementations');\n\t\n\tprefs.define('css.gradient.omitDefaultDirection', true,\n\t\t'Do not output default direction definition in generated gradients.');\n\t\n\tprefs.define('css.gradient.defaultProperty', 'background-image',\n\t\t'When gradient expanded outside CSS value context, it will produce '\n\t\t\t+ 'properties with this name.');\n\t\n\tprefs.define('css.gradient.fallback', false,\n\t\t\t'With this option enabled, CSS gradient generator will produce '\n\t\t\t+ '<code>background-color</code> property with gradient first color '\n\t\t\t+ 'as fallback for old browsers.');\n\t\n\tfunction normalizeSpace(str) {\n\t\treturn require('utils').trim(str).replace(/\\s+/g, ' ');\n\t}\n\t\n\t/**\n\t * Parses linear gradient definition\n\t * @param {String}\n\t */\n\tfunction parseLinearGradient(gradient) {\n\t\tvar direction = defaultLinearDirections[0];\n\t\t\n\t\t// extract tokens\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(require('utils').trim(gradient));\n\t\tvar colorStops = [], ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (stream.peek() == ',') {\n\t\t\t\tcolorStops.push(stream.current());\n\t\t\t\tstream.next();\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t} else if (ch == '(') { // color definition, like 'rgb(0,0,0)'\n\t\t\t\tstream.skipTo(')');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add last token\n\t\tcolorStops.push(stream.current());\n\t\tcolorStops = _.compact(_.map(colorStops, normalizeSpace));\n\t\t\n\t\tif (!colorStops.length)\n\t\t\treturn null;\n\t\t\n\t\t// let's see if the first color stop is actually a direction\n\t\tif (reDeg.test(colorStops[0]) || reKeyword.test(colorStops[0])) {\n\t\t\tdirection = colorStops.shift();\n\t\t}\n\t\t\n\t\treturn {\n\t\t\ttype: 'linear',\n\t\t\tdirection: direction,\n\t\t\tcolorStops: _.map(colorStops, parseColorStop)\n\t\t};\n\t}\n\t\n\t/**\n\t * Parses color stop definition\n\t * @param {String} colorStop\n\t * @returns {Object}\n\t */\n\tfunction parseColorStop(colorStop) {\n\t\tcolorStop = normalizeSpace(colorStop);\n\t\t\n\t\t// find color declaration\n\t\t// first, try complex color declaration, like rgb(0,0,0)\n\t\tvar color = null;\n\t\tcolorStop = colorStop.replace(/^(\\w+\\(.+?\\))\\s*/, function(str, c) {\n\t\t\tcolor = c;\n\t\t\treturn '';\n\t\t});\n\t\t\n\t\tif (!color) {\n\t\t\t// try simple declaration, like yellow, #fco, #ffffff, etc.\n\t\t\tvar parts = colorStop.split(' ');\n\t\t\tcolor = parts[0];\n\t\t\tcolorStop = parts[1] || '';\n\t\t}\n\t\t\n\t\tvar result = {\n\t\t\tcolor: color\n\t\t};\n\t\t\n\t\tif (colorStop) {\n\t\t\t// there's position in color stop definition\n\t\t\tcolorStop.replace(/^(\\-?[\\d\\.]+)([a-z%]+)?$/, function(str, pos, unit) {\n\t\t\t\tresult.position = pos;\n\t\t\t\tif (~pos.indexOf('.')) {\n\t\t\t\t\tunit = '';\n\t\t\t\t} else if (!unit) {\n\t\t\t\t\tunit = '%';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (unit)\n\t\t\t\t\tresult.unit = unit;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Resolves property name (abbreviation): searches for snippet definition in \n\t * 'resources' and returns new name of matched property\n\t */\n\tfunction resolvePropertyName(name, syntax) {\n\t\tvar res = require('resources');\n\t\tvar prefs = require('preferences');\n\t\tvar snippet = res.findSnippet(syntax, name);\n\t\t\n\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\tsnippet = res.fuzzyFindSnippet(syntax, name, \n\t\t\t\t\tparseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t}\n\t\t\n\t\tif (snippet) {\n\t\t\tif (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\treturn require('cssResolver').splitSnippet(snippet).name;\n\t\t}\n\t}\n\t\n\t/**\n\t * Fills-out implied positions in color-stops. This function is useful for\n\t * old Webkit gradient definitions\n\t */\n\tfunction fillImpliedPositions(colorStops) {\n\t\tvar from = 0;\n\t\t\n\t\t_.each(colorStops, function(cs, i) {\n\t\t\t// make sure that first and last positions are defined\n\t\t\tif (!i)\n\t\t\t\treturn cs.position = cs.position || 0;\n\t\t\t\n\t\t\tif (i == colorStops.length - 1 && !('position' in cs))\n\t\t\t\tcs.position = 1;\n\t\t\t\n\t\t\tif ('position' in cs) {\n\t\t\t\tvar start = colorStops[from].position || 0;\n\t\t\t\tvar step = (cs.position - start) / (i - from);\n\t\t\t\t_.each(colorStops.slice(from, i), function(cs2, j) {\n\t\t\t\t\tcs2.position = start + step * j;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfrom = i;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Returns textual version of direction expressed in degrees\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction textualDirection(direction) {\n\t\tvar angle = parseFloat(direction);\n\t\t\n\t\tif(!_.isNaN(angle)) {\n\t\t\tswitch(angle % 360) {\n\t\t\t\tcase 0:   return 'left';\n\t\t\t\tcase 90:  return 'bottom';\n\t\t\t\tcase 180: return 'right';\n\t\t\t\tcase 240: return 'top';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn direction;\n\t}\n\t\n\t/**\n\t * Creates direction definition for old Webkit gradients\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction oldWebkitDirection(direction) {\n\t\tdirection = textualDirection(direction);\n\t\t\n\t\tif(reDeg.test(direction))\n\t\t\tthrow \"The direction is an angle that can’t be converted.\";\n\t\t\n\t\tvar v = function(pos) {\n\t\t\treturn ~direction.indexOf(pos) ? '100%' : '0';\n\t\t};\n\t\t\n\t\treturn v('right') + ' ' + v('bottom') + ', ' + v('left') + ' ' + v('top');\n\t}\n\t\n\tfunction getPrefixedNames(name) {\n\t\tvar prefixes = prefs.getArray('css.gradient.prefixes');\n\t\tvar names = prefixes \n\t\t\t? _.map(prefixes, function(p) {\n\t\t\t\treturn '-' + p + '-' + name;\n\t\t\t}) \n\t\t\t: [];\n\t\t\n\t\tnames.push(name);\n\t\t\n\t\treturn names;\n\t}\n\t\n\t/**\n\t * Returns list of CSS properties with gradient\n\t * @param {Object} gradient\n\t * @param {String} propertyName Original CSS property name\n\t * @returns {Array}\n\t */\n\tfunction getPropertiesForGradient(gradient, propertyName) {\n\t\tvar props = [];\n\t\tvar css = require('cssResolver');\n\t\t\n\t\tif (prefs.get('css.gradient.fallback') && ~propertyName.toLowerCase().indexOf('background')) {\n\t\t\tprops.push({\n\t\t\t\tname: 'background-color',\n\t\t\t\tvalue: '${1:' + gradient.colorStops[0].color + '}'\n\t\t\t});\n\t\t}\n\t\t\n\t\t_.each(prefs.getArray('css.gradient.prefixes'), function(prefix) {\n\t\t\tvar name = css.prefixed(propertyName, prefix);\n\t\t\tif (prefix == 'webkit' && prefs.get('css.gradient.oldWebkit')) {\n\t\t\t\ttry {\n\t\t\t\t\tprops.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: module.oldWebkitLinearGradient(gradient)\n\t\t\t\t\t});\n\t\t\t\t} catch(e) {}\n\t\t\t}\n\t\t\t\n\t\t\tprops.push({\n\t\t\t\tname: name,\n\t\t\t\tvalue: module.toString(gradient, prefix)\n\t\t\t});\n\t\t});\n\t\t\n\t\treturn props.sort(function(a, b) {\n\t\t\treturn b.name.length - a.name.length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Pastes gradient definition into CSS rule with correct vendor-prefixes\n\t * @param {EditElement} property Matched CSS property\n\t * @param {Object} gradient Parsed gradient\n\t * @param {Range} valueRange If passed, only this range within property \n\t * value will be replaced with gradient. Otherwise, full value will be \n\t * replaced\n\t */\n\tfunction pasteGradient(property, gradient, valueRange) {\n\t\tvar rule = property.parent;\n\t\tvar utils = require('utils');\n\t\tvar alignVendor = require('preferences').get('css.alignVendor');\n\t\t\n\t\t// we may have aligned gradient definitions: find the smallest value\n\t\t// separator\n\t\tvar sep = property.styleSeparator;\n\t\tvar before = property.styleBefore;\n\t\t\n\t\t// first, remove all properties within CSS rule with the same name and\n\t\t// gradient definition\n\t\t_.each(rule.getAll(getPrefixedNames(property.name())), function(item) {\n\t\t\tif (item != property && /gradient/i.test(item.value())) {\n\t\t\t\tif (item.styleSeparator.length < sep.length) {\n\t\t\t\t\tsep = item.styleSeparator;\n\t\t\t\t}\n\t\t\t\tif (item.styleBefore.length < before.length) {\n\t\t\t\t\tbefore = item.styleBefore;\n\t\t\t\t}\n\t\t\t\trule.remove(item);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (alignVendor) {\n\t\t\t// update prefix\n\t\t\tif (before != property.styleBefore) {\n\t\t\t\tvar fullRange = property.fullRange();\n\t\t\t\trule._updateSource(before, fullRange.start, fullRange.start + property.styleBefore.length);\n\t\t\t\tproperty.styleBefore = before;\n\t\t\t}\n\t\t\t\n\t\t\t// update separator value\n\t\t\tif (sep != property.styleSeparator) {\n\t\t\t\trule._updateSource(sep, property.nameRange().end, property.valueRange().start);\n\t\t\t\tproperty.styleSeparator = sep;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar value = property.value();\n\t\tif (!valueRange)\n\t\t\tvalueRange = require('range').create(0, property.value());\n\t\t\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, valueRange);\n\t\t};\n\t\t\n\t\t// put vanilla-clean gradient definition into current rule\n\t\tproperty.value(val(module.toString(gradient)) + '${2}');\n\t\t\n\t\t// create list of properties to insert\n\t\tvar propsToInsert = getPropertiesForGradient(gradient, property.name());\n\t\t\n\t\t// align prefixed values\n\t\tif (alignVendor) {\n\t\t\tvar values = _.pluck(propsToInsert, 'value');\n\t\t\tvar names = _.pluck(propsToInsert, 'name');\n\t\t\tvalues.push(property.value());\n\t\t\tnames.push(property.name());\n\t\t\t\n\t\t\tvar valuePads = utils.getStringsPads(_.map(values, function(v) {\n\t\t\t\treturn v.substring(0, v.indexOf('('));\n\t\t\t}));\n\t\t\t\n\t\t\tvar namePads = utils.getStringsPads(names);\n\t\t\tproperty.name(_.last(namePads) + property.name());\n\t\t\t\n\t\t\t_.each(propsToInsert, function(prop, i) {\n\t\t\t\tprop.name = namePads[i] + prop.name;\n\t\t\t\tprop.value = valuePads[i] + prop.value;\n\t\t\t});\n\t\t\t\n\t\t\tproperty.value(_.last(valuePads) + property.value());\n\t\t}\n\t\t\n\t\t// put vendor-prefixed definitions before current rule\n\t\t_.each(propsToInsert, function(prop) {\n\t\t\trule.add(prop.name, prop.value, rule.indexOf(property));\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS property value\n\t */\n\tfunction findGradient(cssProp) {\n\t\tvar value = cssProp.value();\n\t\tvar gradient = null;\n\t\tvar matchedPart = _.find(cssProp.valueParts(), function(part) {\n\t\t\treturn gradient = module.parse(part.substring(value));\n\t\t});\n\t\t\n\t\tif (matchedPart && gradient) {\n\t\t\treturn {\n\t\t\t\tgradient: gradient,\n\t\t\t\tvalueRange: matchedPart\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Tries to expand gradient outside CSS value \n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t */\n\tfunction expandGradientOutsideValue(editor, syntax) {\n\t\tvar propertyName = prefs.get('css.gradient.defaultProperty');\n\t\t\n\t\tif (!propertyName)\n\t\t\treturn false;\n\t\t\n\t\t// assuming that gradient definition is written on new line,\n\t\t// do a simplified parsing\n\t\tvar content = String(editor.getContent());\n\t\t/** @type Range */\n\t\tvar lineRange = require('range').create(editor.getCurrentLineRange());\n\t\t\n\t\t// get line content and adjust range with padding\n\t\tvar line = lineRange.substring(content)\n\t\t\t.replace(/^\\s+/, function(pad) {\n\t\t\t\tlineRange.start += pad.length;\n\t\t\t\treturn '';\n\t\t\t})\n\t\t\t.replace(/\\s+$/, function(pad) {\n\t\t\t\tlineRange.end -= pad.length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\n\t\tvar css = require('cssResolver');\n\t\tvar gradient = module.parse(line);\n\t\tif (gradient) {\n\t\t\tvar props = getPropertiesForGradient(gradient, propertyName);\n\t\t\tprops.push({\n\t\t\t\tname: propertyName,\n\t\t\t\tvalue: module.toString(gradient) + '${2}'\n\t\t\t});\n\t\t\t\n\t\t\tvar sep = css.getSyntaxPreference('valueSeparator', syntax);\n\t\t\tvar end = css.getSyntaxPreference('propertyEnd', syntax);\n\t\t\t\n\t\t\tif (require('preferences').get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(_.map(props, function(prop) {\n\t\t\t\t\treturn prop.value.substring(0, prop.value.indexOf('('));\n\t\t\t\t}));\n\t\t\t\t_.each(props, function(prop, i) {\n\t\t\t\t\tprop.value = pads[i] + prop.value;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tprops = _.map(props, function(item) {\n\t\t\t\treturn item.name + sep + item.value + end;\n\t\t\t});\n\t\t\t\n\t\t\teditor.replaceContent(props.join('\\n'), lineRange.start, lineRange.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS value under cursor\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @returns {Object}\n\t */\n\tfunction findGradientFromPosition(content, pos) {\n\t\tvar cssProp = null;\n\t\t/** @type EditContainer */\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(content, pos, true);\n\t\t\n\t\tif (cssRule) {\n\t\t\tcssProp = cssRule.itemFromPosition(pos, true);\n\t\t\tif (!cssProp) {\n\t\t\t\t// in case user just started writing CSS property\n\t\t\t\t// and didn't include semicolon–try another approach\n\t\t\t\tcssProp = _.find(cssRule.list(), function(elem) {\n\t\t\t\t\treturn elem.range(true).end == pos;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn {\n\t\t\trule: cssRule,\n\t\t\tproperty: cssProp\n\t\t};\n\t}\n\t\n\t// XXX register expand abbreviation handler\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\trequire('expandAbbreviation').addHandler(function(editor, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tif (!_.include(cssSyntaxes, info.syntax))\n\t\t\treturn false;\n\t\t\n\t\t// let's see if we are expanding gradient definition\n\t\tvar caret = editor.getCaretPos();\n\t\tvar content = info.content;\n\t\tvar css = findGradientFromPosition(content, caret);\n\t\t\n\t\tif (css.property) {\n\t\t\t// make sure that caret is inside property value with gradient \n\t\t\t// definition\n\t\t\tvar g = findGradient(css.property);\n\t\t\tif (g) {\n\t\t\t\tvar ruleStart = css.rule.options.offset || 0;\n\t\t\t\tvar ruleEnd = ruleStart + css.rule.toString().length;\n\t\t\t\t\n\t\t\t\t// Handle special case:\n\t\t\t\t// user wrote gradient definition between existing CSS \n\t\t\t\t// properties and did not finished it with semicolon.\n\t\t\t\t// In this case, we have semicolon right after gradient \n\t\t\t\t// definition and re-parse rule again\n\t\t\t\tif (/[\\n\\r]/.test(css.property.value())) {\n\t\t\t\t\t// insert semicolon at the end of gradient definition\n\t\t\t\t\tvar insertPos = css.property.valueRange(true).start + g.valueRange.end;\n\t\t\t\t\tcontent = require('utils').replaceSubstring(content, ';', insertPos);\n\t\t\t\t\tvar newCss = findGradientFromPosition(content, caret);\n\t\t\t\t\tif (newCss.property) {\n\t\t\t\t\t\tg = findGradient(newCss.property);\n\t\t\t\t\t\tcss = newCss;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// make sure current property has terminating semicolon\n\t\t\t\tcss.property.end(';');\n\t\t\t\t\n\t\t\t\t// resolve CSS property name\n\t\t\t\tvar resolvedName = resolvePropertyName(css.property.name(), syntax);\n\t\t\t\tif (resolvedName) {\n\t\t\t\t\tcss.property.name(resolvedName);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpasteGradient(css.property, g.gradient, g.valueRange);\n\t\t\t\teditor.replaceContent(css.rule.toString(), ruleStart, ruleEnd, true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn expandGradientOutsideValue(editor, syntax);\n\t});\n\t\n\t// XXX register \"Reflect CSS Value\" action delegate\n\t/**\n\t * @param {EditElement} property\n\t */\n\trequire('reflectCSSValue').addHandler(function(property) {\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar g = findGradient(property);\n\t\tif (!g)\n\t\t\treturn false;\n\t\t\n\t\tvar value = property.value();\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, g.valueRange);\n\t\t};\n\t\t\n\t\t// reflect value for properties with the same name\n\t\t_.each(property.parent.getAll(getPrefixedNames(property.name())), function(prop) {\n\t\t\tif (prop === property)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t// check if property value starts with gradient definition\n\t\t\tvar m = prop.value().match(/^\\s*(\\-([a-z]+)\\-)?linear\\-gradient/);\n\t\t\tif (m) {\n\t\t\t\tprop.value(val(module.toString(g.gradient, m[2] || '')));\n\t\t\t} else if (m = prop.value().match(/\\s*\\-webkit\\-gradient/)) {\n\t\t\t\t// old webkit gradient definition\n\t\t\t\tprop.value(val(module.oldWebkitLinearGradient(g.gradient)));\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Parses gradient definition\n\t\t * @param {String} gradient\n\t\t * @returns {Object}\n\t\t */\n\t\tparse: function(gradient) {\n\t\t\tvar result = null;\n\t\t\trequire('utils').trim(gradient).replace(/^([\\w\\-]+)\\((.+?)\\)$/, function(str, type, definition) {\n\t\t\t\t// remove vendor prefix\n\t\t\t\ttype = type.toLowerCase().replace(/^\\-[a-z]+\\-/, '');\n\t\t\t\tif (type == 'linear-gradient' || type == 'lg') {\n\t\t\t\t\tresult = parseLinearGradient(definition);\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Produces linear gradient definition used in early Webkit \n\t\t * implementations\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @returns {String}\n\t\t */\n\t\toldWebkitLinearGradient: function(gradient) {\n\t\t\tif (_.isString(gradient))\n\t\t\t\tgradient = this.parse(gradient);\n\t\t\t\n\t\t\tif (!gradient)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tvar colorStops = _.map(gradient.colorStops, _.clone);\n\t\t\t\n\t\t\t// normalize color-stops position\n\t\t\t_.each(colorStops, function(cs) {\n\t\t\t\tif (!('position' in cs)) // implied position\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tif (~cs.position.indexOf('.') || cs.unit == '%') {\n\t\t\t\t\tcs.position = parseFloat(cs.position) / (cs.unit == '%' ? 100 : 1);\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"Can't convert color stop '\" + (cs.position + (cs.unit || '')) + \"'\";\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tfillImpliedPositions(colorStops);\n\t\t\t\n\t\t\t// transform color-stops into string representation\n\t\t\tcolorStops = _.map(colorStops, function(cs, i) {\n\t\t\t\tif (!cs.position && !i)\n\t\t\t\t\treturn 'from(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\tif (cs.position == 1 && i == colorStops.length - 1)\n\t\t\t\t\treturn 'to(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\treturn 'color-stop(' + (cs.position.toFixed(2).replace(/\\.?0+$/, '')) + ', ' + cs.color + ')';\n\t\t\t});\n\t\t\t\n\t\t\treturn '-webkit-gradient(linear, ' \n\t\t\t\t+ oldWebkitDirection(gradient.direction)\n\t\t\t\t+ ', '\n\t\t\t\t+ colorStops.join(', ')\n\t\t\t\t+ ')';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of parsed gradient\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @param {String} prefix Vendor prefix\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function(gradient, prefix) {\n\t\t\tif (gradient.type == 'linear') {\n\t\t\t\tvar fn = (prefix ? '-' + prefix + '-' : '') + 'linear-gradient';\n\t\t\t\t\n\t\t\t\t// transform color-stops\n\t\t\t\tvar colorStops = _.map(gradient.colorStops, function(cs) {\n\t\t\t\t\treturn cs.color + ('position' in cs \n\t\t\t\t\t\t\t? ' ' + cs.position + (cs.unit || '')\n\t\t\t\t\t\t\t: '');\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (gradient.direction \n\t\t\t\t\t\t&& (!prefs.get('css.gradient.omitDefaultDirection') \n\t\t\t\t\t\t|| !_.include(defaultLinearDirections, gradient.direction))) {\n\t\t\t\t\tcolorStops.unshift(gradient.direction);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn fn + '(' + colorStops.join(', ') + ')';\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Module adds support for generators: a regexp-based abbreviation resolver \n * that can produce custom output.\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type HandlerList */\n\tvar generators = require('handlerList').create();\n\tvar resources = require('resources');\n\t\n\t_.extend(resources, {\n\t\t/**\n\t\t * Add generator. A generator function <code>fn</code> will be called \n\t\t * only if current abbreviation matches <code>regexp</code> regular \n\t\t * expression and this function should return <code>null</code> if\n\t\t * abbreviation cannot be resolved\n\t\t * @param {RegExp} regexp Regular expression for abbreviation element name\n\t\t * @param {Function} fn Resolver function\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddGenerator: function(regexp, fn, options) {\n\t\t\tif (_.isString(regexp))\n\t\t\t\tregexp = new RegExp(regexp);\n\t\t\t\n\t\t\tgenerators.add(function(node, syntax) {\n\t\t\t\tvar m;\n\t\t\t\tif ((m = regexp.exec(node.name()))) {\n\t\t\t\t\treturn fn(m, node, syntax);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}, options);\n\t\t}\n\t});\n\t\n\tresources.addResolver(function(node, syntax) {\n\t\treturn generators.exec(null, _.toArray(arguments));\n\t});\n});/**\n * Module for resolving tag names: returns best matched tag name for child\n * element based on passed parent's tag name. Also provides utility function\n * for element type detection (inline, block-level, empty)\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('tagName', function(require, _) {\n\tvar elementTypes = {\n//\t\tempty: 'area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,keygen,command'.split(','),\n\t\tempty: [],\n\t\tblockLevel: 'address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,link,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,h1,h2,h3,h4,h5,h6'.split(','),\n\t\tinlineLevel: 'a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(',')\n\t};\n\t\n\tvar elementMap = {\n\t\t'p': 'span',\n\t\t'ul': 'li',\n\t\t'ol': 'li',\n\t\t'table': 'tr',\n\t\t'tr': 'td',\n\t\t'tbody': 'tr',\n\t\t'thead': 'tr',\n\t\t'tfoot': 'tr',\n\t\t'colgroup': 'col',\n\t\t'select': 'option',\n\t\t'optgroup': 'option',\n\t\t'audio': 'source',\n\t\t'video': 'source',\n\t\t'object': 'param',\n\t\t'map': 'area'\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Returns best matched child element name for passed parent's\n\t\t * tag name\n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t * @memberOf tagName\n\t\t */\n\t\tresolve: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\t\n\t\t\tif (name in elementMap)\n\t\t\t\treturn this.getMapping(name);\n\t\t\t\n\t\t\tif (this.isInlineLevel(name))\n\t\t\t\treturn 'span';\n\t\t\t\n\t\t\treturn 'div';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns mapped child element name for passed parent's name \n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t */\n\t\tgetMapping: function(name) {\n\t\t\treturn elementMap[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element name belongs to inline-level element\n\t\t * @param {String} name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'inlineLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element belongs to block-level element.\n\t\t * For better matching of unknown elements (for XML, for example), \n\t\t * you should use <code>!this.isInlineLevel(name)</code>\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisBlockLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'blockLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is void (i.e. should not have closing tag).\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisEmptyElement: function(name) {\n\t\t\treturn this.isTypeOf(name, 'empty');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Generic function for testing if element name belongs to specified\n\t\t * elements collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} type Collection name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisTypeOf: function(name, type) {\n\t\t\treturn _.include(elementTypes[type], name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new parent–child mapping\n\t\t * @param {String} parent\n\t\t * @param {String} child\n\t\t */\n\t\taddMapping: function(parent, child) {\n\t\t\telementMap[parent] = child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes parent-child mapping\n\t\t */\n\t\tremoveMapping: function(parent) {\n\t\t\tif (parent in elementMap)\n\t\t\t\tdelete elementMap[parent];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new element into collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t */\n\t\taddElementToCollection: function(name, collection) {\n\t\t\tif (!elementTypes[collection])\n\t\t\t\telementTypes[collection] = [];\n\t\t\t\n\t\t\tvar col = this.getCollection(collection);\n\t\t\tif (!_.include(col, name))\n\t\t\t\tcol.push(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes element name from specified collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t * @returns\n\t\t */\n\t\tremoveElementFromCollection: function(name, collection) {\n\t\t\tif (collection in elementTypes) {\n\t\t\t\telementTypes[collection] = _.without(this.getCollection(collection), name);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns elements name collection\n\t\t * @param {String} name Collection name\n\t\t * @returns {Array}\n\t\t */\n\t\tgetCollection: function(name) {\n\t\t\treturn elementTypes[name];\n\t\t}\n\t};\n});/**\n * Filter for aiding of writing elements with complex class names as described\n * in Yandex's BEM (Block, Element, Modifier) methodology. This filter will\n * automatically inherit block and element names from parent elements and insert\n * them into child element classes\n * @memberOf __bemFilterDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar prefs = require('preferences');\n\tprefs.define('bem.elementSeparator', '__', 'Class name’s element separator.');\n\tprefs.define('bem.modifierSeparator', '_', 'Class name’s modifier separator.');\n\tprefs.define('bem.shortElementPrefix', '-', \n\t\t\t'Symbol for describing short “block-element” notation. Class names '\n\t\t\t+ 'prefixed with this symbol will be treated as element name for parent‘s '\n\t\t\t+ 'block name. Each symbol instance traverses one level up in parsed ' \n\t\t\t+ 'tree for block name lookup. Empty value will disable short notation.');\n\t\n\tvar shouldRunHtmlFilter = false;\n\t\n\tfunction getSeparators() {\n\t\treturn {\n\t\t\telement: prefs.get('bem.elementSeparator'),\n\t\t\tmodifier: prefs.get('bem.modifierSeparator')\n\t\t};\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction bemParse(item) {\n\t\tif (require('abbreviationUtils').isSnippet(item))\n\t\t\treturn item;\n\t\t\n\t\t// save BEM stuff in cache for faster lookups\n\t\titem.__bem = {\n\t\t\tblock: '',\n\t\t\telement: '',\n\t\t\tmodifier: ''\n\t\t};\n\t\t\n\t\tvar classNames = normalizeClassName(item.attribute('class')).split(' ');\n\t\t\n\t\t// guess best match for block name\n\t\tvar reBlockName = /^[a-z]\\-/i;\n\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\treturn reBlockName.test(name);\n\t\t});\n\t\t\n\t\t// guessing doesn't worked, pick first class name as block name\n\t\tif (!item.__bem.block) {\n\t\t\treBlockName = /^[a-z]/i;\n\t\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\t\treturn reBlockName.test(name);\n\t\t\t}) || '';\n\t\t}\n\t\t\n\t\tclassNames = _.chain(classNames)\n\t\t\t.map(function(name) {return processClassName(name, item);})\n\t\t\t.flatten()\n\t\t\t.uniq()\n\t\t\t.value()\n\t\t\t.join(' ');\n\t\t\n\t\tif (classNames)\n\t\t\titem.attribute('class', classNames);\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * @param {String} className\n\t * @returns {String}\n\t */\n\tfunction normalizeClassName(className) {\n\t\tvar utils = require('utils');\n\t\tclassName = (' ' + (className || '') + ' ').replace(/\\s+/g, ' ');\n\t\t\n\t\tvar shortSymbol = prefs.get('bem.shortElementPrefix');\n\t\tif (shortSymbol) {\n\t\t\tvar re = new RegExp('\\\\s(' + utils.escapeForRegexp(shortSymbol) + '+)', 'g');\n\t\t\tclassName = className.replace(re, function(str, p1) {\n\t\t\t\treturn ' ' + utils.repeatString(getSeparators().element, p1.length);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn utils.trim(className);\n\t}\n\t\n\t/**\n\t * Processes class name\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @returns Processed class name. May return <code>Array</code> of\n\t * class names \n\t */\n\tfunction processClassName(name, item) {\n\t\tname = transformClassName(name, item, 'element');\n\t\tname = transformClassName(name, item, 'modifier');\n\t\t\n\t\t// expand class name\n\t\t// possible values:\n\t\t// * block__element\n\t\t// * block__element_modifier\n\t\t// * block__element_modifier1_modifier2\n\t\t// * block_modifier\n\t\tvar block = '', element = '', modifier = '';\n\t\tvar separators = getSeparators();\n\t\tif (~name.indexOf(separators.element)) {\n\t\t\tvar blockElem = name.split(separators.element);\n\t\t\tvar elemModifiers = blockElem[1].split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockElem[0];\n\t\t\telement = elemModifiers.shift();\n\t\t\tmodifier = elemModifiers.join(separators.modifier);\n\t\t} else if (~name.indexOf(separators.modifier)) {\n\t\t\tvar blockModifiers = name.split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockModifiers.shift();\n\t\t\tmodifier = blockModifiers.join(separators.modifier);\n\t\t}\n\t\t\n\t\tif (block || element || modifier) {\n\t\t\tif (!block) {\n\t\t\t\tblock = item.__bem.block;\n\t\t\t}\n\t\t\t\n\t\t\t// inherit parent bem element, if exists\n//\t\t\tif (item.parent && item.parent.__bem && item.parent.__bem.element)\n//\t\t\t\telement = item.parent.__bem.element + separators.element + element;\n\t\t\t\n\t\t\t// produce multiple classes\n\t\t\tvar prefix = block;\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tif (element) {\n\t\t\t\tprefix += separators.element + element;\n\t\t\t\tresult.push(prefix);\n\t\t\t} else {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t\t\n\t\t\tif (modifier) {\n\t\t\t\tresult.push(prefix + separators.modifier + modifier);\n\t\t\t}\n\t\t\t\n\t\t\titem.__bem.block = block;\n\t\t\titem.__bem.element = element;\n\t\t\titem.__bem.modifier = modifier;\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\t// ...otherwise, return processed or original class name\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Low-level function to transform user-typed class name into full BEM class\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @param {String} entityType Type of entity to be tried to transform \n\t * ('element' or 'modifier')\n\t * @returns {String} Processed class name or original one if it can't be\n\t * transformed\n\t */\n\tfunction transformClassName(name, item, entityType) {\n\t\tvar separators = getSeparators();\n\t\tvar reSep = new RegExp('^(' + separators[entityType] + ')+', 'g');\n\t\tif (reSep.test(name)) {\n\t\t\tvar depth = 0; // parent lookup depth\n\t\t\tvar cleanName = name.replace(reSep, function(str, p1) {\n\t\t\t\tdepth = str.length / separators[entityType].length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\t// find donor element\n\t\t\tvar donor = item;\n\t\t\twhile (donor.parent && depth--) {\n\t\t\t\tdonor = donor.parent;\n\t\t\t}\n\t\t\t\n\t\t\tif (!donor || !donor.__bem)\n\t\t\t\tdonor = item;\n\t\t\t\n\t\t\tif (donor && donor.__bem) {\n\t\t\t\tvar prefix = donor.__bem.block;\n\t\t\t\t\n\t\t\t\t// decide if we should inherit element name\n//\t\t\t\tif (entityType == 'element') {\n//\t\t\t\t\tvar curElem = cleanName.split(separators.modifier, 1)[0];\n//\t\t\t\t\tif (donor.__bem.element && donor.__bem.element != curElem)\n//\t\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n//\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (entityType == 'modifier' &&  donor.__bem.element)\n\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n\t\t\t\t\n\t\t\t\treturn prefix + separators[entityType] + cleanName;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Recursive function for processing tags, which extends class names \n\t * according to BEM specs: http://bem.github.com/bem-method/pages/beginning/beginning.ru.html\n\t * <br><br>\n\t * It does several things:<br>\n\t * <ul>\n\t * <li>Expands complex class name (according to BEM symbol semantics):\n\t * .block__elem_modifier → .block.block__elem.block__elem_modifier\n\t * </li>\n\t * <li>Inherits block name on child elements: \n\t * .b-block > .__el > .__el → .b-block > .b-block__el > .b-block__el__el\n\t * </li>\n\t * <li>Treats first dash symbol as '__'</li>\n\t * <li>Double underscore (or typographic '–') is also treated as an element \n\t * level lookup, e.g. ____el will search for element definition in parent’s \n\t * parent element:\n\t * .b-block > .__el1 > .____el2 → .b-block > .b-block__el1 > .b-block__el2\n\t * </li>\n\t * </ul>\n\t * \n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t */\n\tfunction process(tree, profile) {\n\t\tif (tree.name)\n\t\t\tbemParse(tree, profile);\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tprocess(item, profile);\n\t\t\tif (!abbrUtils.isSnippet(item) && item.start)\n\t\t\t\tshouldRunHtmlFilter = true;\n\t\t});\n\t\t\n\t\treturn tree;\n\t};\n\t\n\trequire('filters').add('bem', function(tree, profile) {\n\t\tshouldRunHtmlFilter = false;\n\t\ttree = process(tree, profile);\n\t\t// in case 'bem' filter is applied after 'html' filter: run it again\n\t\t// to update output\n\t\tif (shouldRunHtmlFilter) {\n\t\t\ttree = require('filters').apply(tree, 'html', profile);\n\t\t}\n\t\t\n\t\treturn tree;\n\t});\n});\n\n/**\n * Comment important tags (with 'id' and 'class' attributes)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __commentFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t// define some preferences\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\tprefs.define('filter.commentAfter', \n\t\t\t'\\n<!-- /<%= attr(\"id\", \"#\") %><%= attr(\"class\", \".\") %> -->',\n\t\t\t'A definition of comment that should be placed <i>after</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. This definition '\n\t\t\t+ 'is an ERB-style template passed to <code>_.template()</code> '\n\t\t\t+ 'function (see Underscore.js docs for details). In template context, '\n\t\t\t+ 'the following properties and functions are availabe:\\n'\n\t\t\t+ '<ul>'\n\t\t\t\n\t\t\t+ '<li><code>attr(name, before, after)</code> – a function that outputs' \n\t\t\t+ 'specified attribute value concatenated with <code>before</code> ' \n\t\t\t+ 'and <code>after</code> strings. If attribute doesn\\'t exists, the ' \n\t\t\t+ 'empty string will be returned.</li>'\n\t\t\t\n\t\t\t+ '<li><code>node</code> – current node (instance of <code>AbbreviationNode</code>)</li>'\n\t\t\t\n\t\t\t+ '<li><code>name</code> – name of current tag</li>'\n\t\t\t\n\t\t\t+ '<li><code>padding</code> – current string padding, can be used ' \n\t\t\t+ 'for formatting</li>'\n\t\t\t\n\t\t\t+'</ul>');\n\t\n\tprefs.define('filter.commentBefore', \n\t\t\t'',\n\t\t\t'A definition of comment that should be placed <i>before</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. '\n\t\t\t+ 'For more info, read description of <code>filter.commentAfter</code> '\n\t\t\t+ 'property');\n\t\n\tprefs.define('filter.commentTrigger', 'id, class',\n\t\t\t'A comma-separated list of attribute names that should exist in abbreviatoin '\n\t\t\t+ 'where comment should be added. If you wish to add comment for '\n\t\t\t+ 'every element, set this option to <code>*</code>');\n\t\n\t/**\n\t * Add comments to tag\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction addComments(node, templateBefore, templateAfter) {\n\t\tvar utils = require('utils');\n\t\t\n\t\t// check if comments should be added\n\t\tvar trigger = prefs.get('filter.commentTrigger');\n\t\tif (trigger != '*') {\n\t\t\tvar shouldAdd = _.find(trigger.split(','), function(name) {\n\t\t\t\treturn !!node.attribute(utils.trim(name));\n\t\t\t});\n\t\t\tif (!shouldAdd) return;\n\t\t}\n\t\t\n\t\tvar ctx = {\n\t\t\tnode: node,\n\t\t\tname: node.name(),\n\t\t\tpadding: node.parent ? node.parent.padding : '',\n\t\t\tattr: function(name, before, after) {\n\t\t\t\tvar attr = node.attribute(name);\n\t\t\t\tif (attr) {\n\t\t\t\t\treturn (before || '') + attr + (after || '');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar nodeBefore = utils.normalizeNewline(templateBefore ? templateBefore(ctx) : '');\n\t\tvar nodeAfter = utils.normalizeNewline(templateAfter ? templateAfter(ctx) : '');\n\t\t\n\t\tnode.start = node.start.replace(/</, nodeBefore + '<');\n\t\tnode.end = node.end.replace(/>/, '>' + nodeAfter);\n\t}\n\t\n\tfunction process(tree, before, after) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isBlock(item))\n\t\t\t\taddComments(item, before, after);\n\t\t\t\n\t\t\tprocess(item, before, after);\n\t\t});\n\t\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('c', function(tree) {\n\t\tvar templateBefore = _.template(prefs.get('filter.commentBefore'));\n\t\tvar templateAfter = _.template(prefs.get('filter.commentAfter'));\n\t\t\n\t\treturn process(tree, templateBefore, templateAfter);\n\t});\n});\n/**\n * Filter for escaping unsafe XML characters: <, >, &\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.exec(function(require, _) {\n\tvar charMap = {\n\t\t'<': '&lt;',\n\t\t'>': '&gt;',\n\t\t'&': '&amp;'\n\t};\n\t\n\tfunction escapeChars(str) {\n\t\treturn str.replace(/([<>&])/g, function(str, p1){\n\t\t\treturn charMap[p1];\n\t\t});\n\t}\n\t\n\trequire('filters').add('e', function process(tree) {\n\t\t_.each(tree.children, function(item) {\n\t\t\titem.start = escapeChars(item.start);\n\t\t\titem.end = escapeChars(item.end);\n\t\t\titem.content = escapeChars(item.content);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Generic formatting filter: creates proper indentation for each tree node,\n * placing \"%s\" placeholder where the actual output should be. You can use\n * this filter to preformat tree and then replace %s placeholder to whatever you\n * need. This filter should't be called directly from editor as a part \n * of abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __formatFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _){\n\tvar placeholder = '%s';\n\t\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('format.noIndentTags', 'html', \n\t\t\t'A comma-separated list of tag names that should not get inner indentation.');\n\t\n\tprefs.define('format.forceIndentationForTags', 'body', \n\t\t'A comma-separated list of tag names that should <em>always</em> get inner indentation.');\n\t\n\t/**\n\t * Get indentation for given node\n\t * @param {AbbreviationNode} node\n\t * @returns {String}\n\t */\n\tfunction getIndentation(node) {\n\t\tif (_.include(prefs.getArray('format.noIndentTags') || [], node.name())) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\treturn require('resources').getVariable('indentation');\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && require('abbreviationUtils').hasBlockChildren(item.parent);\n\t}\n\t\n\t/**\n\t * Test if passed item is very first child in parsed tree\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction isVeryFirstChild(item) {\n\t\treturn item.parent && !item.parent.parent && !item.index();\n\t}\n\t\n\t/**\n\t * Check if a newline should be added before element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldAddLineBreak(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tif (profile.tag_nl === true || abbrUtils.isBlock(node))\n\t\t\treturn true;\n\t\t\n\t\tif (!node.parent || !profile.inline_break)\n\t\t\treturn false;\n\t\t\n\t\t// check if there are required amount of adjacent inline element\n\t\treturn shouldFormatInline(node.parent, profile);\n}\n\t\n\t/**\n\t * Need to add newline because <code>item</code> has too many inline children\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction shouldBreakChild(node, profile) {\n\t\t// we need to test only one child element, because \n\t\t// hasBlockChildren() method will do the rest\n\t\treturn node.children.length && shouldAddLineBreak(node.children[0], profile);\n\t}\n\t\n\tfunction shouldFormatInline(node, profile) {\n\t\tvar nodeCount = 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\treturn !!_.find(node.children, function(child) {\n\t\t\tif (child.isTextNode() || !abbrUtils.isInline(child))\n\t\t\t\tnodeCount = 0;\n\t\t\telse if (abbrUtils.isInline(child))\n\t\t\t\tnodeCount++;\n\t\t\t\n\t\t\tif (nodeCount >= profile.inline_break)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\t\n\tfunction isRoot(item) {\n\t\treturn !item.parent;\n\t}\n\t\n\t/**\n\t * Processes element with matched resource of type <code>snippet</code>\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processSnippet(item, profile, level) {\n\t\titem.start = item.end = '';\n\t\tif (!isVeryFirstChild(item) && profile.tag_nl !== false && shouldAddLineBreak(item, profile)) {\n\t\t\t// check if we’re not inside inline element\n\t\t\tif (isRoot(item.parent) || !require('abbreviationUtils').isInline(item.parent)) {\n\t\t\t\titem.start = require('utils').getNewline() + item.start;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Check if we should add line breaks inside inline element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldBreakInsideInline(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar hasBlockElems = _.any(node.children, function(child) {\n\t\t\tif (abbrUtils.isSnippet(child))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn !abbrUtils.isInline(child);\n\t\t});\n\t\t\n\t\tif (!hasBlockElems) {\n\t\t\treturn shouldFormatInline(node, profile);\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\titem.start = item.end = placeholder;\n\t\tvar utils = require('utils');\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar nl = utils.getNewline();\n\t\tvar indent = getIndentation(item);\n\t\t\t\n\t\t// formatting output\n\t\tif (profile.tag_nl !== false) {\n\t\t\tvar forceNl = profile.tag_nl === true && (profile.tag_nl_leaf || item.children.length);\n\t\t\tif (!forceNl) {\n\t\t\t\tforceNl = _.include(prefs.getArray('format.forceIndentationForTags') || [], item.name());\n\t\t\t}\n\t\t\t\n\t\t\t// formatting block-level elements\n\t\t\tif (!item.isTextNode()) {\n\t\t\t\tif (shouldAddLineBreak(item, profile)) {\n\t\t\t\t\t// - do not indent the very first element\n\t\t\t\t\t// - do not indent first child of a snippet\n\t\t\t\t\tif (!isVeryFirstChild(item) && (!abbrUtils.isSnippet(item.parent) || item.index()))\n\t\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasBlockChildren(item) || shouldBreakChild(item, profile) || (forceNl && !isUnary))\n\t\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasTagsInContent(item) || (forceNl && !item.children.length && !isUnary))\n\t\t\t\t\t\titem.start += nl + indent;\n\t\t\t\t} else if (abbrUtils.isInline(item) && hasBlockSibling(item) && !isVeryFirstChild(item)) {\n\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t} else if (abbrUtils.isInline(item) && shouldBreakInsideInline(item, profile)) {\n\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.padding = indent;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('_format', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isSnippet(item))\n\t\t\t\tprocessSnippet(item, profile, level);\n\t\t\telse\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter for producing HAML code from abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __hamlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar childToken = '${child}';\n\t\n\tfunction transformClassName(className) {\n\t\treturn require('utils').trim(className).replace(/\\s+/g, '.');\n\t}\n\t\n\t/**\n\t * Creates HAML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} tag\n\t * @param {Object} profile\n\t */\n\tfunction makeAttributesString(tag, profile) {\n\t\tvar attrs = '';\n\t\tvar otherAttrs = [];\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\t_.each(tag.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\tswitch (attrName.toLowerCase()) {\n\t\t\t\t// use short notation for ID and CLASS attributes\n\t\t\t\tcase 'id':\n\t\t\t\t\tattrs += '#' + (a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'class':\n\t\t\t\t\tattrs += '.' + transformClassName(a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\t// process other attributes\n\t\t\t\tdefault:\n\t\t\t\t\totherAttrs.push(':' +attrName + ' => ' + attrQuote + (a.value || cursor) + attrQuote);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (otherAttrs.length)\n\t\t\tattrs += '{' + otherAttrs.join(', ') + '}';\n\t\t\n\t\treturn attrs;\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && item.parent.hasBlockChildren();\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent)\n\t\t\t// looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile);\n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar selfClosing = profile.self_closing_tag && isUnary ? '/' : '';\n\t\tvar start= '';\n\t\t\t\n\t\t// define tag name\n\t\tvar tagName = '%' + profile.tagName(item.name());\n\t\tif (tagName.toLowerCase() == '%div' && attrs && attrs.indexOf('{') == -1)\n\t\t\t// omit div tag\n\t\t\ttagName = '';\n\t\t\t\n\t\titem.end = '';\n\t\tstart = tagName + attrs + selfClosing + ' ';\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\t\n\t\tif (!item.children.length && !isUnary)\n\t\t\titem.start += cursor;\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('haml', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter that produces HTML tree\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __htmlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Creates HTML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction makeAttributesString(node, profile) {\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\treturn _.map(node.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\treturn ' ' + attrName + '=' + attrQuote + (a.value || cursor) + attrQuote;\n\t\t}).join('');\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent) // looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile); \n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar start= '';\n\t\tvar end = '';\n\t\t\t\n\t\t// define opening and closing tags\n\t\tif (!item.isTextNode()) {\n\t\t\tvar tagName = profile.tagName(item.name());\n\t\t\tif (isUnary) {\n\t\t\t\tstart = '<' + tagName + attrs + profile.selfClosing() + '>';\n\t\t\t\titem.end = '';\n\t\t\t} else {\n\t\t\t\tstart = '<' + tagName + attrs + '>';\n\t\t\t\tend = '</' + tagName + '>';\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\titem.end = utils.replaceSubstring(item.end, end, item.end.indexOf(placeholder), placeholder);\n\t\t\n\t\t// should we put caret placeholder after opening tag?\n\t\tif (\n\t\t\t\t!item.children.length \n\t\t\t\t&& !isUnary \n\t\t\t\t&& !~item.content.indexOf(cursor)\n\t\t\t\t&& !require('tabStops').extract(item.content).tabstops.length\n\t\t\t) {\n\t\t\titem.start += cursor;\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('html', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Output abbreviation on a single line (i.e. no line breaks)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __singleLineFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar rePad = /^\\s+/;\n\tvar reNl = /[\\n\\r]/g;\n\t\n\trequire('filters').add('s', function process(tree, profile, level) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)) {\n\t\t\t\t// remove padding from item \n\t\t\t\titem.start = item.start.replace(rePad, '');\n\t\t\t\titem.end = item.end.replace(rePad, '');\n\t\t\t}\n\t\t\t\n\t\t\t// remove newlines \n\t\t\titem.start = item.start.replace(reNl, '');\n\t\t\titem.end = item.end.replace(reNl, '');\n\t\t\titem.content = item.content.replace(reNl, '');\n\t\t\t\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});\n/**\n * Trim filter: removes characters at the beginning of the text\n * content that indicates lists: numbers, #, *, -, etc.\n * \n * Useful for wrapping lists with abbreviation.\n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __trimFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('preferences').define('filter.trimRegexp', '[\\\\s|\\\\u00a0]*[\\\\d|#|\\\\-|\\*|\\\\u2022]+\\\\.?\\\\s*',\n\t\t\t'Regular expression used to remove list markers (numbers, dashes, ' \n\t\t\t+ 'bullets, etc.) in <code>t</code> (trim) filter. The trim filter '\n\t\t\t+ 'is useful for wrapping with abbreviation lists, pased from other ' \n\t\t\t+ 'documents (for example, Word documents).');\n\t\n\tfunction process(tree, re) {\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (item.content)\n\t\t\t\titem.content = item.content.replace(re, '');\n\t\t\t\n\t\t\tprocess(item, re);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('t', function(tree) {\n\t\tvar re = new RegExp(require('preferences').get('filter.trimRegexp'));\n\t\treturn process(tree, re);\n\t});\n});\n/**\n * Filter for trimming \"select\" attributes from some tags that contains\n * child elements\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __xslFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar tags = {\n\t\t'xsl:variable': 1,\n\t\t'xsl:with-param': 1\n\t};\n\t\n\t/**\n\t * Removes \"select\" attribute from node\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction trimAttribute(node) {\n\t\tnode.start = node.start.replace(/\\s+select\\s*=\\s*(['\"]).*?\\1/, '');\n\t}\n\t\n\trequire('filters').add('xsl', function process(tree) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)\n\t\t\t\t\t&& (item.name() || '').toLowerCase() in tags \n\t\t\t\t\t&& item.children.length)\n\t\t\t\ttrimAttribute(item);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * \"Lorem ipsum\" text generator. Matches <code>lipsum(num)?</code> or \n * <code>lorem(num)?</code> abbreviation.\n * This code is based on Django's contribution: \n * https://code.djangoproject.com/browser/django/trunk/django/contrib/webdesign/lorem_ipsum.py\n * <br><br>\n * Examples to test:<br>\n * <code>lipsum</code> – generates 30 words text.<br>\n * <code>lipsum*6</code> – generates 6 paragraphs (autowrapped with &lt;p&gt; element) of text.<br>\n * <code>ol>lipsum10*5</code> — generates ordered list with 5 list items (autowrapped with &lt;li&gt; tag)\n * with text of 10 words on each line<br>\n * <code>span*3>lipsum20</code> – generates 3 paragraphs of 20-words text, each wrapped with &lt;span&gt; element .\n * Each paragraph phrase is unique   \n * @param {Function} require\n * @param {Underscore} _ \n * @constructor\n * @memberOf __loremIpsumGeneratorDefine\n */\nemmet.define('lorem', function(require, _) {\n\tvar langs = {\n\t\ten: {\n\t\t\tcommon: ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipisicing', 'elit'],\n\t\t\twords: ['exercitationem', 'perferendis', 'perspiciatis', 'laborum', 'eveniet',\n\t             'sunt', 'iure', 'nam', 'nobis', 'eum', 'cum', 'officiis', 'excepturi',\n\t             'odio', 'consectetur', 'quasi', 'aut', 'quisquam', 'vel', 'eligendi',\n\t             'itaque', 'non', 'odit', 'tempore', 'quaerat', 'dignissimos',\n\t             'facilis', 'neque', 'nihil', 'expedita', 'vitae', 'vero', 'ipsum',\n\t             'nisi', 'animi', 'cumque', 'pariatur', 'velit', 'modi', 'natus',\n\t             'iusto', 'eaque', 'sequi', 'illo', 'sed', 'ex', 'et', 'voluptatibus',\n\t             'tempora', 'veritatis', 'ratione', 'assumenda', 'incidunt', 'nostrum',\n\t             'placeat', 'aliquid', 'fuga', 'provident', 'praesentium', 'rem',\n\t             'necessitatibus', 'suscipit', 'adipisci', 'quidem', 'possimus',\n\t             'voluptas', 'debitis', 'sint', 'accusantium', 'unde', 'sapiente',\n\t             'voluptate', 'qui', 'aspernatur', 'laudantium', 'soluta', 'amet',\n\t             'quo', 'aliquam', 'saepe', 'culpa', 'libero', 'ipsa', 'dicta',\n\t             'reiciendis', 'nesciunt', 'doloribus', 'autem', 'impedit', 'minima',\n\t             'maiores', 'repudiandae', 'ipsam', 'obcaecati', 'ullam', 'enim',\n\t             'totam', 'delectus', 'ducimus', 'quis', 'voluptates', 'dolores',\n\t             'molestiae', 'harum', 'dolorem', 'quia', 'voluptatem', 'molestias',\n\t             'magni', 'distinctio', 'omnis', 'illum', 'dolorum', 'voluptatum', 'ea',\n\t             'quas', 'quam', 'corporis', 'quae', 'blanditiis', 'atque', 'deserunt',\n\t             'laboriosam', 'earum', 'consequuntur', 'hic', 'cupiditate',\n\t             'quibusdam', 'accusamus', 'ut', 'rerum', 'error', 'minus', 'eius',\n\t             'ab', 'ad', 'nemo', 'fugit', 'officia', 'at', 'in', 'id', 'quos',\n\t             'reprehenderit', 'numquam', 'iste', 'fugiat', 'sit', 'inventore',\n\t             'beatae', 'repellendus', 'magnam', 'recusandae', 'quod', 'explicabo',\n\t             'doloremque', 'aperiam', 'consequatur', 'asperiores', 'commodi',\n\t             'optio', 'dolor', 'labore', 'temporibus', 'repellat', 'veniam',\n\t             'architecto', 'est', 'esse', 'mollitia', 'nulla', 'a', 'similique',\n\t             'eos', 'alias', 'dolore', 'tenetur', 'deleniti', 'porro', 'facere',\n\t             'maxime', 'corrupti']\n\t\t},\n\t\tru: {\n\t\t\tcommon: ['далеко-далеко', 'за', 'словесными', 'горами', 'в стране', 'гласных', 'и согласных', 'живут', 'рыбные', 'тексты'],\n\t\t\twords: ['вдали', 'от всех', 'они', 'буквенных', 'домах', 'на берегу', 'семантика', \n\t\t            'большого', 'языкового', 'океана', 'маленький', 'ручеек', 'даль', \n\t\t            'журчит', 'по всей', 'обеспечивает', 'ее','всеми', 'необходимыми', \n\t\t            'правилами', 'эта', 'парадигматическая', 'страна', 'которой', 'жаренные', \n\t\t            'предложения', 'залетают', 'прямо', 'рот', 'даже', 'всемогущая', \n\t\t            'пунктуация', 'не', 'имеет', 'власти', 'над', 'рыбными', 'текстами', \n\t\t            'ведущими', 'безорфографичный', 'образ', 'жизни', 'однажды', 'одна', \n\t\t            'маленькая', 'строчка','рыбного', 'текста', 'имени', 'lorem', 'ipsum', \n\t\t            'решила', 'выйти', 'большой', 'мир', 'грамматики', 'великий', 'оксмокс', \n\t\t            'предупреждал', 'о', 'злых', 'запятых', 'диких', 'знаках', 'вопроса', \n\t\t            'коварных', 'точках', 'запятой', 'но', 'текст', 'дал', 'сбить', \n\t\t            'себя', 'толку', 'он', 'собрал', 'семь', 'своих', 'заглавных', 'букв', \n\t\t            'подпоясал', 'инициал', 'за', 'пояс', 'пустился', 'дорогу', \n\t\t            'взобравшись', 'первую', 'вершину', 'курсивных', 'гор', 'бросил', \n\t\t            'последний', 'взгляд', 'назад', 'силуэт', 'своего', 'родного', 'города', \n\t\t            'буквоград', 'заголовок', 'деревни', 'алфавит', 'подзаголовок', 'своего', \n\t\t            'переулка', 'грустный', 'реторический', 'вопрос', 'скатился', 'его', \n\t\t            'щеке', 'продолжил', 'свой', 'путь', 'дороге', 'встретил', 'рукопись', \n\t\t            'она', 'предупредила',  'моей', 'все', 'переписывается', 'несколько', \n\t\t            'раз', 'единственное', 'что', 'меня', 'осталось', 'это', 'приставка', \n\t\t            'возвращайся', 'ты', 'лучше', 'свою', 'безопасную', 'страну', 'послушавшись', \n\t\t            'рукописи', 'наш', 'продолжил', 'свой', 'путь', 'вскоре', 'ему', \n\t\t            'повстречался', 'коварный', 'составитель', 'рекламных', 'текстов', \n\t\t            'напоивший', 'языком', 'речью', 'заманивший', 'свое', 'агенство', \n\t\t            'которое', 'использовало', 'снова', 'снова', 'своих', 'проектах', \n\t\t            'если', 'переписали', 'то', 'живет', 'там', 'до', 'сих', 'пор']\n\t\t}\n\t};\n\n\tvar prefs = require('preferences');\n\tprefs.define('lorem.defaultLang', 'en');\n\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar re = /^(?:lorem|lipsum)([a-z]{2})?(\\d*)$/i, match;\n\t\t\n\t\t/** @param {AbbreviationNode} node */\n\t\ttree.findAll(function(node) {\n\t\t\tif (node._name && (match = node._name.match(re))) {\n\t\t\t\tvar wordCound = match[2] || 30;\n\t\t\t\tvar lang = match[1] || prefs.get('lorem.defaultLang') || 'en';\n\t\t\t\t\n\t\t\t\t// force node name resolving if node should be repeated\n\t\t\t\t// or contains attributes. In this case, node should be outputed\n\t\t\t\t// as tag, otherwise as text-only node\n\t\t\t\tnode._name = '';\n\t\t\t\tnode.data('forceNameResolving', node.isRepeating() || node.attributeList().length);\n\t\t\t\tnode.data('pasteOverwrites', true);\n\t\t\t\tnode.data('paste', function(i, content) {\n\t\t\t\t\treturn paragraph(lang, wordCound, !i);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\t\n\t/**\n\t * Returns random integer between <code>from</code> and <code>to</code> values\n\t * @param {Number} from\n\t * @param {Number} to\n\t * @returns {Number}\n\t */\n\tfunction randint(from, to) {\n\t\treturn Math.round(Math.random() * (to - from) + from);\n\t}\n\t\n\t/**\n\t * @param {Array} arr\n\t * @param {Number} count\n\t * @returns {Array}\n\t */\n\tfunction sample(arr, count) {\n\t\tvar len = arr.length;\n\t\tvar iterations = Math.min(len, count);\n\t\tvar result = [];\n\t\twhile (result.length < iterations) {\n\t\t\tvar randIx = randint(0, len - 1);\n\t\t\tif (!_.include(result, randIx))\n\t\t\t\tresult.push(randIx);\n\t\t}\n\t\t\n\t\treturn _.map(result, function(ix) {\n\t\t\treturn arr[ix];\n\t\t});\n\t}\n\t\n\tfunction choice(val) {\n\t\tif (_.isString(val))\n\t\t\treturn val.charAt(randint(0, val.length - 1));\n\t\t\n\t\treturn val[randint(0, val.length - 1)];\n\t}\n\t\n\tfunction sentence(words, end) {\n\t\tif (words.length) {\n\t\t\twords[0] = words[0].charAt(0).toUpperCase() + words[0].substring(1);\n\t\t}\n\t\t\n\t\treturn words.join(' ') + (end || choice('?!...')); // more dots that question marks\n\t}\n\t\n\t/**\n\t * Insert commas at randomly selected words. This function modifies values\n\t * inside <code>words</code> array \n\t * @param {Array} words\n\t */\n\tfunction insertCommas(words) {\n\t\tvar len = words.length;\n\t\tvar totalCommas = 0;\n\t\t\n\t\tif (len > 3 && len <= 6) {\n\t\t\ttotalCommas = randint(0, 1);\n\t\t} else if (len > 6 && len <= 12) {\n\t\t\ttotalCommas = randint(0, 2);\n\t\t} else {\n\t\t\ttotalCommas = randint(1, 4);\n\t\t}\n\n\t\t_.each(_.range(totalCommas), function(ix) {\n\t\t\tif (ix < words.length - 1) {\n\t\t\t\twords[ix] += ',';\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Generate a paragraph of \"Lorem ipsum\" text\n\t * @param {Number} wordCount Words count in paragraph\n\t * @param {Boolean} startWithCommon Should paragraph start with common \n\t * \"lorem ipsum\" sentence.\n\t * @returns {String}\n\t */\n\tfunction paragraph(lang, wordCount, startWithCommon) {\n\t\tvar data = langs[lang];\n\t\tif (!data) {\n\t\t\treturn '';\n\t\t}\n\n\t\tvar result = [];\n\t\tvar totalWords = 0;\n\t\tvar words;\n\t\t\n\t\twordCount = parseInt(wordCount, 10);\n\t\t\n\t\tif (startWithCommon && data.common) {\n\t\t\twords = data.common.slice(0, wordCount);\n\t\t\tif (words.length > 5)\n\t\t\t\twords[4] += ',';\n\t\t\ttotalWords += words.length;\n\t\t\tresult.push(sentence(words, '.'));\n\t\t}\n\t\t\n\t\twhile (totalWords < wordCount) {\n\t\t\twords = sample(data.words, Math.min(randint(3, 12) * randint(1, 5), wordCount - totalWords));\n\t\t\ttotalWords += words.length;\n\t\t\tinsertCommas(words);\n\t\t\tresult.push(sentence(words));\n\t\t}\n\t\t\n\t\treturn result.join(' ');\n\t}\n\n\treturn {\n\t\t/**\n\t\t * Adds new language words for Lorem Ipsum generator\n\t\t * @param {String} lang Two-letter lang definition\n\t\t * @param {Object} data Words for language. Maight be either a space-separated \n\t\t * list of words (String), Array of words or object with <code>text</code> and\n\t\t * <code>common</code> properties\n\t\t */\n\t\taddLang: function(lang, data) {\n\t\t\tif (_.isString(data)) {\n\t\t\t\tdata = {words: _.compact(data.split(' '))};\n\t\t\t} else if (_.isArray(data)) {\n\t\t\t\tdata = {words: data};\n\t\t\t}\n\n\t\t\tlangs[lang] = data;\n\t\t}\n\t}\n});/**\n * A back-end bootstrap module with commonly used methods for loading user data\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('bootstrap', function(require, _) {\nvar snippets = {\n\t\"variables\": {\n\t\t\"lang\": \"en\",\n\t\t\"locale\": \"en-US\",\n\t\t\"charset\": \"UTF-8\",\n\t\t\"indentation\": \"\\t\",\n\t\t\"newline\": \"\\n\"\n\t},\n\t\n\t\"css\": {\n\t\t\"filters\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"@i\": \"@import url(|);\",\n\t\t\t\"@import\": \"@import url(|);\",\n\t\t\t\"@m\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@media\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@f\": \"@font-face {\\n\\tfont-family:|;\\n\\tsrc:url(|);\\n}\",\n\t\t\t\"@f+\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\n\t\t\t\"@kf\": \"@-webkit-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-o-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-moz-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\",\n\n\n\t\t\t\"anim\": \"animation:|;\",\n\t\t\t\"anim-\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode};\",\n\t\t\t\"animdel\": \"animation-delay:${1:time};\",\n\t\t\t\n\t\t\t\"animdir\": \"animation-direction:${1:normal};\",\n\t\t\t\"animdir:n\": \"animation-direction:normal;\",\n\t\t\t\"animdir:r\": \"animation-direction:reverse;\",\n\t\t\t\"animdir:a\": \"animation-direction:alternate;\",\n\t\t\t\"animdir:ar\": \"animation-direction:alternate-reverse;\",\n\t\t\t\n\t\t\t\"animdur\": \"animation-duration:${1:0}s;\",\n\t\t\t\n\t\t\t\"animfm\": \"animation-fill-mode:${1:both};\",\n\t\t\t\"animfm:f\": \"animation-fill-mode:forwards;\",\n\t\t\t\"animfm:b\": \"animation-fill-mode:backwards;\",\n\t\t\t\"animfm:bt\": \"animation-fill-mode:both;\",\n\t\t\t\"animfm:bh\": \"animation-fill-mode:both;\",\n\t\t\t\n\t\t\t\"animic\": \"animation-iteration-count:${1:1};\",\n\t\t\t\"animic:i\": \"animation-iteration-count:infinite;\",\n\t\t\t\n\t\t\t\"animn\": \"animation-name:${1:none};\",\n\n\t\t\t\"animps\": \"animation-play-state:${1:running};\",\n\t\t\t\"animps:p\": \"animation-play-state:paused;\",\n\t\t\t\"animps:r\": \"animation-play-state:running;\",\n\n\t\t\t\"animtf\": \"animation-timing-function:${1:linear};\",\n\t\t\t\"animtf:e\": \"animation-timing-function:ease;\",\n\t\t\t\"animtf:ei\": \"animation-timing-function:ease-in;\",\n\t\t\t\"animtf:eo\": \"animation-timing-function:ease-out;\",\n\t\t\t\"animtf:eio\": \"animation-timing-function:ease-in-out;\",\n\t\t\t\"animtf:l\": \"animation-timing-function:linear;\",\n\t\t\t\"animtf:cb\": \"animation-timing-function:cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1});\",\n\t\t\t\n\t\t\t\"ap\": \"appearance:${none};\",\n\n\t\t\t\"!\": \"!important\",\n\t\t\t\"pos\": \"position:${1:relative};\",\n\t\t\t\"pos:s\": \"position:static;\",\n\t\t\t\"pos:a\": \"position:absolute;\",\n\t\t\t\"pos:r\": \"position:relative;\",\n\t\t\t\"pos:f\": \"position:fixed;\",\n\t\t\t\"t\": \"top:|;\",\n\t\t\t\"t:a\": \"top:auto;\",\n\t\t\t\"r\": \"right:|;\",\n\t\t\t\"r:a\": \"right:auto;\",\n\t\t\t\"b\": \"bottom:|;\",\n\t\t\t\"b:a\": \"bottom:auto;\",\n\t\t\t\"l\": \"left:|;\",\n\t\t\t\"l:a\": \"left:auto;\",\n\t\t\t\"z\": \"z-index:|;\",\n\t\t\t\"z:a\": \"z-index:auto;\",\n\t\t\t\"fl\": \"float:${1:left};\",\n\t\t\t\"fl:n\": \"float:none;\",\n\t\t\t\"fl:l\": \"float:left;\",\n\t\t\t\"fl:r\": \"float:right;\",\n\t\t\t\"cl\": \"clear:${1:both};\",\n\t\t\t\"cl:n\": \"clear:none;\",\n\t\t\t\"cl:l\": \"clear:left;\",\n\t\t\t\"cl:r\": \"clear:right;\",\n\t\t\t\"cl:b\": \"clear:both;\",\n\n\t\t\t\"colm\": \"columns:|;\",\n\t\t\t\"colmc\": \"column-count:|;\",\n\t\t\t\"colmf\": \"column-fill:|;\",\n\t\t\t\"colmg\": \"column-gap:|;\",\n\t\t\t\"colmr\": \"column-rule:|;\",\n\t\t\t\"colmrc\": \"column-rule-color:|;\",\n\t\t\t\"colmrs\": \"column-rule-style:|;\",\n\t\t\t\"colmrw\": \"column-rule-width:|;\",\n\t\t\t\"colms\": \"column-span:|;\",\n\t\t\t\"colmw\": \"column-width:|;\",\n\n\t\t\t\"d\": \"display:${1:block};\",\n\t\t\t\"d:n\": \"display:none;\",\n\t\t\t\"d:b\": \"display:block;\",\n\t\t\t\"d:i\": \"display:inline;\",\n\t\t\t\"d:ib\": \"display:inline-block;\",\n\t\t\t\"d:ib+\": \"display: inline-block;\\n*display: inline;\\n*zoom: 1;\",\n\t\t\t\"d:li\": \"display:list-item;\",\n\t\t\t\"d:ri\": \"display:run-in;\",\n\t\t\t\"d:cp\": \"display:compact;\",\n\t\t\t\"d:tb\": \"display:table;\",\n\t\t\t\"d:itb\": \"display:inline-table;\",\n\t\t\t\"d:tbcp\": \"display:table-caption;\",\n\t\t\t\"d:tbcl\": \"display:table-column;\",\n\t\t\t\"d:tbclg\": \"display:table-column-group;\",\n\t\t\t\"d:tbhg\": \"display:table-header-group;\",\n\t\t\t\"d:tbfg\": \"display:table-footer-group;\",\n\t\t\t\"d:tbr\": \"display:table-row;\",\n\t\t\t\"d:tbrg\": \"display:table-row-group;\",\n\t\t\t\"d:tbc\": \"display:table-cell;\",\n\t\t\t\"d:rb\": \"display:ruby;\",\n\t\t\t\"d:rbb\": \"display:ruby-base;\",\n\t\t\t\"d:rbbg\": \"display:ruby-base-group;\",\n\t\t\t\"d:rbt\": \"display:ruby-text;\",\n\t\t\t\"d:rbtg\": \"display:ruby-text-group;\",\n\t\t\t\"v\": \"visibility:${1:hidden};\",\n\t\t\t\"v:v\": \"visibility:visible;\",\n\t\t\t\"v:h\": \"visibility:hidden;\",\n\t\t\t\"v:c\": \"visibility:collapse;\",\n\t\t\t\"ov\": \"overflow:${1:hidden};\",\n\t\t\t\"ov:v\": \"overflow:visible;\",\n\t\t\t\"ov:h\": \"overflow:hidden;\",\n\t\t\t\"ov:s\": \"overflow:scroll;\",\n\t\t\t\"ov:a\": \"overflow:auto;\",\n\t\t\t\"ovx\": \"overflow-x:${1:hidden};\",\n\t\t\t\"ovx:v\": \"overflow-x:visible;\",\n\t\t\t\"ovx:h\": \"overflow-x:hidden;\",\n\t\t\t\"ovx:s\": \"overflow-x:scroll;\",\n\t\t\t\"ovx:a\": \"overflow-x:auto;\",\n\t\t\t\"ovy\": \"overflow-y:${1:hidden};\",\n\t\t\t\"ovy:v\": \"overflow-y:visible;\",\n\t\t\t\"ovy:h\": \"overflow-y:hidden;\",\n\t\t\t\"ovy:s\": \"overflow-y:scroll;\",\n\t\t\t\"ovy:a\": \"overflow-y:auto;\",\n\t\t\t\"ovs\": \"overflow-style:${1:scrollbar};\",\n\t\t\t\"ovs:a\": \"overflow-style:auto;\",\n\t\t\t\"ovs:s\": \"overflow-style:scrollbar;\",\n\t\t\t\"ovs:p\": \"overflow-style:panner;\",\n\t\t\t\"ovs:m\": \"overflow-style:move;\",\n\t\t\t\"ovs:mq\": \"overflow-style:marquee;\",\n\t\t\t\"zoo\": \"zoom:1;\",\n\t\t\t\"zm\": \"zoom:1;\",\n\t\t\t\"cp\": \"clip:|;\",\n\t\t\t\"cp:a\": \"clip:auto;\",\n\t\t\t\"cp:r\": \"clip:rect(${1:top} ${2:right} ${3:bottom} ${4:left});\",\n\t\t\t\"bxz\": \"box-sizing:${1:border-box};\",\n\t\t\t\"bxz:cb\": \"box-sizing:content-box;\",\n\t\t\t\"bxz:bb\": \"box-sizing:border-box;\",\n\t\t\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:color};\",\n\t\t\t\"bxsh:r\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:spread }rgb(${6:0}, ${7:0}, ${8:0});\",\n\t\t\t\"bxsh:ra\": \"box-shadow:${1:inset }${2:h} ${3:v} ${4:blur} ${5:spread }rgba(${6:0}, ${7:0}, ${8:0}, .${9:5});\",\n\t\t\t\"bxsh:n\": \"box-shadow:none;\",\n\t\t\t\"m\": \"margin:|;\",\n\t\t\t\"m:a\": \"margin:auto;\",\n\t\t\t\"mt\": \"margin-top:|;\",\n\t\t\t\"mt:a\": \"margin-top:auto;\",\n\t\t\t\"mr\": \"margin-right:|;\",\n\t\t\t\"mr:a\": \"margin-right:auto;\",\n\t\t\t\"mb\": \"margin-bottom:|;\",\n\t\t\t\"mb:a\": \"margin-bottom:auto;\",\n\t\t\t\"ml\": \"margin-left:|;\",\n\t\t\t\"ml:a\": \"margin-left:auto;\",\n\t\t\t\"p\": \"padding:|;\",\n\t\t\t\"pt\": \"padding-top:|;\",\n\t\t\t\"pr\": \"padding-right:|;\",\n\t\t\t\"pb\": \"padding-bottom:|;\",\n\t\t\t\"pl\": \"padding-left:|;\",\n\t\t\t\"w\": \"width:|;\",\n\t\t\t\"w:a\": \"width:auto;\",\n\t\t\t\"h\": \"height:|;\",\n\t\t\t\"h:a\": \"height:auto;\",\n\t\t\t\"maw\": \"max-width:|;\",\n\t\t\t\"maw:n\": \"max-width:none;\",\n\t\t\t\"mah\": \"max-height:|;\",\n\t\t\t\"mah:n\": \"max-height:none;\",\n\t\t\t\"miw\": \"min-width:|;\",\n\t\t\t\"mih\": \"min-height:|;\",\n\t\t\t\"mar\": \"max-resolution:${1:res};\",\n\t\t\t\"mir\": \"min-resolution:${1:res};\",\n\t\t\t\"ori\": \"orientation:|;\",\n\t\t\t\"ori:l\": \"orientation:landscape;\",\n\t\t\t\"ori:p\": \"orientation:portrait;\",\n\t\t\t\"ol\": \"outline:|;\",\n\t\t\t\"ol:n\": \"outline:none;\",\n\t\t\t\"olo\": \"outline-offset:|;\",\n\t\t\t\"olw\": \"outline-width:|;\",\n\t\t\t\"olw:tn\": \"outline-width:thin;\",\n\t\t\t\"olw:m\": \"outline-width:medium;\",\n\t\t\t\"olw:tc\": \"outline-width:thick;\",\n\t\t\t\"ols\": \"outline-style:|;\",\n\t\t\t\"ols:n\": \"outline-style:none;\",\n\t\t\t\"ols:dt\": \"outline-style:dotted;\",\n\t\t\t\"ols:ds\": \"outline-style:dashed;\",\n\t\t\t\"ols:s\": \"outline-style:solid;\",\n\t\t\t\"ols:db\": \"outline-style:double;\",\n\t\t\t\"ols:g\": \"outline-style:groove;\",\n\t\t\t\"ols:r\": \"outline-style:ridge;\",\n\t\t\t\"ols:i\": \"outline-style:inset;\",\n\t\t\t\"ols:o\": \"outline-style:outset;\",\n\t\t\t\"olc\": \"outline-color:#${1:000};\",\n\t\t\t\"olc:i\": \"outline-color:invert;\",\n\t\t\t\"bd\": \"border:|;\",\n\t\t\t\"bd+\": \"border:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bd:n\": \"border:none;\",\n\t\t\t\"bdbk\": \"border-break:${1:close};\",\n\t\t\t\"bdbk:c\": \"border-break:close;\",\n\t\t\t\"bdcl\": \"border-collapse:|;\",\n\t\t\t\"bdcl:c\": \"border-collapse:collapse;\",\n\t\t\t\"bdcl:s\": \"border-collapse:separate;\",\n\t\t\t\"bdc\": \"border-color:#${1:000};\",\n\t\t\t\"bdc:t\": \"border-color:transparent;\",\n\t\t\t\"bdi\": \"border-image:url(|);\",\n\t\t\t\"bdi:n\": \"border-image:none;\",\n\t\t\t\"bdti\": \"border-top-image:url(|);\",\n\t\t\t\"bdti:n\": \"border-top-image:none;\",\n\t\t\t\"bdri\": \"border-right-image:url(|);\",\n\t\t\t\"bdri:n\": \"border-right-image:none;\",\n\t\t\t\"bdbi\": \"border-bottom-image:url(|);\",\n\t\t\t\"bdbi:n\": \"border-bottom-image:none;\",\n\t\t\t\"bdli\": \"border-left-image:url(|);\",\n\t\t\t\"bdli:n\": \"border-left-image:none;\",\n\t\t\t\"bdci\": \"border-corner-image:url(|);\",\n\t\t\t\"bdci:n\": \"border-corner-image:none;\",\n\t\t\t\"bdci:c\": \"border-corner-image:continue;\",\n\t\t\t\"bdtli\": \"border-top-left-image:url(|);\",\n\t\t\t\"bdtli:n\": \"border-top-left-image:none;\",\n\t\t\t\"bdtli:c\": \"border-top-left-image:continue;\",\n\t\t\t\"bdtri\": \"border-top-right-image:url(|);\",\n\t\t\t\"bdtri:n\": \"border-top-right-image:none;\",\n\t\t\t\"bdtri:c\": \"border-top-right-image:continue;\",\n\t\t\t\"bdbri\": \"border-bottom-right-image:url(|);\",\n\t\t\t\"bdbri:n\": \"border-bottom-right-image:none;\",\n\t\t\t\"bdbri:c\": \"border-bottom-right-image:continue;\",\n\t\t\t\"bdbli\": \"border-bottom-left-image:url(|);\",\n\t\t\t\"bdbli:n\": \"border-bottom-left-image:none;\",\n\t\t\t\"bdbli:c\": \"border-bottom-left-image:continue;\",\n\t\t\t\"bdf\": \"border-fit:${1:repeat};\",\n\t\t\t\"bdf:c\": \"border-fit:clip;\",\n\t\t\t\"bdf:r\": \"border-fit:repeat;\",\n\t\t\t\"bdf:sc\": \"border-fit:scale;\",\n\t\t\t\"bdf:st\": \"border-fit:stretch;\",\n\t\t\t\"bdf:ow\": \"border-fit:overwrite;\",\n\t\t\t\"bdf:of\": \"border-fit:overflow;\",\n\t\t\t\"bdf:sp\": \"border-fit:space;\",\n\t\t\t\"bdlen\": \"border-length:|;\",\n\t\t\t\"bdlen:a\": \"border-length:auto;\",\n\t\t\t\"bdsp\": \"border-spacing:|;\",\n\t\t\t\"bds\": \"border-style:|;\",\n\t\t\t\"bds:n\": \"border-style:none;\",\n\t\t\t\"bds:h\": \"border-style:hidden;\",\n\t\t\t\"bds:dt\": \"border-style:dotted;\",\n\t\t\t\"bds:ds\": \"border-style:dashed;\",\n\t\t\t\"bds:s\": \"border-style:solid;\",\n\t\t\t\"bds:db\": \"border-style:double;\",\n\t\t\t\"bds:dtds\": \"border-style:dot-dash;\",\n\t\t\t\"bds:dtdtds\": \"border-style:dot-dot-dash;\",\n\t\t\t\"bds:w\": \"border-style:wave;\",\n\t\t\t\"bds:g\": \"border-style:groove;\",\n\t\t\t\"bds:r\": \"border-style:ridge;\",\n\t\t\t\"bds:i\": \"border-style:inset;\",\n\t\t\t\"bds:o\": \"border-style:outset;\",\n\t\t\t\"bdw\": \"border-width:|;\",\n\t\t\t\"bdtw\": \"border-top-width:|;\",\n\t\t\t\"bdrw\": \"border-right-width:|;\",\n\t\t\t\"bdbw\": \"border-bottom-width:|;\",\n\t\t\t\"bdlw\": \"border-left-width:|;\",\n\t\t\t\"bdt\": \"border-top:|;\",\n\t\t\t\"bt\": \"border-top:|;\",\n\t\t\t\"bdt+\": \"border-top:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdt:n\": \"border-top:none;\",\n\t\t\t\"bdts\": \"border-top-style:|;\",\n\t\t\t\"bdts:n\": \"border-top-style:none;\",\n\t\t\t\"bdtc\": \"border-top-color:#${1:000};\",\n\t\t\t\"bdtc:t\": \"border-top-color:transparent;\",\n\t\t\t\"bdr\": \"border-right:|;\",\n\t\t\t\"br\": \"border-right:|;\",\n\t\t\t\"bdr+\": \"border-right:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdr:n\": \"border-right:none;\",\n\t\t\t\"bdrst\": \"border-right-style:|;\",\n\t\t\t\"bdrst:n\": \"border-right-style:none;\",\n\t\t\t\"bdrc\": \"border-right-color:#${1:000};\",\n\t\t\t\"bdrc:t\": \"border-right-color:transparent;\",\n\t\t\t\"bdb\": \"border-bottom:|;\",\n\t\t\t\"bb\": \"border-bottom:|;\",\n\t\t\t\"bdb+\": \"border-bottom:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdb:n\": \"border-bottom:none;\",\n\t\t\t\"bdbs\": \"border-bottom-style:|;\",\n\t\t\t\"bdbs:n\": \"border-bottom-style:none;\",\n\t\t\t\"bdbc\": \"border-bottom-color:#${1:000};\",\n\t\t\t\"bdbc:t\": \"border-bottom-color:transparent;\",\n\t\t\t\"bdl\": \"border-left:|;\",\n\t\t\t\"bl\": \"border-left:|;\",\n\t\t\t\"bdl+\": \"border-left:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdl:n\": \"border-left:none;\",\n\t\t\t\"bdls\": \"border-left-style:|;\",\n\t\t\t\"bdls:n\": \"border-left-style:none;\",\n\t\t\t\"bdlc\": \"border-left-color:#${1:000};\",\n\t\t\t\"bdlc:t\": \"border-left-color:transparent;\",\n\t\t\t\"bdrs\": \"border-radius:|;\",\n\t\t\t\"bdtrrs\": \"border-top-right-radius:|;\",\n\t\t\t\"bdtlrs\": \"border-top-left-radius:|;\",\n\t\t\t\"bdbrrs\": \"border-bottom-right-radius:|;\",\n\t\t\t\"bdblrs\": \"border-bottom-left-radius:|;\",\n\t\t\t\"bg\": \"background:#${1:000};\",\n\t\t\t\"bg+\": \"background:${1:#fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};\",\n\t\t\t\"bg:n\": \"background:none;\",\n\t\t\t\"bg:ie\": \"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1:x}.png',sizingMethod='${2:crop}');\",\n\t\t\t\"bgc\": \"background-color:#${1:fff};\",\n\t\t\t\"bgc:t\": \"background-color:transparent;\",\n\t\t\t\"bgi\": \"background-image:url(|);\",\n\t\t\t\"bgi:n\": \"background-image:none;\",\n\t\t\t\"bgr\": \"background-repeat:|;\",\n\t\t\t\"bgr:n\": \"background-repeat:no-repeat;\",\n\t\t\t\"bgr:x\": \"background-repeat:repeat-x;\",\n\t\t\t\"bgr:y\": \"background-repeat:repeat-y;\",\n\t\t\t\"bgr:sp\": \"background-repeat:space;\",\n\t\t\t\"bgr:rd\": \"background-repeat:round;\",\n\t\t\t\"bga\": \"background-attachment:|;\",\n\t\t\t\"bga:f\": \"background-attachment:fixed;\",\n\t\t\t\"bga:s\": \"background-attachment:scroll;\",\n\t\t\t\"bgp\": \"background-position:${1:0} ${2:0};\",\n\t\t\t\"bgpx\": \"background-position-x:|;\",\n\t\t\t\"bgpy\": \"background-position-y:|;\",\n\t\t\t\"bgbk\": \"background-break:|;\",\n\t\t\t\"bgbk:bb\": \"background-break:bounding-box;\",\n\t\t\t\"bgbk:eb\": \"background-break:each-box;\",\n\t\t\t\"bgbk:c\": \"background-break:continuous;\",\n\t\t\t\"bgcp\": \"background-clip:${1:padding-box};\",\n\t\t\t\"bgcp:bb\": \"background-clip:border-box;\",\n\t\t\t\"bgcp:pb\": \"background-clip:padding-box;\",\n\t\t\t\"bgcp:cb\": \"background-clip:content-box;\",\n\t\t\t\"bgcp:nc\": \"background-clip:no-clip;\",\n\t\t\t\"bgo\": \"background-origin:|;\",\n\t\t\t\"bgo:pb\": \"background-origin:padding-box;\",\n\t\t\t\"bgo:bb\": \"background-origin:border-box;\",\n\t\t\t\"bgo:cb\": \"background-origin:content-box;\",\n\t\t\t\"bgsz\": \"background-size:|;\",\n\t\t\t\"bgsz:a\": \"background-size:auto;\",\n\t\t\t\"bgsz:ct\": \"background-size:contain;\",\n\t\t\t\"bgsz:cv\": \"background-size:cover;\",\n\t\t\t\"c\": \"color:#${1:000};\",\n\t\t\t\"c:r\": \"color:rgb(${1:0}, ${2:0}, ${3:0});\",\n\t\t\t\"c:ra\": \"color:rgba(${1:0}, ${2:0}, ${3:0}, .${4:5});\",\n\t\t\t\"cm\": \"/* |${child} */\",\n\t\t\t\"cnt\": \"content:'|';\",\n\t\t\t\"cnt:n\": \"content:normal;\",\n\t\t\t\"cnt:oq\": \"content:open-quote;\",\n\t\t\t\"cnt:noq\": \"content:no-open-quote;\",\n\t\t\t\"cnt:cq\": \"content:close-quote;\",\n\t\t\t\"cnt:ncq\": \"content:no-close-quote;\",\n\t\t\t\"cnt:a\": \"content:attr(|);\",\n\t\t\t\"cnt:c\": \"content:counter(|);\",\n\t\t\t\"cnt:cs\": \"content:counters(|);\",\n\n\n\t\t\t\"tbl\": \"table-layout:|;\",\n\t\t\t\"tbl:a\": \"table-layout:auto;\",\n\t\t\t\"tbl:f\": \"table-layout:fixed;\",\n\t\t\t\"cps\": \"caption-side:|;\",\n\t\t\t\"cps:t\": \"caption-side:top;\",\n\t\t\t\"cps:b\": \"caption-side:bottom;\",\n\t\t\t\"ec\": \"empty-cells:|;\",\n\t\t\t\"ec:s\": \"empty-cells:show;\",\n\t\t\t\"ec:h\": \"empty-cells:hide;\",\n\t\t\t\"lis\": \"list-style:|;\",\n\t\t\t\"lis:n\": \"list-style:none;\",\n\t\t\t\"lisp\": \"list-style-position:|;\",\n\t\t\t\"lisp:i\": \"list-style-position:inside;\",\n\t\t\t\"lisp:o\": \"list-style-position:outside;\",\n\t\t\t\"list\": \"list-style-type:|;\",\n\t\t\t\"list:n\": \"list-style-type:none;\",\n\t\t\t\"list:d\": \"list-style-type:disc;\",\n\t\t\t\"list:c\": \"list-style-type:circle;\",\n\t\t\t\"list:s\": \"list-style-type:square;\",\n\t\t\t\"list:dc\": \"list-style-type:decimal;\",\n\t\t\t\"list:dclz\": \"list-style-type:decimal-leading-zero;\",\n\t\t\t\"list:lr\": \"list-style-type:lower-roman;\",\n\t\t\t\"list:ur\": \"list-style-type:upper-roman;\",\n\t\t\t\"lisi\": \"list-style-image:|;\",\n\t\t\t\"lisi:n\": \"list-style-image:none;\",\n\t\t\t\"q\": \"quotes:|;\",\n\t\t\t\"q:n\": \"quotes:none;\",\n\t\t\t\"q:ru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C';\",\n\t\t\t\"q:en\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019';\",\n\t\t\t\"ct\": \"content:|;\",\n\t\t\t\"ct:n\": \"content:normal;\",\n\t\t\t\"ct:oq\": \"content:open-quote;\",\n\t\t\t\"ct:noq\": \"content:no-open-quote;\",\n\t\t\t\"ct:cq\": \"content:close-quote;\",\n\t\t\t\"ct:ncq\": \"content:no-close-quote;\",\n\t\t\t\"ct:a\": \"content:attr(|);\",\n\t\t\t\"ct:c\": \"content:counter(|);\",\n\t\t\t\"ct:cs\": \"content:counters(|);\",\n\t\t\t\"coi\": \"counter-increment:|;\",\n\t\t\t\"cor\": \"counter-reset:|;\",\n\t\t\t\"va\": \"vertical-align:${1:top};\",\n\t\t\t\"va:sup\": \"vertical-align:super;\",\n\t\t\t\"va:t\": \"vertical-align:top;\",\n\t\t\t\"va:tt\": \"vertical-align:text-top;\",\n\t\t\t\"va:m\": \"vertical-align:middle;\",\n\t\t\t\"va:bl\": \"vertical-align:baseline;\",\n\t\t\t\"va:b\": \"vertical-align:bottom;\",\n\t\t\t\"va:tb\": \"vertical-align:text-bottom;\",\n\t\t\t\"va:sub\": \"vertical-align:sub;\",\n\t\t\t\"ta\": \"text-align:${1:left};\",\n\t\t\t\"ta:l\": \"text-align:left;\",\n\t\t\t\"ta:c\": \"text-align:center;\",\n\t\t\t\"ta:r\": \"text-align:right;\",\n\t\t\t\"ta:j\": \"text-align:justify;\",\n\t\t\t\"ta-lst\": \"text-align-last:|;\",\n\t\t\t\"tal:a\": \"text-align-last:auto;\",\n\t\t\t\"tal:l\": \"text-align-last:left;\",\n\t\t\t\"tal:c\": \"text-align-last:center;\",\n\t\t\t\"tal:r\": \"text-align-last:right;\",\n\t\t\t\"td\": \"text-decoration:${1:none};\",\n\t\t\t\"td:n\": \"text-decoration:none;\",\n\t\t\t\"td:u\": \"text-decoration:underline;\",\n\t\t\t\"td:o\": \"text-decoration:overline;\",\n\t\t\t\"td:l\": \"text-decoration:line-through;\",\n\t\t\t\"te\": \"text-emphasis:|;\",\n\t\t\t\"te:n\": \"text-emphasis:none;\",\n\t\t\t\"te:ac\": \"text-emphasis:accent;\",\n\t\t\t\"te:dt\": \"text-emphasis:dot;\",\n\t\t\t\"te:c\": \"text-emphasis:circle;\",\n\t\t\t\"te:ds\": \"text-emphasis:disc;\",\n\t\t\t\"te:b\": \"text-emphasis:before;\",\n\t\t\t\"te:a\": \"text-emphasis:after;\",\n\t\t\t\"th\": \"text-height:|;\",\n\t\t\t\"th:a\": \"text-height:auto;\",\n\t\t\t\"th:f\": \"text-height:font-size;\",\n\t\t\t\"th:t\": \"text-height:text-size;\",\n\t\t\t\"th:m\": \"text-height:max-size;\",\n\t\t\t\"ti\": \"text-indent:|;\",\n\t\t\t\"ti:-\": \"text-indent:-9999px;\",\n\t\t\t\"tj\": \"text-justify:|;\",\n\t\t\t\"tj:a\": \"text-justify:auto;\",\n\t\t\t\"tj:iw\": \"text-justify:inter-word;\",\n\t\t\t\"tj:ii\": \"text-justify:inter-ideograph;\",\n\t\t\t\"tj:ic\": \"text-justify:inter-cluster;\",\n\t\t\t\"tj:d\": \"text-justify:distribute;\",\n\t\t\t\"tj:k\": \"text-justify:kashida;\",\n\t\t\t\"tj:t\": \"text-justify:tibetan;\",\n\t\t\t\"tov\": \"text-overflow:${ellipsis};\",\n\t\t\t\"tov:e\": \"text-overflow:ellipsis;\",\n\t\t\t\"tov:c\": \"text-overflow:clip;\",\n\t\t\t\"to\": \"text-outline:|;\",\n\t\t\t\"to+\": \"text-outline:${1:0} ${2:0} ${3:#000};\",\n\t\t\t\"to:n\": \"text-outline:none;\",\n\t\t\t\"tr\": \"text-replace:|;\",\n\t\t\t\"tr:n\": \"text-replace:none;\",\n\t\t\t\"tt\": \"text-transform:${1:uppercase};\",\n\t\t\t\"tt:n\": \"text-transform:none;\",\n\t\t\t\"tt:c\": \"text-transform:capitalize;\",\n\t\t\t\"tt:u\": \"text-transform:uppercase;\",\n\t\t\t\"tt:l\": \"text-transform:lowercase;\",\n\t\t\t\"tw\": \"text-wrap:|;\",\n\t\t\t\"tw:n\": \"text-wrap:normal;\",\n\t\t\t\"tw:no\": \"text-wrap:none;\",\n\t\t\t\"tw:u\": \"text-wrap:unrestricted;\",\n\t\t\t\"tw:s\": \"text-wrap:suppress;\",\n\t\t\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000};\",\n\t\t\t\"tsh:r\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgb(${4:0}, ${5:0}, ${6:0});\",\n\t\t\t\"tsh:ra\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgba(${4:0}, ${5:0}, ${6:0}, .${7:5});\",\n\t\t\t\"tsh+\": \"text-shadow:${1:0} ${2:0} ${3:0} ${4:#000};\",\n\t\t\t\"tsh:n\": \"text-shadow:none;\",\n\t\t\t\"trf\": \"transform:|;\",\n\t\t\t\"trf:skx\": \"transform: skewX(${1:angle});\",\n\t\t\t\"trf:sky\": \"transform: skewY(${1:angle});\",\n\t\t\t\"trf:sc\": \"transform: scale(${1:x}, ${2:y});\",\n\t\t\t\"trf:scx\": \"transform: scaleX(${1:x});\",\n\t\t\t\"trf:scy\": \"transform: scaleY(${1:y});\",\n\t\t\t\"trf:r\": \"transform: rotate(${1:angle});\",\n\t\t\t\"trf:t\": \"transform: translate(${1:x}, ${2:y});\",\n\t\t\t\"trf:tx\": \"transform: translateX(${1:x});\",\n\t\t\t\"trf:ty\": \"transform: translateY(${1:y});\",\n\t\t\t\"trfo\": \"transform-origin:|;\",\n\t\t\t\"trfs\": \"transform-style:${1:preserve-3d};\",\n\t\t\t\"trs\": \"transition:${1:prop} ${2:time};\",\n\t\t\t\"trsde\": \"transition-delay:${1:time};\",\n\t\t\t\"trsdu\": \"transition-duration:${1:time};\",\n\t\t\t\"trsp\": \"transition-property:${1:prop};\",\n\t\t\t\"trstf\": \"transition-timing-function:${1:tfunc};\",\n\t\t\t\"lh\": \"line-height:|;\",\n\t\t\t\"whs\": \"white-space:|;\",\n\t\t\t\"whs:n\": \"white-space:normal;\",\n\t\t\t\"whs:p\": \"white-space:pre;\",\n\t\t\t\"whs:nw\": \"white-space:nowrap;\",\n\t\t\t\"whs:pw\": \"white-space:pre-wrap;\",\n\t\t\t\"whs:pl\": \"white-space:pre-line;\",\n\t\t\t\"whsc\": \"white-space-collapse:|;\",\n\t\t\t\"whsc:n\": \"white-space-collapse:normal;\",\n\t\t\t\"whsc:k\": \"white-space-collapse:keep-all;\",\n\t\t\t\"whsc:l\": \"white-space-collapse:loose;\",\n\t\t\t\"whsc:bs\": \"white-space-collapse:break-strict;\",\n\t\t\t\"whsc:ba\": \"white-space-collapse:break-all;\",\n\t\t\t\"wob\": \"word-break:|;\",\n\t\t\t\"wob:n\": \"word-break:normal;\",\n\t\t\t\"wob:k\": \"word-break:keep-all;\",\n\t\t\t\"wob:ba\": \"word-break:break-all;\",\n\t\t\t\"wos\": \"word-spacing:|;\",\n\t\t\t\"wow\": \"word-wrap:|;\",\n\t\t\t\"wow:nm\": \"word-wrap:normal;\",\n\t\t\t\"wow:n\": \"word-wrap:none;\",\n\t\t\t\"wow:u\": \"word-wrap:unrestricted;\",\n\t\t\t\"wow:s\": \"word-wrap:suppress;\",\n\t\t\t\"wow:b\": \"word-wrap:break-word;\",\n\t\t\t\"wm\": \"writing-mode:${1:lr-tb};\",\n\t\t\t\"wm:lrt\": \"writing-mode:lr-tb;\",\n\t\t\t\"wm:lrb\": \"writing-mode:lr-bt;\",\n\t\t\t\"wm:rlt\": \"writing-mode:rl-tb;\",\n\t\t\t\"wm:rlb\": \"writing-mode:rl-bt;\",\n\t\t\t\"wm:tbr\": \"writing-mode:tb-rl;\",\n\t\t\t\"wm:tbl\": \"writing-mode:tb-lr;\",\n\t\t\t\"wm:btl\": \"writing-mode:bt-lr;\",\n\t\t\t\"wm:btr\": \"writing-mode:bt-rl;\",\n\t\t\t\"lts\": \"letter-spacing:|;\",\n\t\t\t\"lts-n\": \"letter-spacing:normal;\",\n\t\t\t\"f\": \"font:|;\",\n\t\t\t\"f+\": \"font:${1:1em} ${2:Arial,sans-serif};\",\n\t\t\t\"fw\": \"font-weight:|;\",\n\t\t\t\"fw:n\": \"font-weight:normal;\",\n\t\t\t\"fw:b\": \"font-weight:bold;\",\n\t\t\t\"fw:br\": \"font-weight:bolder;\",\n\t\t\t\"fw:lr\": \"font-weight:lighter;\",\n\t\t\t\"fs\": \"font-style:${italic};\",\n\t\t\t\"fs:n\": \"font-style:normal;\",\n\t\t\t\"fs:i\": \"font-style:italic;\",\n\t\t\t\"fs:o\": \"font-style:oblique;\",\n\t\t\t\"fv\": \"font-variant:|;\",\n\t\t\t\"fv:n\": \"font-variant:normal;\",\n\t\t\t\"fv:sc\": \"font-variant:small-caps;\",\n\t\t\t\"fz\": \"font-size:|;\",\n\t\t\t\"fza\": \"font-size-adjust:|;\",\n\t\t\t\"fza:n\": \"font-size-adjust:none;\",\n\t\t\t\"ff\": \"font-family:|;\",\n\t\t\t\"ff:s\": \"font-family:serif;\",\n\t\t\t\"ff:ss\": \"font-family:sans-serif;\",\n\t\t\t\"ff:c\": \"font-family:cursive;\",\n\t\t\t\"ff:f\": \"font-family:fantasy;\",\n\t\t\t\"ff:m\": \"font-family:monospace;\",\n\t\t\t\"ff:a\": \"font-family: Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif;\",\n\t\t\t\"ff:t\": \"font-family: \\\"Times New Roman\\\", Times, Baskerville, Georgia, serif;\",\n\t\t\t\"ff:v\": \"font-family: Verdana, Geneva, sans-serif;\",\n\t\t\t\"fef\": \"font-effect:|;\",\n\t\t\t\"fef:n\": \"font-effect:none;\",\n\t\t\t\"fef:eg\": \"font-effect:engrave;\",\n\t\t\t\"fef:eb\": \"font-effect:emboss;\",\n\t\t\t\"fef:o\": \"font-effect:outline;\",\n\t\t\t\"fem\": \"font-emphasize:|;\",\n\t\t\t\"femp\": \"font-emphasize-position:|;\",\n\t\t\t\"femp:b\": \"font-emphasize-position:before;\",\n\t\t\t\"femp:a\": \"font-emphasize-position:after;\",\n\t\t\t\"fems\": \"font-emphasize-style:|;\",\n\t\t\t\"fems:n\": \"font-emphasize-style:none;\",\n\t\t\t\"fems:ac\": \"font-emphasize-style:accent;\",\n\t\t\t\"fems:dt\": \"font-emphasize-style:dot;\",\n\t\t\t\"fems:c\": \"font-emphasize-style:circle;\",\n\t\t\t\"fems:ds\": \"font-emphasize-style:disc;\",\n\t\t\t\"fsm\": \"font-smooth:|;\",\n\t\t\t\"fsm:a\": \"font-smooth:auto;\",\n\t\t\t\"fsm:n\": \"font-smooth:never;\",\n\t\t\t\"fsm:aw\": \"font-smooth:always;\",\n\t\t\t\"fst\": \"font-stretch:|;\",\n\t\t\t\"fst:n\": \"font-stretch:normal;\",\n\t\t\t\"fst:uc\": \"font-stretch:ultra-condensed;\",\n\t\t\t\"fst:ec\": \"font-stretch:extra-condensed;\",\n\t\t\t\"fst:c\": \"font-stretch:condensed;\",\n\t\t\t\"fst:sc\": \"font-stretch:semi-condensed;\",\n\t\t\t\"fst:se\": \"font-stretch:semi-expanded;\",\n\t\t\t\"fst:e\": \"font-stretch:expanded;\",\n\t\t\t\"fst:ee\": \"font-stretch:extra-expanded;\",\n\t\t\t\"fst:ue\": \"font-stretch:ultra-expanded;\",\n\t\t\t\"op\": \"opacity:|;\",\n\t\t\t\"op+\": \"opacity: $1;\\nfilter: alpha(opacity=$2);\",\n\t\t\t\"op:ie\": \"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);\",\n\t\t\t\"op:ms\": \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';\",\n\t\t\t\"rsz\": \"resize:|;\",\n\t\t\t\"rsz:n\": \"resize:none;\",\n\t\t\t\"rsz:b\": \"resize:both;\",\n\t\t\t\"rsz:h\": \"resize:horizontal;\",\n\t\t\t\"rsz:v\": \"resize:vertical;\",\n\t\t\t\"cur\": \"cursor:${pointer};\",\n\t\t\t\"cur:a\": \"cursor:auto;\",\n\t\t\t\"cur:d\": \"cursor:default;\",\n\t\t\t\"cur:c\": \"cursor:crosshair;\",\n\t\t\t\"cur:ha\": \"cursor:hand;\",\n\t\t\t\"cur:he\": \"cursor:help;\",\n\t\t\t\"cur:m\": \"cursor:move;\",\n\t\t\t\"cur:p\": \"cursor:pointer;\",\n\t\t\t\"cur:t\": \"cursor:text;\",\n\t\t\t\"pgbb\": \"page-break-before:|;\",\n\t\t\t\"pgbb:au\": \"page-break-before:auto;\",\n\t\t\t\"pgbb:al\": \"page-break-before:always;\",\n\t\t\t\"pgbb:l\": \"page-break-before:left;\",\n\t\t\t\"pgbb:r\": \"page-break-before:right;\",\n\t\t\t\"pgbi\": \"page-break-inside:|;\",\n\t\t\t\"pgbi:au\": \"page-break-inside:auto;\",\n\t\t\t\"pgbi:av\": \"page-break-inside:avoid;\",\n\t\t\t\"pgba\": \"page-break-after:|;\",\n\t\t\t\"pgba:au\": \"page-break-after:auto;\",\n\t\t\t\"pgba:al\": \"page-break-after:always;\",\n\t\t\t\"pgba:l\": \"page-break-after:left;\",\n\t\t\t\"pgba:r\": \"page-break-after:right;\",\n\t\t\t\"orp\": \"orphans:|;\",\n\t\t\t\"us\": \"user-select:${none};\",\n\t\t\t\"wid\": \"widows:|;\",\n\t\t\t\"wfsm\": \"-webkit-font-smoothing:${antialiased};\",\n\t\t\t\"wfsm:a\": \"-webkit-font-smoothing:antialiased;\",\n\t\t\t\"wfsm:s\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:sa\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:n\": \"-webkit-font-smoothing:none;\"\n\t\t}\n\t},\n\t\n\t\"html\": {\n\t\t\"filters\": \"html\",\n\t\t\"profile\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"!!!\":    \"<!doctype html>\",\n\t\t\t\"!!!4t\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\",\n\t\t\t\"!!!4s\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\",\n\t\t\t\"!!!xt\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\",\n\t\t\t\"!!!xs\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\",\n\t\t\t\"!!!xxs\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\",\n\n\t\t\t\"c\": \"<!-- |${child} -->\",\n\t\t\t\"cc:ie6\": \"<!--[if lte IE 6]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:ie\": \"<!--[if IE]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:noie\": \"<!--[if !IE]><!-->\\n\\t${child}|\\n<!--<![endif]-->\"\n\t\t},\n\t\t\n\t\t\"abbreviations\": {\n\t\t\t\"!\": \"html:5\",\n\t\t\t\"a\": \"<a href=\\\"\\\">\",\n\t\t\t\"a:link\": \"<a href=\\\"http://|\\\">\",\n\t\t\t\"a:mail\": \"<a href=\\\"mailto:|\\\">\",\n\t\t\t\"abbr\": \"<abbr title=\\\"\\\">\",\n\t\t\t\"acronym\": \"<acronym title=\\\"\\\">\",\n\t\t\t\"base\": \"<base href=\\\"\\\" />\",\n\t\t\t\"basefont\": \"<basefont/>\",\n\t\t\t\"br\": \"<br/>\",\n\t\t\t\"frame\": \"<frame/>\",\n\t\t\t\"hr\": \"<hr/>\",\n\t\t\t\"bdo\": \"<bdo dir=\\\"\\\">\",\n\t\t\t\"bdo:r\": \"<bdo dir=\\\"rtl\\\">\",\n\t\t\t\"bdo:l\": \"<bdo dir=\\\"ltr\\\">\",\n\t\t\t\"col\": \"<col/>\",\n\t\t\t\"link\": \"<link rel=\\\"stylesheet\\\" href=\\\"\\\" />\",\n\t\t\t\"link:css\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:style}.css\\\" />\",\n\t\t\t\"link:print\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:print}.css\\\" media=\\\"print\\\" />\",\n\t\t\t\"link:favicon\": \"<link rel=\\\"shortcut icon\\\" type=\\\"image/x-icon\\\" href=\\\"${1:favicon.ico}\\\" />\",\n\t\t\t\"link:touch\": \"<link rel=\\\"apple-touch-icon\\\" href=\\\"${1:favicon.png}\\\" />\",\n\t\t\t\"link:rss\": \"<link rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"RSS\\\" href=\\\"${1:rss.xml}\\\" />\",\n\t\t\t\"link:atom\": \"<link rel=\\\"alternate\\\" type=\\\"application/atom+xml\\\" title=\\\"Atom\\\" href=\\\"${1:atom.xml}\\\" />\",\n\t\t\t\"meta\": \"<meta/>\",\n\t\t\t\"meta:utf\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=UTF-8\\\" />\",\n\t\t\t\"meta:win\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=windows-1251\\\" />\",\n\t\t\t\"meta:vp\": \"<meta name=\\\"viewport\\\" content=\\\"width=${1:device-width}, user-scalable=${2:no}, initial-scale=${3:1.0}, maximum-scale=${4:1.0}, minimum-scale=${5:1.0}\\\" />\",\n\t\t\t\"meta:compat\": \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"${1:IE=7}\\\" />\",\n\t\t\t\"style\": \"<style>\",\n\t\t\t\"script\": \"<script>\",\n\t\t\t\"script:src\": \"<script src=\\\"\\\">\",\n\t\t\t\"img\": \"<img src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"iframe\": \"<iframe src=\\\"\\\" frameborder=\\\"0\\\">\",\n\t\t\t\"embed\": \"<embed src=\\\"\\\" type=\\\"\\\" />\",\n\t\t\t\"object\": \"<object data=\\\"\\\" type=\\\"\\\">\",\n\t\t\t\"param\": \"<param name=\\\"\\\" value=\\\"\\\" />\",\n\t\t\t\"map\": \"<map name=\\\"\\\">\",\n\t\t\t\"area\": \"<area shape=\\\"\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:d\": \"<area shape=\\\"default\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:c\": \"<area shape=\\\"circle\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:r\": \"<area shape=\\\"rect\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:p\": \"<area shape=\\\"poly\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"form\": \"<form action=\\\"\\\">\",\n\t\t\t\"form:get\": \"<form action=\\\"\\\" method=\\\"get\\\">\",\n\t\t\t\"form:post\": \"<form action=\\\"\\\" method=\\\"post\\\">\",\n\t\t\t\"label\": \"<label for=\\\"\\\">\",\n\t\t\t\"input\": \"<input type=\\\"${1:text}\\\" />\",\n\t\t\t\"inp\": \"<input type=\\\"${1:text}\\\" name=\\\"\\\" id=\\\"\\\" />\",\n\t\t\t\"input:hidden\": \"input[type=hidden name]\",\n\t\t\t\"input:h\": \"input:hidden\",\n\t\t\t\"input:text\": \"inp\",\n\t\t\t\"input:t\": \"inp\",\n\t\t\t\"input:search\": \"inp[type=search]\",\n\t\t\t\"input:email\": \"inp[type=email]\",\n\t\t\t\"input:url\": \"inp[type=url]\",\n\t\t\t\"input:password\": \"inp[type=password]\",\n\t\t\t\"input:p\": \"input:password\",\n\t\t\t\"input:datetime\": \"inp[type=datetime]\",\n\t\t\t\"input:date\": \"inp[type=date]\",\n\t\t\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\t\t\"input:month\": \"inp[type=month]\",\n\t\t\t\"input:week\": \"inp[type=week]\",\n\t\t\t\"input:time\": \"inp[type=time]\",\n\t\t\t\"input:number\": \"inp[type=number]\",\n\t\t\t\"input:color\": \"inp[type=color]\",\n\t\t\t\"input:checkbox\": \"inp[type=checkbox]\",\n\t\t\t\"input:c\": \"input:checkbox\",\n\t\t\t\"input:radio\": \"inp[type=radio]\",\n\t\t\t\"input:r\": \"input:radio\",\n\t\t\t\"input:range\": \"inp[type=range]\",\n\t\t\t\"input:file\": \"inp[type=file]\",\n\t\t\t\"input:f\": \"input:file\",\n\t\t\t\"input:submit\": \"<input type=\\\"submit\\\" value=\\\"\\\" />\",\n\t\t\t\"input:s\": \"input:submit\",\n\t\t\t\"input:image\": \"<input type=\\\"image\\\" src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"input:i\": \"input:image\",\n\t\t\t\"input:button\": \"<input type=\\\"button\\\" value=\\\"\\\" />\",\n\t\t\t\"input:b\": \"input:button\",\n\t\t\t\"isindex\": \"<isindex/>\",\n\t\t\t\"input:reset\": \"input:button[type=reset]\",\n\t\t\t\"select\": \"<select name=\\\"\\\" id=\\\"\\\">\",\n\t\t\t\"select:disabled\": \"select[disabled]\",\n\t\t\t\"select:d\": \"select[disabled]\",\n\t\t\t\"option\": \"<option value=\\\"\\\">\",\n\t\t\t\"textarea\": \"<textarea name=\\\"\\\" id=\\\"\\\" cols=\\\"${1:30}\\\" rows=\\\"${2:10}\\\">\",\n\t\t\t\"marquee\": \"<marquee behavior=\\\"\\\" direction=\\\"\\\">\",\n\t\t\t\"menu:context\": \"menu[type=context]>\",\n\t\t\t\"menu:c\": \"menu:context\",\n\t\t\t\"menu:toolbar\": \"menu[type=toolbar]>\",\n\t\t\t\"menu:t\": \"menu:toolbar\",\n\t\t\t\"video\": \"<video src=\\\"\\\">\",\n\t\t\t\"audio\": \"<audio src=\\\"\\\">\",\n\t\t\t\"html:xml\": \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\",\n\t\t\t\"keygen\": \"<keygen/>\",\n\t\t\t\"command\": \"<command/>\",\n\t\t\t\"button:submit\" : \"button[type=submit]\",\n\t\t\t\"button:s\" : \"button[type=submit]\",\n\t\t\t\"button:reset\" : \"button[type=reset]\",\n\t\t\t\"button:r\" : \"button[type=reset]\",\n\t\t\t\"button:disabled\" : \"button[disabled]\",\n\t\t\t\"button:d\" : \"button[disabled]\",\n\t\t\t\"fieldset:disabled\" : \"fieldset[disabled]\",\n\t\t\t\"fieldset:d\" : \"fieldset[disabled]\",\n\t\t\t\n\t\t\t\"bq\": \"blockquote\",\n\t\t\t\"acr\": \"acronym\",\n\t\t\t\"fig\": \"figure\",\n\t\t\t\"figc\": \"figcaption\",\n\t\t\t\"ifr\": \"iframe\",\n\t\t\t\"emb\": \"embed\",\n\t\t\t\"obj\": \"object\",\n\t\t\t\"src\": \"source\",\n\t\t\t\"cap\": \"caption\",\n\t\t\t\"colg\": \"colgroup\",\n\t\t\t\"fst\": \"fieldset\",\n\t\t\t\"fst:d\": \"fieldset[disabled]\",\n\t\t\t\"btn\": \"button\",\n\t\t\t\"btn:b\": \"button[type=button]\",\n\t\t\t\"btn:r\": \"button[type=reset]\",\n\t\t\t\"btn:s\": \"button[type=submit]\",\n\t\t\t\"btn:d\": \"button[disabled]\",\n\t\t\t\"optg\": \"optgroup\",\n\t\t\t\"opt\": \"option\",\n\t\t\t\"tarea\": \"textarea\",\n\t\t\t\"leg\": \"legend\",\n\t\t\t\"sect\": \"section\",\n\t\t\t\"art\": \"article\",\n\t\t\t\"hdr\": \"header\",\n\t\t\t\"ftr\": \"footer\",\n\t\t\t\"adr\": \"address\",\n\t\t\t\"dlg\": \"dialog\",\n\t\t\t\"str\": \"strong\",\n\t\t\t\"prog\": \"progress\",\n\t\t\t\"fset\": \"fieldset\",\n\t\t\t\"fset:d\": \"fieldset[disabled]\",\n\t\t\t\"datag\": \"datagrid\",\n\t\t\t\"datal\": \"datalist\",\n\t\t\t\"kg\": \"keygen\",\n\t\t\t\"out\": \"output\",\n\t\t\t\"det\": \"details\",\n\t\t\t\"cmd\": \"command\",\n\t\t\t\"doc\": \"html>(head>meta[charset=UTF-8]+title{${1:Document}})+body\",\n\t\t\t\"doc4\": \"html>(head>meta[http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=${charset}\\\"]+title{${1:Document}})+body\",\n\n\t\t\t\"html:4t\":  \"!!!4t+doc4[lang=${lang}]\",\n\t\t\t\"html:4s\":  \"!!!4s+doc4[lang=${lang}]\",\n\t\t\t\"html:xt\":  \"!!!xt+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xs\":  \"!!!xs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xxs\": \"!!!xxs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:5\":   \"!!!+doc[lang=${lang}]\",\n\t\t\t\n\t\t\t\"ol+\": \"ol>li\",\n\t\t\t\"ul+\": \"ul>li\",\n\t\t\t\"dl+\": \"dl>dt+dd\",\n\t\t\t\"map+\": \"map>area\",\n\t\t\t\"table+\": \"table>tr>td\",\n\t\t\t\"colgroup+\": \"colgroup>col\",\n\t\t\t\"colg+\": \"colgroup>col\",\n\t\t\t\"tr+\": \"tr>td\",\n\t\t\t\"select+\": \"select>option\",\n\t\t\t\"optgroup+\": \"optgroup>option\",\n\t\t\t\"optg+\": \"optgroup>option\"\n\t\t}\n\t},\n\t\n\t\"xml\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html\"\n\t},\n\t\n\t\"xsl\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html, xsl\",\n\t\t\"abbreviations\": {\n\t\t\t\"tm\": \"<xsl:template match=\\\"\\\" mode=\\\"\\\">\",\n\t\t\t\"tmatch\": \"tm\",\n\t\t\t\"tn\": \"<xsl:template name=\\\"\\\">\",\n\t\t\t\"tname\": \"tn\",\n\t\t\t\"call\": \"<xsl:call-template name=\\\"\\\"/>\",\n\t\t\t\"ap\": \"<xsl:apply-templates select=\\\"\\\" mode=\\\"\\\"/>\",\n\t\t\t\"api\": \"<xsl:apply-imports/>\",\n\t\t\t\"imp\": \"<xsl:import href=\\\"\\\"/>\",\n\t\t\t\"inc\": \"<xsl:include href=\\\"\\\"/>\",\n\n\t\t\t\"ch\": \"<xsl:choose>\",\n\t\t\t\"xsl:when\": \"<xsl:when test=\\\"\\\">\",\n\t\t\t\"wh\": \"xsl:when\",\n\t\t\t\"ot\": \"<xsl:otherwise>\",\n\t\t\t\"if\": \"<xsl:if test=\\\"\\\">\",\n\n\t\t\t\"par\": \"<xsl:param name=\\\"\\\">\",\n\t\t\t\"pare\": \"<xsl:param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"var\": \"<xsl:variable name=\\\"\\\">\",\n\t\t\t\"vare\": \"<xsl:variable name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"wp\": \"<xsl:with-param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"key\": \"<xsl:key name=\\\"\\\" match=\\\"\\\" use=\\\"\\\"/>\",\n\n\t\t\t\"elem\": \"<xsl:element name=\\\"\\\">\",\n\t\t\t\"attr\": \"<xsl:attribute name=\\\"\\\">\",\n\t\t\t\"attrs\": \"<xsl:attribute-set name=\\\"\\\">\",\n\n\t\t\t\"cp\": \"<xsl:copy select=\\\"\\\"/>\",\n\t\t\t\"co\": \"<xsl:copy-of select=\\\"\\\"/>\",\n\t\t\t\"val\": \"<xsl:value-of select=\\\"\\\"/>\",\n\t\t\t\"each\": \"<xsl:for-each select=\\\"\\\">\",\n\t\t\t\"for\": \"each\",\n\t\t\t\"tex\": \"<xsl:text></xsl:text>\",\n\n\t\t\t\"com\": \"<xsl:comment>\",\n\t\t\t\"msg\": \"<xsl:message terminate=\\\"no\\\">\",\n\t\t\t\"fall\": \"<xsl:fallback>\",\n\t\t\t\"num\": \"<xsl:number value=\\\"\\\"/>\",\n\t\t\t\"nam\": \"<namespace-alias stylesheet-prefix=\\\"\\\" result-prefix=\\\"\\\"/>\",\n\t\t\t\"pres\": \"<xsl:preserve-space elements=\\\"\\\"/>\",\n\t\t\t\"strip\": \"<xsl:strip-space elements=\\\"\\\"/>\",\n\t\t\t\"proc\": \"<xsl:processing-instruction name=\\\"\\\">\",\n\t\t\t\"sort\": \"<xsl:sort select=\\\"\\\" order=\\\"\\\"/>\",\n\n\t\t\t\"choose+\": \"xsl:choose>xsl:when+xsl:otherwise\",\n\t\t\t\"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\"\n\t\t}, \n\t\t\"snippets\": {\n\t\t\t\"!!!\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n\t\t}\n\t},\n\t\n\t\"haml\": {\n\t\t\"filters\": \"haml\",\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\"\n\t},\n\t\n\t\"scss\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"sass\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"less\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"stylus\": {\n\t\t\"extends\": \"css\"\n\t},\n\n\t\"styl\": {\n\t\t\"extends\": \"stylus\"\n\t}\n}\n;\nvar res = require('resources');\nvar userData = res.getVocabulary('user') || {};\nres.setVocabulary(require('utils').deepMerge(userData, snippets), 'user');\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/emmet/emmet.js\n// module id = 212\n// module chunks = 28"],"sourceRoot":""}